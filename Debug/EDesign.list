
EDesign.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a984  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800ab28  0800ab28  0001ab28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac98  0800ac98  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac98  0800ac98  0001ac98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aca0  0800aca0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aca0  0800aca0  0001aca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aca4  0800aca4  0001aca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800aca8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d0  20000084  0800ad2c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0800ad2c  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a92  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293e  00000000  00000000  00034b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00037488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd8  00000000  00000000  00038568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a2f  00000000  00000000  00039540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014704  00000000  00000000  00052f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1a86  00000000  00000000  00067673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001090f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005148  00000000  00000000  0010914c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab0c 	.word	0x0800ab0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800ab0c 	.word	0x0800ab0c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000eba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000ebe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000ec2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ec6:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eca:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000ecc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000ece:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f80e 	bl	8000f02 <Lcd_init>

	return lcd;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	461d      	mov	r5, r3
 8000eea:	f107 0410 	add.w	r4, r7, #16
 8000eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ef2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ef6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	3728      	adds	r7, #40	; 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bdb0      	pop	{r4, r5, r7, pc}

08000f02 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7d9b      	ldrb	r3, [r3, #22]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10c      	bne.n	8000f2c <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000f12:	2133      	movs	r1, #51	; 0x33
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f000 f863 	bl	8000fe0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000f1a:	2132      	movs	r1, #50	; 0x32
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f85f 	bl	8000fe0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000f22:	2128      	movs	r1, #40	; 0x28
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f000 f85b 	bl	8000fe0 <lcd_write_command>
 8000f2a:	e003      	b.n	8000f34 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000f2c:	2138      	movs	r1, #56	; 0x38
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f856 	bl	8000fe0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000f34:	2101      	movs	r1, #1
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 f852 	bl	8000fe0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000f3c:	210c      	movs	r1, #12
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 f84e 	bl	8000fe0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000f44:	2106      	movs	r1, #6
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 f84a 	bl	8000fe0 <lcd_write_command>
}
 8000f4c:	bf00      	nop
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	e00a      	b.n	8000f7a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	683a      	ldr	r2, [r7, #0]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f864 	bl	800103c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73fb      	strb	r3, [r7, #15]
 8000f7a:	7bfc      	ldrb	r4, [r7, #15]
 8000f7c:	6838      	ldr	r0, [r7, #0]
 8000f7e:	f7ff f92f 	bl	80001e0 <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	429c      	cmp	r4, r3
 8000f86:	d3ed      	bcc.n	8000f64 <Lcd_string+0x10>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3714      	adds	r7, #20
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd90      	pop	{r4, r7, pc}
	...

08000f94 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <Lcd_cursor+0x30>)
 8000fa8:	5cd2      	ldrb	r2, [r2, r3]
 8000faa:	78bb      	ldrb	r3, [r7, #2]
 8000fac:	4413      	add	r3, r2
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	3b80      	subs	r3, #128	; 0x80
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f812 	bl	8000fe0 <lcd_write_command>
	#endif
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	0800ac0c 	.word	0x0800ac0c

08000fc8 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f804 	bl	8000fe0 <lcd_write_command>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6898      	ldr	r0, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	899b      	ldrh	r3, [r3, #12]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	f004 fd08 	bl	8005a0c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7d9b      	ldrb	r3, [r3, #22]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d111      	bne.n	8001028 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2204      	movs	r2, #4
 800100c:	4619      	mov	r1, r3
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f842 	bl	8001098 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2204      	movs	r2, #4
 800101e:	4619      	mov	r1, r3
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f839 	bl	8001098 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8001026:	e005      	b.n	8001034 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	2208      	movs	r2, #8
 800102c:	4619      	mov	r1, r3
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f832 	bl	8001098 <lcd_write>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6898      	ldr	r0, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	899b      	ldrh	r3, [r3, #12]
 8001050:	2201      	movs	r2, #1
 8001052:	4619      	mov	r1, r3
 8001054:	f004 fcda 	bl	8005a0c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	7d9b      	ldrb	r3, [r3, #22]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d111      	bne.n	8001084 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2204      	movs	r2, #4
 8001068:	4619      	mov	r1, r3
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f814 	bl	8001098 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001070:	78fb      	ldrb	r3, [r7, #3]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	b2db      	uxtb	r3, r3
 8001078:	2204      	movs	r2, #4
 800107a:	4619      	mov	r1, r3
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f80b 	bl	8001098 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001082:	e005      	b.n	8001090 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001084:	78fb      	ldrb	r3, [r7, #3]
 8001086:	2208      	movs	r2, #8
 8001088:	4619      	mov	r1, r3
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f804 	bl	8001098 <lcd_write>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	70fb      	strb	r3, [r7, #3]
 80010a4:	4613      	mov	r3, r2
 80010a6:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e019      	b.n	80010e2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	6818      	ldr	r0, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	7bfb      	ldrb	r3, [r7, #15]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	8819      	ldrh	r1, [r3, #0]
 80010c6:	78fa      	ldrb	r2, [r7, #3]
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	fa42 f303 	asr.w	r3, r2, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	461a      	mov	r2, r3
 80010d8:	f004 fc98 	bl	8005a0c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	3301      	adds	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	78bb      	ldrb	r3, [r7, #2]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d3e1      	bcc.n	80010ae <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6918      	ldr	r0, [r3, #16]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	8a9b      	ldrh	r3, [r3, #20]
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	f004 fc89 	bl	8005a0c <HAL_GPIO_WritePin>
	DELAY(1);
 80010fa:	2001      	movs	r0, #1
 80010fc:	f003 f926 	bl	800434c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6918      	ldr	r0, [r3, #16]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	8a9b      	ldrh	r3, [r3, #20]
 8001108:	2200      	movs	r2, #0
 800110a:	4619      	mov	r1, r3
 800110c:	f004 fc7e 	bl	8005a0c <HAL_GPIO_WritePin>
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b0a0      	sub	sp, #128	; 0x80
 800111c:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */

	state = (progStates* )calloc(1,sizeof(progStates));
 800111e:	218c      	movs	r1, #140	; 0x8c
 8001120:	2001      	movs	r0, #1
 8001122:	f008 f879 	bl	8009218 <calloc>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	4bab      	ldr	r3, [pc, #684]	; (80013d8 <main+0x2c0>)
 800112c:	601a      	str	r2, [r3, #0]
	tempSense = (tempSensor* )calloc(1,sizeof(tempSensor));
 800112e:	21ac      	movs	r1, #172	; 0xac
 8001130:	2001      	movs	r0, #1
 8001132:	f008 f871 	bl	8009218 <calloc>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	4ba8      	ldr	r3, [pc, #672]	; (80013dc <main+0x2c4>)
 800113c:	601a      	str	r2, [r3, #0]
	screen = (lcdScreen* )calloc(1,sizeof(lcdScreen));
 800113e:	2174      	movs	r1, #116	; 0x74
 8001140:	2001      	movs	r0, #1
 8001142:	f008 f869 	bl	8009218 <calloc>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4ba5      	ldr	r3, [pc, #660]	; (80013e0 <main+0x2c8>)
 800114c:	601a      	str	r2, [r3, #0]
	powerMeasure = (powerSensor* )calloc(1,sizeof(powerSensor));
 800114e:	2190      	movs	r1, #144	; 0x90
 8001150:	2001      	movs	r0, #1
 8001152:	f008 f861 	bl	8009218 <calloc>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	4ba2      	ldr	r3, [pc, #648]	; (80013e4 <main+0x2cc>)
 800115c:	601a      	str	r2, [r3, #0]
	sDateTime = (dateTime*)calloc(1,sizeof(dateTime));
 800115e:	211c      	movs	r1, #28
 8001160:	2001      	movs	r0, #1
 8001162:	f008 f859 	bl	8009218 <calloc>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	4b9f      	ldr	r3, [pc, #636]	; (80013e8 <main+0x2d0>)
 800116c:	601a      	str	r2, [r3, #0]
	calibVals = (calibValue*)calloc(1,sizeof(calibValue));
 800116e:	2128      	movs	r1, #40	; 0x28
 8001170:	2001      	movs	r0, #1
 8001172:	f008 f851 	bl	8009218 <calloc>
 8001176:	4603      	mov	r3, r0
 8001178:	461a      	mov	r2, r3
 800117a:	4b9c      	ldr	r3, [pc, #624]	; (80013ec <main+0x2d4>)
 800117c:	601a      	str	r2, [r3, #0]
	tMenu = (timeMenu*)calloc(1, sizeof(timeMenu));
 800117e:	2114      	movs	r1, #20
 8001180:	2001      	movs	r0, #1
 8001182:	f008 f849 	bl	8009218 <calloc>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	4b99      	ldr	r3, [pc, #612]	; (80013f0 <main+0x2d8>)
 800118c:	601a      	str	r2, [r3, #0]

//	Initialising the debounce button states. Assuming that all btns are pulled put this can be checked though ioc generated file.
	btn1bounce.level = 1;
 800118e:	4b99      	ldr	r3, [pc, #612]	; (80013f4 <main+0x2dc>)
 8001190:	2201      	movs	r2, #1
 8001192:	601a      	str	r2, [r3, #0]
	btn2bounce.level = 1;
 8001194:	4b98      	ldr	r3, [pc, #608]	; (80013f8 <main+0x2e0>)
 8001196:	2201      	movs	r2, #1
 8001198:	601a      	str	r2, [r3, #0]
	btn3bounce.level = 1;
 800119a:	4b98      	ldr	r3, [pc, #608]	; (80013fc <main+0x2e4>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]
	btn4bounce.level = 1;
 80011a0:	4b97      	ldr	r3, [pc, #604]	; (8001400 <main+0x2e8>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
	btn5bounce.level = 1;
 80011a6:	4b97      	ldr	r3, [pc, #604]	; (8001404 <main+0x2ec>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ac:	f003 f85c 	bl	8004268 <HAL_Init>

  /* USER CODE BEGIN Init */
  progInit(state);
 80011b0:	4b89      	ldr	r3, [pc, #548]	; (80013d8 <main+0x2c0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f001 fc0b 	bl	80029d0 <progInit>
  tempSensorInit(tempSense);
 80011ba:	4b88      	ldr	r3, [pc, #544]	; (80013dc <main+0x2c4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fc36 	bl	8002a30 <tempSensorInit>
  screenInit(screen, tempSense, powerMeasure, sDateTime);
 80011c4:	4b86      	ldr	r3, [pc, #536]	; (80013e0 <main+0x2c8>)
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	4b84      	ldr	r3, [pc, #528]	; (80013dc <main+0x2c4>)
 80011ca:	6819      	ldr	r1, [r3, #0]
 80011cc:	4b85      	ldr	r3, [pc, #532]	; (80013e4 <main+0x2cc>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b85      	ldr	r3, [pc, #532]	; (80013e8 <main+0x2d0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f002 fb2b 	bl	800382e <screenInit>
  calibIinit(calibVals);
 80011d8:	4b84      	ldr	r3, [pc, #528]	; (80013ec <main+0x2d4>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f001 fc3b 	bl	8002a58 <calibIinit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e2:	f000 fdc5 	bl	8001d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e6:	f001 f8cd 	bl	8002384 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ea:	f001 f895 	bl	8002318 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011ee:	f001 f867 	bl	80022c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011f2:	f000 fe29 	bl	8001e48 <MX_ADC1_Init>
  MX_TIM3_Init();
 80011f6:	f000 ffc9 	bl	800218c <MX_TIM3_Init>
  MX_RTC_Init();
 80011fa:	f000 fe77 	bl	8001eec <MX_RTC_Init>
  MX_TIM1_Init();
 80011fe:	f000 fecf 	bl	8001fa0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001202:	f000 ff6b 	bl	80020dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  Lcd_PortType LCD_pin_ports[] = { GPIOB, GPIOC, GPIOA, GPIOA};
 8001206:	4b80      	ldr	r3, [pc, #512]	; (8001408 <main+0x2f0>)
 8001208:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800120c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800120e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Lcd_PinType LCD_pins[] ={GPIO_PIN_2, GPIO_PIN_8, GPIO_PIN_11, GPIO_PIN_12};
 8001212:	4a7e      	ldr	r2, [pc, #504]	; (800140c <main+0x2f4>)
 8001214:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001218:	e892 0003 	ldmia.w	r2, {r0, r1}
 800121c:	e883 0003 	stmia.w	r3, {r0, r1}

  Lcd_HandleTypeDef lcd;

  lcd = Lcd_create(LCD_pin_ports, LCD_pins, GPIOC, GPIO_PIN_4, GPIOB, GPIO_PIN_1, LCD_4_BIT_MODE);
 8001220:	4638      	mov	r0, r7
 8001222:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001226:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800122a:	2300      	movs	r3, #0
 800122c:	9303      	str	r3, [sp, #12]
 800122e:	2302      	movs	r3, #2
 8001230:	9302      	str	r3, [sp, #8]
 8001232:	4b77      	ldr	r3, [pc, #476]	; (8001410 <main+0x2f8>)
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	2310      	movs	r3, #16
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	4b76      	ldr	r3, [pc, #472]	; (8001414 <main+0x2fc>)
 800123c:	f7ff fe36 	bl	8000eac <Lcd_create>
 8001240:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001244:	463d      	mov	r5, r7
 8001246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800124e:	e884 0003 	stmia.w	r4, {r0, r1}
  HAL_GPIO_WritePin(GPIOB, D4_Pin, GPIO_PIN_SET);
 8001252:	2201      	movs	r2, #1
 8001254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001258:	486d      	ldr	r0, [pc, #436]	; (8001410 <main+0x2f8>)
 800125a:	f004 fbd7 	bl	8005a0c <HAL_GPIO_WritePin>

  while(HAL_GetTick() <=100){
 800125e:	e000      	b.n	8001262 <main+0x14a>
	  __NOP();
 8001260:	bf00      	nop
  while(HAL_GetTick() <=100){
 8001262:	f003 f867 	bl	8004334 <HAL_GetTick>
 8001266:	4603      	mov	r3, r0
 8001268:	2b64      	cmp	r3, #100	; 0x64
 800126a:	d9f9      	bls.n	8001260 <main+0x148>
  }

  HAL_UART_Transmit_IT(&huart2, studentNumber, sizeof(studentNumber)-1);
 800126c:	220d      	movs	r2, #13
 800126e:	496a      	ldr	r1, [pc, #424]	; (8001418 <main+0x300>)
 8001270:	486a      	ldr	r0, [pc, #424]	; (800141c <main+0x304>)
 8001272:	f007 f86c 	bl	800834e <HAL_UART_Transmit_IT>
  int timeCapture = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	66fb      	str	r3, [r7, #108]	; 0x6c
  int timeCaptured = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	66bb      	str	r3, [r7, #104]	; 0x68
#if 0 // This is for demo 3
  displayMode1(&lcd, screen);
  screen->currentDisplay = 1;
#endif

  HAL_RTC_GetTime(&hrtc, &sDateTime->Time, RTC_FORMAT_BIN);
 800127e:	4b5a      	ldr	r3, [pc, #360]	; (80013e8 <main+0x2d0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2200      	movs	r2, #0
 8001284:	4619      	mov	r1, r3
 8001286:	4866      	ldr	r0, [pc, #408]	; (8001420 <main+0x308>)
 8001288:	f005 faa4 	bl	80067d4 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDateTime->Date, RTC_FORMAT_BIN);
 800128c:	4b56      	ldr	r3, [pc, #344]	; (80013e8 <main+0x2d0>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3314      	adds	r3, #20
 8001292:	2200      	movs	r2, #0
 8001294:	4619      	mov	r1, r3
 8001296:	4862      	ldr	r0, [pc, #392]	; (8001420 <main+0x308>)
 8001298:	f005 fb7e 	bl	8006998 <HAL_RTC_GetDate>
  sDateTime->year = 2024;
 800129c:	4b52      	ldr	r3, [pc, #328]	; (80013e8 <main+0x2d0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 80012a4:	619a      	str	r2, [r3, #24]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012a6:	2100      	movs	r1, #0
 80012a8:	485e      	ldr	r0, [pc, #376]	; (8001424 <main+0x30c>)
 80012aa:	f005 fd79 	bl	8006da0 <HAL_TIM_PWM_Start>

  setDisplayMode3(screen, sDateTime);
 80012ae:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <main+0x2c8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a4d      	ldr	r2, [pc, #308]	; (80013e8 <main+0x2d0>)
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 fb45 	bl	8003948 <setDisplayMode3>
  displayMode1(&lcd, screen);
 80012be:	4b48      	ldr	r3, [pc, #288]	; (80013e0 <main+0x2c8>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f002 fb71 	bl	80039b0 <displayMode1>
#if 1
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80012ce:	2100      	movs	r1, #0
 80012d0:	4855      	ldr	r0, [pc, #340]	; (8001428 <main+0x310>)
 80012d2:	f005 fe6f 	bl	8006fb4 <HAL_TIM_IC_Start_IT>

    /* USER CODE BEGIN 3 */

//	  Checking for button presses

	  if (state->activeBtn != 0){
 80012d6:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <main+0x2c0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	895b      	ldrh	r3, [r3, #10]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80e3 	beq.w	80014a8 <main+0x390>

		  switch (state->activeBtn){
 80012e2:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <main+0x2c0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	895b      	ldrh	r3, [r3, #10]
 80012e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ec:	f000 80ca 	beq.w	8001484 <main+0x36c>
 80012f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f4:	f300 80d3 	bgt.w	800149e <main+0x386>
 80012f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012fc:	d028      	beq.n	8001350 <main+0x238>
 80012fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001302:	f300 80cc 	bgt.w	800149e <main+0x386>
 8001306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800130a:	d009      	beq.n	8001320 <main+0x208>
 800130c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001310:	f300 80c5 	bgt.w	800149e <main+0x386>
 8001314:	2b20      	cmp	r3, #32
 8001316:	d034      	beq.n	8001382 <main+0x26a>
 8001318:	2b80      	cmp	r3, #128	; 0x80
 800131a:	f000 8092 	beq.w	8001442 <main+0x32a>
 800131e:	e0be      	b.n	800149e <main+0x386>

		  case S1_Pin:

			  if(state->mode == SMODE_DATETIME){
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <main+0x2c0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d104      	bne.n	8001334 <main+0x21c>
				  tMenu->topButtonPressed = 1;
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <main+0x2d8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e008      	b.n	8001346 <main+0x22e>
			  }
			  else{
				  EN_Measure(state, tempSense, screen);
 8001334:	4b28      	ldr	r3, [pc, #160]	; (80013d8 <main+0x2c0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a28      	ldr	r2, [pc, #160]	; (80013dc <main+0x2c4>)
 800133a:	6811      	ldr	r1, [r2, #0]
 800133c:	4a28      	ldr	r2, [pc, #160]	; (80013e0 <main+0x2c8>)
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fcc9 	bl	8002cd8 <EN_Measure>
			  }
			  state->activeBtn = 0;
 8001346:	4b24      	ldr	r3, [pc, #144]	; (80013d8 <main+0x2c0>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2200      	movs	r2, #0
 800134c:	815a      	strh	r2, [r3, #10]
			  break;
 800134e:	e0ac      	b.n	80014aa <main+0x392>

		  case S5_Pin:

			  if(state->mode == SMODE_DATETIME){
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <main+0x2c0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b03      	cmp	r3, #3
 8001358:	d104      	bne.n	8001364 <main+0x24c>
				  tMenu->bottomButtonPressed = 1;
 800135a:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <main+0x2d8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2201      	movs	r2, #1
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	e009      	b.n	8001378 <main+0x260>
			  }
			  else{
			  SP_Measure(state, powerMeasure, calibVals, screen);
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <main+0x2c0>)
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <main+0x2cc>)
 800136a:	6819      	ldr	r1, [r3, #0]
 800136c:	4b1f      	ldr	r3, [pc, #124]	; (80013ec <main+0x2d4>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <main+0x2c8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f001 fd36 	bl	8002de4 <SP_Measure>
//			  screen->updateScreen = 0;

			  }
			  state->activeBtn = 0;
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <main+0x2c0>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2200      	movs	r2, #0
 800137e:	815a      	strh	r2, [r3, #10]
			  break;
 8001380:	e093      	b.n	80014aa <main+0x392>

		  case S2_Pin:

			  state->leftPress ++;
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <main+0x2c0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001388:	3201      	adds	r2, #1
 800138a:	675a      	str	r2, [r3, #116]	; 0x74

			  switch(state->leftPress){
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <main+0x2c0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001392:	2b03      	cmp	r3, #3
 8001394:	d002      	beq.n	800139c <main+0x284>
 8001396:	2b04      	cmp	r3, #4
 8001398:	d010      	beq.n	80013bc <main+0x2a4>
 800139a:	e047      	b.n	800142c <main+0x314>
			  case 3:
				  screen->screenRotate = 1;
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <main+0x2c8>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
				  screen->rortateTick = HAL_GetTick();
 80013a4:	f002 ffc6 	bl	8004334 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <main+0x2c8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	611a      	str	r2, [r3, #16]
				  switchScreen(screen);
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <main+0x2c8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f002 fb6a 	bl	8003a8e <switchScreen>
				  break;
 80013ba:	e03d      	b.n	8001438 <main+0x320>

			  case 4:
				  state->leftPress = 1;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <main+0x2c0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2201      	movs	r2, #1
 80013c2:	675a      	str	r2, [r3, #116]	; 0x74
				  screen->screenRotate = 0;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <main+0x2c8>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
				  switchScreen(screen);
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <main+0x2c8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fb5c 	bl	8003a8e <switchScreen>
				  break;
 80013d6:	e02f      	b.n	8001438 <main+0x320>
 80013d8:	20000320 	.word	0x20000320
 80013dc:	20000324 	.word	0x20000324
 80013e0:	20000328 	.word	0x20000328
 80013e4:	2000032c 	.word	0x2000032c
 80013e8:	20000330 	.word	0x20000330
 80013ec:	20000334 	.word	0x20000334
 80013f0:	20000338 	.word	0x20000338
 80013f4:	200002e4 	.word	0x200002e4
 80013f8:	200002f0 	.word	0x200002f0
 80013fc:	200002fc 	.word	0x200002fc
 8001400:	20000308 	.word	0x20000308
 8001404:	20000314 	.word	0x20000314
 8001408:	0800ab28 	.word	0x0800ab28
 800140c:	0800ab38 	.word	0x0800ab38
 8001410:	40020400 	.word	0x40020400
 8001414:	40020800 	.word	0x40020800
 8001418:	20000004 	.word	0x20000004
 800141c:	200002a0 	.word	0x200002a0
 8001420:	20000148 	.word	0x20000148
 8001424:	200001b0 	.word	0x200001b0
 8001428:	200001f8 	.word	0x200001f8

			  default:
				  switchScreen(screen);
 800142c:	4b96      	ldr	r3, [pc, #600]	; (8001688 <main+0x570>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f002 fb2c 	bl	8003a8e <switchScreen>
				  break;
 8001436:	bf00      	nop
			  }

			  state->activeBtn = 0;
 8001438:	4b94      	ldr	r3, [pc, #592]	; (800168c <main+0x574>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2200      	movs	r2, #0
 800143e:	815a      	strh	r2, [r3, #10]
			  break;
 8001440:	e033      	b.n	80014aa <main+0x392>

		  case S3_Pin:

			  if(state->mode == SMODE_DATETIME){
 8001442:	4b92      	ldr	r3, [pc, #584]	; (800168c <main+0x574>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b03      	cmp	r3, #3
 800144a:	d105      	bne.n	8001458 <main+0x340>
				  tMenu->itemIndex ++;
 800144c:	4b90      	ldr	r3, [pc, #576]	; (8001690 <main+0x578>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	3201      	adds	r2, #1
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	e010      	b.n	800147a <main+0x362>
			  }
			  else{
				  displayMode3(&lcd, screen);
 8001458:	4b8b      	ldr	r3, [pc, #556]	; (8001688 <main+0x570>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001460:	4611      	mov	r1, r2
 8001462:	4618      	mov	r0, r3
 8001464:	f002 faee 	bl	8003a44 <displayMode3>
				  state->mode = SMODE_DATETIME;
 8001468:	4b88      	ldr	r3, [pc, #544]	; (800168c <main+0x574>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2203      	movs	r2, #3
 800146e:	601a      	str	r2, [r3, #0]
				  tMenu->itemIndex ++;
 8001470:	4b87      	ldr	r3, [pc, #540]	; (8001690 <main+0x578>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	3201      	adds	r2, #1
 8001478:	609a      	str	r2, [r3, #8]
			  }

			  state->activeBtn = 0;
 800147a:	4b84      	ldr	r3, [pc, #528]	; (800168c <main+0x574>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2200      	movs	r2, #0
 8001480:	815a      	strh	r2, [r3, #10]
			  break;
 8001482:	e012      	b.n	80014aa <main+0x392>

		  case S4_Pin:
			  state->mode = SMODE_CALB;
 8001484:	4b81      	ldr	r3, [pc, #516]	; (800168c <main+0x574>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2203      	movs	r2, #3
 800148a:	601a      	str	r2, [r3, #0]
			  state->modeState = MEASURE;
 800148c:	4b7f      	ldr	r3, [pc, #508]	; (800168c <main+0x574>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2201      	movs	r2, #1
 8001492:	605a      	str	r2, [r3, #4]
			  state->activeBtn = 0;
 8001494:	4b7d      	ldr	r3, [pc, #500]	; (800168c <main+0x574>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2200      	movs	r2, #0
 800149a:	815a      	strh	r2, [r3, #10]
			  break;
 800149c:	e005      	b.n	80014aa <main+0x392>

		  default:
			  state->activeBtn = 0;
 800149e:	4b7b      	ldr	r3, [pc, #492]	; (800168c <main+0x574>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2200      	movs	r2, #0
 80014a4:	815a      	strh	r2, [r3, #10]
			  break;
 80014a6:	e000      	b.n	80014aa <main+0x392>
		  }

	  }

	  else{
		  __NOP();
 80014a8:	bf00      	nop
	  }

//	  Checking for command
	  if (state->commandReady){
 80014aa:	4b78      	ldr	r3, [pc, #480]	; (800168c <main+0x574>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d04f      	beq.n	8001554 <main+0x43c>
		  int isCommandVal = isCommandValid(state);
 80014b4:	4b75      	ldr	r3, [pc, #468]	; (800168c <main+0x574>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 fb14 	bl	8003ae6 <isCommandValid>
 80014be:	6678      	str	r0, [r7, #100]	; 0x64

#if 1
		  switch(isCommandVal){
 80014c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d13a      	bne.n	800153c <main+0x424>

		  case 1:
			  uart_command_set(state);
 80014c6:	4b71      	ldr	r3, [pc, #452]	; (800168c <main+0x574>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f001 feee 	bl	80032ac <uart_command_set>
			  switch(state->cmdCall){
 80014d0:	4b6e      	ldr	r3, [pc, #440]	; (800168c <main+0x574>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	d01b      	beq.n	8001512 <main+0x3fa>
 80014da:	2b03      	cmp	r3, #3
 80014dc:	dc22      	bgt.n	8001524 <main+0x40c>
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d002      	beq.n	80014e8 <main+0x3d0>
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d00a      	beq.n	80014fc <main+0x3e4>
 80014e6:	e01d      	b.n	8001524 <main+0x40c>

			  case SMODE_EN:
				  EN_Measure(state,tempSense, screen);
 80014e8:	4b68      	ldr	r3, [pc, #416]	; (800168c <main+0x574>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a69      	ldr	r2, [pc, #420]	; (8001694 <main+0x57c>)
 80014ee:	6811      	ldr	r1, [r2, #0]
 80014f0:	4a65      	ldr	r2, [pc, #404]	; (8001688 <main+0x570>)
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f001 fbef 	bl	8002cd8 <EN_Measure>
//				  screen->updateScreen = 1;
//				  screen->currentDisplay = 2;
				  break;
 80014fa:	e01f      	b.n	800153c <main+0x424>

			  case SMODE_SP:
				  SP_Measure(state, powerMeasure, calibVals,screen);
 80014fc:	4b63      	ldr	r3, [pc, #396]	; (800168c <main+0x574>)
 80014fe:	6818      	ldr	r0, [r3, #0]
 8001500:	4b65      	ldr	r3, [pc, #404]	; (8001698 <main+0x580>)
 8001502:	6819      	ldr	r1, [r3, #0]
 8001504:	4b65      	ldr	r3, [pc, #404]	; (800169c <main+0x584>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b5f      	ldr	r3, [pc, #380]	; (8001688 <main+0x570>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f001 fc6a 	bl	8002de4 <SP_Measure>
//				  screen->updateScreen = 1;
//				  screen->currentDisplay = 1;
				  break;
 8001510:	e014      	b.n	800153c <main+0x424>

			  case SMODE_CALB:
				  state->mode = SMODE_CALB;
 8001512:	4b5e      	ldr	r3, [pc, #376]	; (800168c <main+0x574>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2203      	movs	r2, #3
 8001518:	601a      	str	r2, [r3, #0]
				  state->modeState = MEASURE;
 800151a:	4b5c      	ldr	r3, [pc, #368]	; (800168c <main+0x574>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2201      	movs	r2, #1
 8001520:	605a      	str	r2, [r3, #4]
				  break;
 8001522:	e00b      	b.n	800153c <main+0x424>

			  default:
				  state->commandReady = 0;
 8001524:	4b59      	ldr	r3, [pc, #356]	; (800168c <main+0x574>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
				  resetStr(state->commandMsg,sizeof(state->commandMsg));
 800152c:	4b57      	ldr	r3, [pc, #348]	; (800168c <main+0x574>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	331c      	adds	r3, #28
 8001532:	2119      	movs	r1, #25
 8001534:	4618      	mov	r0, r3
 8001536:	f002 fafe 	bl	8003b36 <resetStr>
				  break;
 800153a:	bf00      	nop
			  }

		  default:
			  state->commandReady = 0;
 800153c:	4b53      	ldr	r3, [pc, #332]	; (800168c <main+0x574>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
			  resetStr(state->commandMsg,sizeof(state->commandMsg));
 8001544:	4b51      	ldr	r3, [pc, #324]	; (800168c <main+0x574>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	331c      	adds	r3, #28
 800154a:	2119      	movs	r1, #25
 800154c:	4618      	mov	r0, r3
 800154e:	f002 faf2 	bl	8003b36 <resetStr>
			  break;
 8001552:	e000      	b.n	8001556 <main+0x43e>
		  }

	  }
#endif
	  }else{
		  __NOP();
 8001554:	bf00      	nop
	  }
//	----End of command check----

//	  Power Measurement

	  if(state->mode == SMODE_SP && state->modeState == MEASURE){
 8001556:	4b4d      	ldr	r3, [pc, #308]	; (800168c <main+0x574>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d161      	bne.n	8001624 <main+0x50c>
 8001560:	4b4a      	ldr	r3, [pc, #296]	; (800168c <main+0x574>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d15c      	bne.n	8001624 <main+0x50c>
		  if(powerMeasure->mppDutyCycle == 0){
 800156a:	4b4b      	ldr	r3, [pc, #300]	; (8001698 <main+0x580>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001572:	2b00      	cmp	r3, #0
 8001574:	d105      	bne.n	8001582 <main+0x46a>
			  powerMeasure->mppDutyCycle = 39;
 8001576:	4b48      	ldr	r3, [pc, #288]	; (8001698 <main+0x580>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2227      	movs	r2, #39	; 0x27
 800157c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001580:	e008      	b.n	8001594 <main+0x47c>
		  }

		  else{
			  powerMeasure->mppDutyCycle = powerMeasure->mppDutyCycle - 1;
 8001582:	4b45      	ldr	r3, [pc, #276]	; (8001698 <main+0x580>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800158a:	4b43      	ldr	r3, [pc, #268]	; (8001698 <main+0x580>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	3a01      	subs	r2, #1
 8001590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		  }

		  TIM2->CCR1 = powerMeasure->mppDutyCycle;
 8001594:	4b40      	ldr	r3, [pc, #256]	; (8001698 <main+0x580>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800159c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015a0:	6353      	str	r3, [r2, #52]	; 0x34

		  setAdcChannel(ADC_CHANNEL_10, &hadc1);
 80015a2:	493f      	ldr	r1, [pc, #252]	; (80016a0 <main+0x588>)
 80015a4:	200a      	movs	r0, #10
 80015a6:	f001 fb75 	bl	8002c94 <setAdcChannel>
		  HAL_ADC_Start(&hadc1);
 80015aa:	483d      	ldr	r0, [pc, #244]	; (80016a0 <main+0x588>)
 80015ac:	f002 ff36 	bl	800441c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b4:	483a      	ldr	r0, [pc, #232]	; (80016a0 <main+0x588>)
 80015b6:	f003 f818 	bl	80045ea <HAL_ADC_PollForConversion>
		  powerMeasure->voltageRaw = HAL_ADC_GetValue(&hadc1);
 80015ba:	4b37      	ldr	r3, [pc, #220]	; (8001698 <main+0x580>)
 80015bc:	681c      	ldr	r4, [r3, #0]
 80015be:	4838      	ldr	r0, [pc, #224]	; (80016a0 <main+0x588>)
 80015c0:	f003 f9ae 	bl	8004920 <HAL_ADC_GetValue>
 80015c4:	4603      	mov	r3, r0
 80015c6:	6523      	str	r3, [r4, #80]	; 0x50
		  HAL_ADC_Stop(&hadc1);
 80015c8:	4835      	ldr	r0, [pc, #212]	; (80016a0 <main+0x588>)
 80015ca:	f002 ffdb 	bl	8004584 <HAL_ADC_Stop>

		  setAdcChannel(ADC_CHANNEL_4, &hadc1);
 80015ce:	4934      	ldr	r1, [pc, #208]	; (80016a0 <main+0x588>)
 80015d0:	2004      	movs	r0, #4
 80015d2:	f001 fb5f 	bl	8002c94 <setAdcChannel>
		  HAL_ADC_Start(&hadc1);
 80015d6:	4832      	ldr	r0, [pc, #200]	; (80016a0 <main+0x588>)
 80015d8:	f002 ff20 	bl	800441c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80015dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015e0:	482f      	ldr	r0, [pc, #188]	; (80016a0 <main+0x588>)
 80015e2:	f003 f802 	bl	80045ea <HAL_ADC_PollForConversion>
		  powerMeasure->currentVoltageRaw = HAL_ADC_GetValue(&hadc1);
 80015e6:	4b2c      	ldr	r3, [pc, #176]	; (8001698 <main+0x580>)
 80015e8:	681c      	ldr	r4, [r3, #0]
 80015ea:	482d      	ldr	r0, [pc, #180]	; (80016a0 <main+0x588>)
 80015ec:	f003 f998 	bl	8004920 <HAL_ADC_GetValue>
 80015f0:	4603      	mov	r3, r0
 80015f2:	6563      	str	r3, [r4, #84]	; 0x54
		  HAL_ADC_Stop(&hadc1);
 80015f4:	482a      	ldr	r0, [pc, #168]	; (80016a0 <main+0x588>)
 80015f6:	f002 ffc5 	bl	8004584 <HAL_ADC_Stop>

		  toPVMeasures(powerMeasure, tempSense);
 80015fa:	4b27      	ldr	r3, [pc, #156]	; (8001698 <main+0x580>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a25      	ldr	r2, [pc, #148]	; (8001694 <main+0x57c>)
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f001 fff7 	bl	80035f8 <toPVMeasures>
		  screen->updateScreen = 1;
 800160a:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <main+0x570>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2201      	movs	r2, #1
 8001610:	605a      	str	r2, [r3, #4]
		  setDisplayMode1(screen, powerMeasure);
 8001612:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <main+0x570>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a20      	ldr	r2, [pc, #128]	; (8001698 <main+0x580>)
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f002 f91d 	bl	800385c <setDisplayMode1>
 8001622:	e000      	b.n	8001626 <main+0x50e>

	  }
	  else{
		  __NOP();
 8001624:	bf00      	nop

//	  End of power measurement

//	  Start of Calibration measure

	  if(state->mode == SMODE_CALB && state->modeState == MEASURE){
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <main+0x574>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d117      	bne.n	8001660 <main+0x548>
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <main+0x574>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d112      	bne.n	8001660 <main+0x548>
		  CA_Measure(calibVals, state, powerMeasure, tempSense, screen, &hadc1, &huart2);
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <main+0x584>)
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <main+0x574>)
 8001640:	6819      	ldr	r1, [r3, #0]
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <main+0x580>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4b13      	ldr	r3, [pc, #76]	; (8001694 <main+0x57c>)
 8001648:	681c      	ldr	r4, [r3, #0]
 800164a:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <main+0x570>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4d15      	ldr	r5, [pc, #84]	; (80016a4 <main+0x58c>)
 8001650:	9502      	str	r5, [sp, #8]
 8001652:	4d13      	ldr	r5, [pc, #76]	; (80016a0 <main+0x588>)
 8001654:	9501      	str	r5, [sp, #4]
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	4623      	mov	r3, r4
 800165a:	f001 fcc1 	bl	8002fe0 <CA_Measure>
 800165e:	e000      	b.n	8001662 <main+0x54a>
	  }
	  else{
		  __NOP();
 8001660:	bf00      	nop

//	  End of Calibration measure


//	  Check for response
	  if (state->responseReady){
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <main+0x574>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	2b00      	cmp	r3, #0
 800166a:	d01d      	beq.n	80016a8 <main+0x590>
		  HAL_UART_Transmit_IT(&huart2,(uint8_t*) state->response, state->responseSize);
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <main+0x574>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <main+0x574>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167a:	b29b      	uxth	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	4809      	ldr	r0, [pc, #36]	; (80016a4 <main+0x58c>)
 8001680:	f006 fe65 	bl	800834e <HAL_UART_Transmit_IT>
 8001684:	e011      	b.n	80016aa <main+0x592>
 8001686:	bf00      	nop
 8001688:	20000328 	.word	0x20000328
 800168c:	20000320 	.word	0x20000320
 8001690:	20000338 	.word	0x20000338
 8001694:	20000324 	.word	0x20000324
 8001698:	2000032c 	.word	0x2000032c
 800169c:	20000334 	.word	0x20000334
 80016a0:	200000a0 	.word	0x200000a0
 80016a4:	200002a0 	.word	0x200002a0
	  }

	  else{
		  __NOP();
 80016a8:	bf00      	nop
	  }

//	  ----End of response check

//	  LED state
	  if (state->ledFlash == 1){
 80016aa:	4b5f      	ldr	r3, [pc, #380]	; (8001828 <main+0x710>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d12b      	bne.n	800170c <main+0x5f4>
	  	if(timeCaptured){
 80016b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d021      	beq.n	80016fe <main+0x5e6>
	  		if((HAL_GetTick() - timeCapture) >= state->tickLedMax){
 80016ba:	f002 fe3b 	bl	8004334 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <main+0x710>)
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	6952      	ldr	r2, [r2, #20]
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d30f      	bcc.n	80016ee <main+0x5d6>
	  			  	  HAL_GPIO_TogglePin(GPIOB, state->targetLed);
 80016ce:	4b56      	ldr	r3, [pc, #344]	; (8001828 <main+0x710>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	891b      	ldrh	r3, [r3, #8]
 80016d4:	4619      	mov	r1, r3
 80016d6:	4855      	ldr	r0, [pc, #340]	; (800182c <main+0x714>)
 80016d8:	f004 f9b1 	bl	8005a3e <HAL_GPIO_TogglePin>
	  			  	  timeCapture = HAL_GetTick();
 80016dc:	f002 fe2a 	bl	8004334 <HAL_GetTick>
 80016e0:	4603      	mov	r3, r0
 80016e2:	66fb      	str	r3, [r7, #108]	; 0x6c
	  			  	  state->ticks = 0;
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <main+0x710>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
 80016ec:	e018      	b.n	8001720 <main+0x608>
	  		}
	  		else{
	  			  	  state->ticks = state->ticks + 1;
 80016ee:	4b4e      	ldr	r3, [pc, #312]	; (8001828 <main+0x710>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	4b4c      	ldr	r3, [pc, #304]	; (8001828 <main+0x710>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	3201      	adds	r2, #1
 80016fa:	611a      	str	r2, [r3, #16]
 80016fc:	e010      	b.n	8001720 <main+0x608>
	  		}
	  	}

	  	else{
	  		timeCapture = HAL_GetTick();
 80016fe:	f002 fe19 	bl	8004334 <HAL_GetTick>
 8001702:	4603      	mov	r3, r0
 8001704:	66fb      	str	r3, [r7, #108]	; 0x6c
	  		timeCaptured = 1;
 8001706:	2301      	movs	r3, #1
 8001708:	66bb      	str	r3, [r7, #104]	; 0x68
 800170a:	e009      	b.n	8001720 <main+0x608>
	  	}

	  }

	  else{
		  HAL_GPIO_WritePin(GPIOB, state->targetLed, GPIO_PIN_SET);
 800170c:	4b46      	ldr	r3, [pc, #280]	; (8001828 <main+0x710>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	891b      	ldrh	r3, [r3, #8]
 8001712:	2201      	movs	r2, #1
 8001714:	4619      	mov	r1, r3
 8001716:	4845      	ldr	r0, [pc, #276]	; (800182c <main+0x714>)
 8001718:	f004 f978 	bl	8005a0c <HAL_GPIO_WritePin>
	  	  timeCaptured = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	66bb      	str	r3, [r7, #104]	; 0x68
	  	}
//	  ----End of LED status----

//	  ----Begin temp sensor----
	  if(tempSense->digitalBegin){
 8001720:	4b43      	ldr	r3, [pc, #268]	; (8001830 <main+0x718>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 80f9 	beq.w	800191e <main+0x806>
		  if( (HAL_GetTick()-tempSense->startTime) >= 55){
 800172c:	f002 fe02 	bl	8004334 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <main+0x718>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b36      	cmp	r3, #54	; 0x36
 800173c:	f240 80ef 	bls.w	800191e <main+0x806>
			  if(tempSense->sampleIndex < 10){
 8001740:	4b3b      	ldr	r3, [pc, #236]	; (8001830 <main+0x718>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001748:	2b09      	cmp	r3, #9
 800174a:	dc75      	bgt.n	8001838 <main+0x720>
				  setAdcChannel(ADC_CHANNEL_11, &hadc1);
 800174c:	4939      	ldr	r1, [pc, #228]	; (8001834 <main+0x71c>)
 800174e:	200b      	movs	r0, #11
 8001750:	f001 faa0 	bl	8002c94 <setAdcChannel>
				  HAL_ADC_Start(&hadc1);
 8001754:	4837      	ldr	r0, [pc, #220]	; (8001834 <main+0x71c>)
 8001756:	f002 fe61 	bl	800441c <HAL_ADC_Start>
				  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800175a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800175e:	4835      	ldr	r0, [pc, #212]	; (8001834 <main+0x71c>)
 8001760:	f002 ff43 	bl	80045ea <HAL_ADC_PollForConversion>
				  tempSense->taRaw = HAL_ADC_GetValue(&hadc1);
 8001764:	4b32      	ldr	r3, [pc, #200]	; (8001830 <main+0x718>)
 8001766:	681c      	ldr	r4, [r3, #0]
 8001768:	4832      	ldr	r0, [pc, #200]	; (8001834 <main+0x71c>)
 800176a:	f003 f8d9 	bl	8004920 <HAL_ADC_GetValue>
 800176e:	4603      	mov	r3, r0
 8001770:	60e3      	str	r3, [r4, #12]
				  HAL_ADC_Stop(&hadc1);
 8001772:	4830      	ldr	r0, [pc, #192]	; (8001834 <main+0x71c>)
 8001774:	f002 ff06 	bl	8004584 <HAL_ADC_Stop>

//				  Getting lux value
				  setAdcChannel(ADC_CHANNEL_15, &hadc1);
 8001778:	492e      	ldr	r1, [pc, #184]	; (8001834 <main+0x71c>)
 800177a:	200f      	movs	r0, #15
 800177c:	f001 fa8a 	bl	8002c94 <setAdcChannel>
				  HAL_ADC_Start(&hadc1);
 8001780:	482c      	ldr	r0, [pc, #176]	; (8001834 <main+0x71c>)
 8001782:	f002 fe4b 	bl	800441c <HAL_ADC_Start>
				  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001786:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800178a:	482a      	ldr	r0, [pc, #168]	; (8001834 <main+0x71c>)
 800178c:	f002 ff2d 	bl	80045ea <HAL_ADC_PollForConversion>
				  tempSense->luxRaw = HAL_ADC_GetValue(&hadc1);
 8001790:	4b27      	ldr	r3, [pc, #156]	; (8001830 <main+0x718>)
 8001792:	681c      	ldr	r4, [r3, #0]
 8001794:	4827      	ldr	r0, [pc, #156]	; (8001834 <main+0x71c>)
 8001796:	f003 f8c3 	bl	8004920 <HAL_ADC_GetValue>
 800179a:	4603      	mov	r3, r0
 800179c:	6123      	str	r3, [r4, #16]
				  HAL_ADC_Stop(&hadc1);
 800179e:	4825      	ldr	r0, [pc, #148]	; (8001834 <main+0x71c>)
 80017a0:	f002 fef0 	bl	8004584 <HAL_ADC_Stop>


//				  Load sample
				  tempSense->digitalSamples[tempSense->sampleIndex] = tempSense->tspRaw;
 80017a4:	4b22      	ldr	r3, [pc, #136]	; (8001830 <main+0x718>)
 80017a6:	6819      	ldr	r1, [r3, #0]
 80017a8:	4b21      	ldr	r3, [pc, #132]	; (8001830 <main+0x718>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a20      	ldr	r2, [pc, #128]	; (8001830 <main+0x718>)
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 80017b4:	6889      	ldr	r1, [r1, #8]
 80017b6:	3206      	adds	r2, #6
 80017b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  tempSense->analogSamples[tempSense->sampleIndex] = tempSense->taRaw;
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <main+0x718>)
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <main+0x718>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a1a      	ldr	r2, [pc, #104]	; (8001830 <main+0x718>)
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 80017cc:	68c9      	ldr	r1, [r1, #12]
 80017ce:	3210      	adds	r2, #16
 80017d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  tempSense->luxSamples[tempSense->sampleIndex] = tempSense->luxRaw;
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <main+0x718>)
 80017d6:	6819      	ldr	r1, [r3, #0]
 80017d8:	4b15      	ldr	r3, [pc, #84]	; (8001830 <main+0x718>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <main+0x718>)
 80017de:	6812      	ldr	r2, [r2, #0]
 80017e0:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 80017e4:	6909      	ldr	r1, [r1, #16]
 80017e6:	321a      	adds	r2, #26
 80017e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

//				  Reset
				  tempSense->sampleIndex = tempSense->sampleIndex + 1;
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <main+0x718>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <main+0x718>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3201      	adds	r2, #1
 80017fa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
				  tempSense->tspRaw = 0;
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <main+0x718>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
				  tempSense->taRaw = 0;
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <main+0x718>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
				  tempSense->luxRaw = 0;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <main+0x718>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	611a      	str	r2, [r3, #16]
				  tempSense->digitalBegin = 0;
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <main+0x718>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
				  tempSense->startTime = 0;
 800181e:	4b04      	ldr	r3, [pc, #16]	; (8001830 <main+0x718>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2200      	movs	r2, #0
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	e07a      	b.n	800191e <main+0x806>
 8001828:	20000320 	.word	0x20000320
 800182c:	40020400 	.word	0x40020400
 8001830:	20000324 	.word	0x20000324
 8001834:	200000a0 	.word	0x200000a0
			  }
			  else{
				  tempSense->sampleIndex = 0;
 8001838:	4ba1      	ldr	r3, [pc, #644]	; (8001ac0 <main+0x9a8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2200      	movs	r2, #0
 800183e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
				  setAdcChannel(ADC_CHANNEL_11, &hadc1);
 8001842:	49a0      	ldr	r1, [pc, #640]	; (8001ac4 <main+0x9ac>)
 8001844:	200b      	movs	r0, #11
 8001846:	f001 fa25 	bl	8002c94 <setAdcChannel>
				  HAL_ADC_Start(&hadc1);
 800184a:	489e      	ldr	r0, [pc, #632]	; (8001ac4 <main+0x9ac>)
 800184c:	f002 fde6 	bl	800441c <HAL_ADC_Start>
				  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001850:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001854:	489b      	ldr	r0, [pc, #620]	; (8001ac4 <main+0x9ac>)
 8001856:	f002 fec8 	bl	80045ea <HAL_ADC_PollForConversion>
				  tempSense->taRaw = HAL_ADC_GetValue(&hadc1);
 800185a:	4b99      	ldr	r3, [pc, #612]	; (8001ac0 <main+0x9a8>)
 800185c:	681c      	ldr	r4, [r3, #0]
 800185e:	4899      	ldr	r0, [pc, #612]	; (8001ac4 <main+0x9ac>)
 8001860:	f003 f85e 	bl	8004920 <HAL_ADC_GetValue>
 8001864:	4603      	mov	r3, r0
 8001866:	60e3      	str	r3, [r4, #12]
				  HAL_ADC_Stop(&hadc1);
 8001868:	4896      	ldr	r0, [pc, #600]	; (8001ac4 <main+0x9ac>)
 800186a:	f002 fe8b 	bl	8004584 <HAL_ADC_Stop>

				  setAdcChannel(ADC_CHANNEL_15, &hadc1);
 800186e:	4995      	ldr	r1, [pc, #596]	; (8001ac4 <main+0x9ac>)
 8001870:	200f      	movs	r0, #15
 8001872:	f001 fa0f 	bl	8002c94 <setAdcChannel>
				  HAL_ADC_Start(&hadc1);
 8001876:	4893      	ldr	r0, [pc, #588]	; (8001ac4 <main+0x9ac>)
 8001878:	f002 fdd0 	bl	800441c <HAL_ADC_Start>
				  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800187c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001880:	4890      	ldr	r0, [pc, #576]	; (8001ac4 <main+0x9ac>)
 8001882:	f002 feb2 	bl	80045ea <HAL_ADC_PollForConversion>
				  tempSense->luxRaw = HAL_ADC_GetValue(&hadc1);
 8001886:	4b8e      	ldr	r3, [pc, #568]	; (8001ac0 <main+0x9a8>)
 8001888:	681c      	ldr	r4, [r3, #0]
 800188a:	488e      	ldr	r0, [pc, #568]	; (8001ac4 <main+0x9ac>)
 800188c:	f003 f848 	bl	8004920 <HAL_ADC_GetValue>
 8001890:	4603      	mov	r3, r0
 8001892:	6123      	str	r3, [r4, #16]
				  HAL_ADC_Stop(&hadc1);
 8001894:	488b      	ldr	r0, [pc, #556]	; (8001ac4 <main+0x9ac>)
 8001896:	f002 fe75 	bl	8004584 <HAL_ADC_Stop>
#if 0 //This is for debugging purposes.
				  taToTemp(tempSense);
				  tspToTemp(tempSense);
#endif
				  //Load sample
				  tempSense->digitalSamples[tempSense->sampleIndex] = tempSense->tspRaw;
 800189a:	4b89      	ldr	r3, [pc, #548]	; (8001ac0 <main+0x9a8>)
 800189c:	6819      	ldr	r1, [r3, #0]
 800189e:	4b88      	ldr	r3, [pc, #544]	; (8001ac0 <main+0x9a8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a87      	ldr	r2, [pc, #540]	; (8001ac0 <main+0x9a8>)
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 80018aa:	6889      	ldr	r1, [r1, #8]
 80018ac:	3206      	adds	r2, #6
 80018ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  tempSense->analogSamples[tempSense->sampleIndex] = tempSense->taRaw;
 80018b2:	4b83      	ldr	r3, [pc, #524]	; (8001ac0 <main+0x9a8>)
 80018b4:	6819      	ldr	r1, [r3, #0]
 80018b6:	4b82      	ldr	r3, [pc, #520]	; (8001ac0 <main+0x9a8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a81      	ldr	r2, [pc, #516]	; (8001ac0 <main+0x9a8>)
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 80018c2:	68c9      	ldr	r1, [r1, #12]
 80018c4:	3210      	adds	r2, #16
 80018c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  setAdcChannel(ADC_CHANNEL_11, &hadc1);
 80018ca:	497e      	ldr	r1, [pc, #504]	; (8001ac4 <main+0x9ac>)
 80018cc:	200b      	movs	r0, #11
 80018ce:	f001 f9e1 	bl	8002c94 <setAdcChannel>
				  HAL_ADC_Start(&hadc1);
 80018d2:	487c      	ldr	r0, [pc, #496]	; (8001ac4 <main+0x9ac>)
 80018d4:	f002 fda2 	bl	800441c <HAL_ADC_Start>
				  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018dc:	4879      	ldr	r0, [pc, #484]	; (8001ac4 <main+0x9ac>)
 80018de:	f002 fe84 	bl	80045ea <HAL_ADC_PollForConversion>
				  tempSense->taRaw = HAL_ADC_GetValue(&hadc1);
 80018e2:	4b77      	ldr	r3, [pc, #476]	; (8001ac0 <main+0x9a8>)
 80018e4:	681c      	ldr	r4, [r3, #0]
 80018e6:	4877      	ldr	r0, [pc, #476]	; (8001ac4 <main+0x9ac>)
 80018e8:	f003 f81a 	bl	8004920 <HAL_ADC_GetValue>
 80018ec:	4603      	mov	r3, r0
 80018ee:	60e3      	str	r3, [r4, #12]
				  HAL_ADC_Stop(&hadc1);
 80018f0:	4874      	ldr	r0, [pc, #464]	; (8001ac4 <main+0x9ac>)
 80018f2:	f002 fe47 	bl	8004584 <HAL_ADC_Stop>

				  tempSense->tspRaw = 0;
 80018f6:	4b72      	ldr	r3, [pc, #456]	; (8001ac0 <main+0x9a8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
				  tempSense->taRaw = 0;
 80018fe:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <main+0x9a8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
				  tempSense->luxRaw = 0;
 8001906:	4b6e      	ldr	r3, [pc, #440]	; (8001ac0 <main+0x9a8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
				  tempSense->digitalBegin = 0;
 800190e:	4b6c      	ldr	r3, [pc, #432]	; (8001ac0 <main+0x9a8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
				  tempSense->startTime = 0;
 8001916:	4b6a      	ldr	r3, [pc, #424]	; (8001ac0 <main+0x9a8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2200      	movs	r2, #0
 800191c:	605a      	str	r2, [r3, #4]
	  }
//	  ----End of temp sensor----

//	  ----Start of screen----

	  if(screen->screenRotate == 1){
 800191e:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <main+0x9b0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d117      	bne.n	8001958 <main+0x840>
		  if((HAL_GetTick()-screen->rortateTick) >= 2000){
 8001928:	f002 fd04 	bl	8004334 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	4b66      	ldr	r3, [pc, #408]	; (8001ac8 <main+0x9b0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800193a:	d30b      	bcc.n	8001954 <main+0x83c>
		  		  switchScreen(screen);
 800193c:	4b62      	ldr	r3, [pc, #392]	; (8001ac8 <main+0x9b0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f002 f8a4 	bl	8003a8e <switchScreen>
		  		  screen->rortateTick = HAL_GetTick();
 8001946:	f002 fcf5 	bl	8004334 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	4b5e      	ldr	r3, [pc, #376]	; (8001ac8 <main+0x9b0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	611a      	str	r2, [r3, #16]
 8001952:	e002      	b.n	800195a <main+0x842>
		  }
		  else{
			  __NOP();
 8001954:	bf00      	nop
 8001956:	e000      	b.n	800195a <main+0x842>
		  }
	  }

	  else{
		  __NOP();
 8001958:	bf00      	nop
	  }


	  if(screen->updateScreen == 1 && screen->screenClear == 0){
 800195a:	4b5b      	ldr	r3, [pc, #364]	; (8001ac8 <main+0x9b0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d13a      	bne.n	80019da <main+0x8c2>
 8001964:	4b58      	ldr	r3, [pc, #352]	; (8001ac8 <main+0x9b0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d135      	bne.n	80019da <main+0x8c2>

		switch(screen->currentDisplay){
 800196e:	4b56      	ldr	r3, [pc, #344]	; (8001ac8 <main+0x9b0>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b03      	cmp	r3, #3
 8001976:	d020      	beq.n	80019ba <main+0x8a2>
 8001978:	2b03      	cmp	r3, #3
 800197a:	dc2b      	bgt.n	80019d4 <main+0x8bc>
 800197c:	2b01      	cmp	r3, #1
 800197e:	d002      	beq.n	8001986 <main+0x86e>
 8001980:	2b02      	cmp	r3, #2
 8001982:	d00d      	beq.n	80019a0 <main+0x888>
 8001984:	e026      	b.n	80019d4 <main+0x8bc>
			case 1:
				displayMode1(&lcd, screen);
 8001986:	4b50      	ldr	r3, [pc, #320]	; (8001ac8 <main+0x9b0>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f002 f80d 	bl	80039b0 <displayMode1>
				screen->updateScreen = 0;
 8001996:	4b4c      	ldr	r3, [pc, #304]	; (8001ac8 <main+0x9b0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2200      	movs	r2, #0
 800199c:	605a      	str	r2, [r3, #4]
				break;
 800199e:	e01b      	b.n	80019d8 <main+0x8c0>

			case 2:
				displayMode2(&lcd, screen);
 80019a0:	4b49      	ldr	r3, [pc, #292]	; (8001ac8 <main+0x9b0>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019a8:	4611      	mov	r1, r2
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 f825 	bl	80039fa <displayMode2>
				screen->updateScreen = 0;
 80019b0:	4b45      	ldr	r3, [pc, #276]	; (8001ac8 <main+0x9b0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2200      	movs	r2, #0
 80019b6:	605a      	str	r2, [r3, #4]
				break;
 80019b8:	e00e      	b.n	80019d8 <main+0x8c0>

			case 3:
				displayMode3(&lcd, screen);
 80019ba:	4b43      	ldr	r3, [pc, #268]	; (8001ac8 <main+0x9b0>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 f83d 	bl	8003a44 <displayMode3>
				screen->updateScreen = 0;
 80019ca:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <main+0x9b0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	605a      	str	r2, [r3, #4]
				break;
 80019d2:	e001      	b.n	80019d8 <main+0x8c0>

			default:
				__NOP();
 80019d4:	bf00      	nop
				break;
 80019d6:	bf00      	nop
		switch(screen->currentDisplay){
 80019d8:	e00f      	b.n	80019fa <main+0x8e2>
#endif


	  }

	  else if(screen->screenClear == 1){
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <main+0x9b0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d109      	bne.n	80019f8 <main+0x8e0>
		  Lcd_clear(&lcd);
 80019e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff faed 	bl	8000fc8 <Lcd_clear>
		  screen->screenClear = 0;
 80019ee:	4b36      	ldr	r3, [pc, #216]	; (8001ac8 <main+0x9b0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	e000      	b.n	80019fa <main+0x8e2>
	  }

	  else{
		  __NOP();
 80019f8:	bf00      	nop


//	  ----Start of screen----

//	  ----Start of Date Time----
	  if(state->mode == SMODE_DATETIME){
 80019fa:	4b34      	ldr	r3, [pc, #208]	; (8001acc <main+0x9b4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	f040 8187 	bne.w	8001d14 <main+0xbfc>

		  RTC_DateTypeDef sDate = sDateTime->Date;
 8001a06:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <main+0x9b8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	633b      	str	r3, [r7, #48]	; 0x30
		  RTC_TimeTypeDef sTime = sDateTime->Time;
 8001a0e:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <main+0x9b8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f107 041c 	add.w	r4, r7, #28
 8001a16:	461d      	mov	r5, r3
 8001a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a1c:	682b      	ldr	r3, [r5, #0]
 8001a1e:	6023      	str	r3, [r4, #0]

		  switch(tMenu->itemIndex){
 8001a20:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <main+0x9bc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	2b06      	cmp	r3, #6
 8001a2a:	f200 811d 	bhi.w	8001c68 <main+0xb50>
 8001a2e:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <main+0x91c>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a51 	.word	0x08001a51
 8001a38:	08001aa1 	.word	0x08001aa1
 8001a3c:	08001b0d 	.word	0x08001b0d
 8001a40:	08001b49 	.word	0x08001b49
 8001a44:	08001ba3 	.word	0x08001ba3
 8001a48:	08001bfd 	.word	0x08001bfd
 8001a4c:	08001c57 	.word	0x08001c57

		  case DAY:

			  if(tMenu->topButtonPressed == 1){
 8001a50:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <main+0x9bc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d10a      	bne.n	8001a70 <main+0x958>
				  sDate.Date = sDate.Date + 1;
 8001a5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				  sDateTime->Date = sDate;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <main+0x9b8>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a6c:	615a      	str	r2, [r3, #20]
 8001a6e:	e00e      	b.n	8001a8e <main+0x976>

			  }

			  else if(tMenu->bottomButtonPressed == 1){
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <main+0x9bc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d109      	bne.n	8001a8e <main+0x976>
				  sDate.Date = sDate.Date - 1;
 8001a7a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				  sDateTime->Date = sDate;
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <main+0x9b8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a8c:	615a      	str	r2, [r3, #20]
			  }
			  HAL_RTC_SetDate(&hrtc, &sDateTime->Date, RTC_FORMAT_BIN);
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <main+0x9b8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	3314      	adds	r3, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	4619      	mov	r1, r3
 8001a98:	480f      	ldr	r0, [pc, #60]	; (8001ad8 <main+0x9c0>)
 8001a9a:	f004 fef9 	bl	8006890 <HAL_RTC_SetDate>
			  break;
 8001a9e:	e0e4      	b.n	8001c6a <main+0xb52>

		  case MONTH:

			  if(tMenu->topButtonPressed == 1){
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <main+0x9bc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d118      	bne.n	8001adc <main+0x9c4>
				  sDate.Month = sDate.Month + 1;
 8001aaa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				  sDateTime->Date = sDate;
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <main+0x9b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001abc:	615a      	str	r2, [r3, #20]
 8001abe:	e01c      	b.n	8001afa <main+0x9e2>
 8001ac0:	20000324 	.word	0x20000324
 8001ac4:	200000a0 	.word	0x200000a0
 8001ac8:	20000328 	.word	0x20000328
 8001acc:	20000320 	.word	0x20000320
 8001ad0:	20000330 	.word	0x20000330
 8001ad4:	20000338 	.word	0x20000338
 8001ad8:	20000148 	.word	0x20000148
			  }

			  else if(tMenu->bottomButtonPressed == 1){
 8001adc:	4b89      	ldr	r3, [pc, #548]	; (8001d04 <main+0xbec>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d109      	bne.n	8001afa <main+0x9e2>
				  sDate.Month = sDate.Month - 1;
 8001ae6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				  sDateTime->Date = sDate;
 8001af2:	4b85      	ldr	r3, [pc, #532]	; (8001d08 <main+0xbf0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001af8:	615a      	str	r2, [r3, #20]
			  }
			  HAL_RTC_SetDate(&hrtc, &sDateTime->Date, RTC_FORMAT_BIN);
 8001afa:	4b83      	ldr	r3, [pc, #524]	; (8001d08 <main+0xbf0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3314      	adds	r3, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	4619      	mov	r1, r3
 8001b04:	4881      	ldr	r0, [pc, #516]	; (8001d0c <main+0xbf4>)
 8001b06:	f004 fec3 	bl	8006890 <HAL_RTC_SetDate>
			  break;
 8001b0a:	e0ae      	b.n	8001c6a <main+0xb52>

		  case YEAR:

			  if(tMenu->topButtonPressed == 1){
 8001b0c:	4b7d      	ldr	r3, [pc, #500]	; (8001d04 <main+0xbec>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <main+0xa0a>
				  sDateTime->year ++;
 8001b16:	4b7c      	ldr	r3, [pc, #496]	; (8001d08 <main+0xbf0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699a      	ldr	r2, [r3, #24]
 8001b1c:	3201      	adds	r2, #1
 8001b1e:	619a      	str	r2, [r3, #24]
 8001b20:	e009      	b.n	8001b36 <main+0xa1e>
			  }

			  else if(tMenu->bottomButtonPressed == 1){
 8001b22:	4b78      	ldr	r3, [pc, #480]	; (8001d04 <main+0xbec>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d104      	bne.n	8001b36 <main+0xa1e>
				  sDateTime->year --;
 8001b2c:	4b76      	ldr	r3, [pc, #472]	; (8001d08 <main+0xbf0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	3a01      	subs	r2, #1
 8001b34:	619a      	str	r2, [r3, #24]
			  }
			  HAL_RTC_SetDate(&hrtc, &sDateTime->Date, RTC_FORMAT_BIN);
 8001b36:	4b74      	ldr	r3, [pc, #464]	; (8001d08 <main+0xbf0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3314      	adds	r3, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4872      	ldr	r0, [pc, #456]	; (8001d0c <main+0xbf4>)
 8001b42:	f004 fea5 	bl	8006890 <HAL_RTC_SetDate>
			  break;
 8001b46:	e090      	b.n	8001c6a <main+0xb52>

		  case HOUR:
			  if(tMenu->topButtonPressed == 1){
 8001b48:	4b6e      	ldr	r3, [pc, #440]	; (8001d04 <main+0xbec>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d10d      	bne.n	8001b6e <main+0xa56>
					  sTime.Hours ++;
 8001b52:	7f3b      	ldrb	r3, [r7, #28]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	773b      	strb	r3, [r7, #28]
					  sDateTime->Time = sTime;
 8001b5a:	4b6b      	ldr	r3, [pc, #428]	; (8001d08 <main+0xbf0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	461d      	mov	r5, r3
 8001b60:	f107 041c 	add.w	r4, r7, #28
 8001b64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b68:	6823      	ldr	r3, [r4, #0]
 8001b6a:	602b      	str	r3, [r5, #0]
 8001b6c:	e011      	b.n	8001b92 <main+0xa7a>
			  }

			  else if(tMenu->bottomButtonPressed == 1){
 8001b6e:	4b65      	ldr	r3, [pc, #404]	; (8001d04 <main+0xbec>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d10c      	bne.n	8001b92 <main+0xa7a>
				  	  sTime.Hours --;
 8001b78:	7f3b      	ldrb	r3, [r7, #28]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	773b      	strb	r3, [r7, #28]
					  sDateTime->Time = sTime;
 8001b80:	4b61      	ldr	r3, [pc, #388]	; (8001d08 <main+0xbf0>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	461d      	mov	r5, r3
 8001b86:	f107 041c 	add.w	r4, r7, #28
 8001b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	602b      	str	r3, [r5, #0]
			  }
			  HAL_RTC_SetTime(&hrtc, &sDateTime->Time, RTC_FORMAT_BIN);
 8001b92:	4b5d      	ldr	r3, [pc, #372]	; (8001d08 <main+0xbf0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2200      	movs	r2, #0
 8001b98:	4619      	mov	r1, r3
 8001b9a:	485c      	ldr	r0, [pc, #368]	; (8001d0c <main+0xbf4>)
 8001b9c:	f004 fd80 	bl	80066a0 <HAL_RTC_SetTime>
			  break;
 8001ba0:	e063      	b.n	8001c6a <main+0xb52>

		  case MIN:
			  if(tMenu->topButtonPressed == 1){
 8001ba2:	4b58      	ldr	r3, [pc, #352]	; (8001d04 <main+0xbec>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d10d      	bne.n	8001bc8 <main+0xab0>
					  sTime.Minutes ++;
 8001bac:	7f7b      	ldrb	r3, [r7, #29]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	777b      	strb	r3, [r7, #29]
					  sDateTime->Time = sTime;
 8001bb4:	4b54      	ldr	r3, [pc, #336]	; (8001d08 <main+0xbf0>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	461d      	mov	r5, r3
 8001bba:	f107 041c 	add.w	r4, r7, #28
 8001bbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	602b      	str	r3, [r5, #0]
 8001bc6:	e011      	b.n	8001bec <main+0xad4>
			  }

			  else if(tMenu->bottomButtonPressed == 1){
 8001bc8:	4b4e      	ldr	r3, [pc, #312]	; (8001d04 <main+0xbec>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d10c      	bne.n	8001bec <main+0xad4>
				  	  sTime.Minutes --;
 8001bd2:	7f7b      	ldrb	r3, [r7, #29]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	777b      	strb	r3, [r7, #29]
					  sDateTime->Time = sTime;
 8001bda:	4b4b      	ldr	r3, [pc, #300]	; (8001d08 <main+0xbf0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	461d      	mov	r5, r3
 8001be0:	f107 041c 	add.w	r4, r7, #28
 8001be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	602b      	str	r3, [r5, #0]
			  }
			  HAL_RTC_SetTime(&hrtc, &sDateTime->Time, RTC_FORMAT_BIN);
 8001bec:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <main+0xbf0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4845      	ldr	r0, [pc, #276]	; (8001d0c <main+0xbf4>)
 8001bf6:	f004 fd53 	bl	80066a0 <HAL_RTC_SetTime>
			  break;
 8001bfa:	e036      	b.n	8001c6a <main+0xb52>

		  case SEC:
			  if(tMenu->topButtonPressed == 1){
 8001bfc:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <main+0xbec>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d10d      	bne.n	8001c22 <main+0xb0a>
					  sTime.Seconds ++;
 8001c06:	7fbb      	ldrb	r3, [r7, #30]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	77bb      	strb	r3, [r7, #30]
					  sDateTime->Time = sTime;
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	; (8001d08 <main+0xbf0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461d      	mov	r5, r3
 8001c14:	f107 041c 	add.w	r4, r7, #28
 8001c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	602b      	str	r3, [r5, #0]
 8001c20:	e011      	b.n	8001c46 <main+0xb2e>
			  }

			  else if(tMenu->bottomButtonPressed == 1){
 8001c22:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <main+0xbec>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d10c      	bne.n	8001c46 <main+0xb2e>
				  	  sTime.Seconds --;
 8001c2c:	7fbb      	ldrb	r3, [r7, #30]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	77bb      	strb	r3, [r7, #30]
					  sDateTime->Time = sTime;
 8001c34:	4b34      	ldr	r3, [pc, #208]	; (8001d08 <main+0xbf0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	461d      	mov	r5, r3
 8001c3a:	f107 041c 	add.w	r4, r7, #28
 8001c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	602b      	str	r3, [r5, #0]
			  }
			  HAL_RTC_SetTime(&hrtc, &sDateTime->Time, RTC_FORMAT_BIN);
 8001c46:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <main+0xbf0>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	482f      	ldr	r0, [pc, #188]	; (8001d0c <main+0xbf4>)
 8001c50:	f004 fd26 	bl	80066a0 <HAL_RTC_SetTime>
			  break;
 8001c54:	e009      	b.n	8001c6a <main+0xb52>

		  case SET_DATE_TIME:

			  tMenu->timeSet = 1;
 8001c56:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <main+0xbec>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	60da      	str	r2, [r3, #12]
			  tMenu->itemIndex = 1;
 8001c5e:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <main+0xbec>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2201      	movs	r2, #1
 8001c64:	609a      	str	r2, [r3, #8]
			  break;
 8001c66:	e000      	b.n	8001c6a <main+0xb52>

		  default:
			  __NOP();
 8001c68:	bf00      	nop
		  }
#if 0
		  HAL_RTC_SetTime(&hrtc, &sDateTime->Time, RTC_FORMAT_BIN);
		  HAL_RTC_SetDate(&hrtc, &sDateTime->Date, RTC_FORMAT_BIN);
#endif
		  if(tMenu->timeSet == 1 ){
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <main+0xbec>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d123      	bne.n	8001cbc <main+0xba4>
			  HAL_RTC_GetTime(&hrtc, &sDateTime->Time, RTC_FORMAT_BIN);
 8001c74:	4b24      	ldr	r3, [pc, #144]	; (8001d08 <main+0xbf0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4823      	ldr	r0, [pc, #140]	; (8001d0c <main+0xbf4>)
 8001c7e:	f004 fda9 	bl	80067d4 <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &sDateTime->Date, RTC_FORMAT_BIN);
 8001c82:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <main+0xbf0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3314      	adds	r3, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	481f      	ldr	r0, [pc, #124]	; (8001d0c <main+0xbf4>)
 8001c8e:	f004 fe83 	bl	8006998 <HAL_RTC_GetDate>
			  setDisplayMode3(screen, sDateTime);
 8001c92:	4b1f      	ldr	r3, [pc, #124]	; (8001d10 <main+0xbf8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <main+0xbf0>)
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f001 fe53 	bl	8003948 <setDisplayMode3>
			  tMenu->topButtonPressed = 0;
 8001ca2:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <main+0xbec>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
			  tMenu->bottomButtonPressed = 0;
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <main+0xbec>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	605a      	str	r2, [r3, #4]
			  screen->updateScreen = 1;
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <main+0xbf8>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	e02c      	b.n	8001d16 <main+0xbfe>
		  }

		  else{
			  tMenu->topButtonPressed = 0;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <main+0xbec>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
			  tMenu->bottomButtonPressed = 0;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <main+0xbec>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	605a      	str	r2, [r3, #4]
			  HAL_RTC_GetTime(&hrtc, &sDateTime->Time, RTC_FORMAT_BIN);
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <main+0xbf0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480d      	ldr	r0, [pc, #52]	; (8001d0c <main+0xbf4>)
 8001cd6:	f004 fd7d 	bl	80067d4 <HAL_RTC_GetTime>
			  HAL_RTC_GetDate(&hrtc, &sDateTime->Date, RTC_FORMAT_BIN);
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <main+0xbf0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	3314      	adds	r3, #20
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4809      	ldr	r0, [pc, #36]	; (8001d0c <main+0xbf4>)
 8001ce6:	f004 fe57 	bl	8006998 <HAL_RTC_GetDate>
			  screen->updateScreen = 1;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <main+0xbf8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	605a      	str	r2, [r3, #4]
			  setDisplayMode3(screen, sDateTime);
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <main+0xbf8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <main+0xbf0>)
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f001 fe23 	bl	8003948 <setDisplayMode3>
 8001d02:	e008      	b.n	8001d16 <main+0xbfe>
 8001d04:	20000338 	.word	0x20000338
 8001d08:	20000330 	.word	0x20000330
 8001d0c:	20000148 	.word	0x20000148
 8001d10:	20000328 	.word	0x20000328
		  }
	  }

	  else{
		  __NOP();
 8001d14:	bf00      	nop
	  }

	  if(tMenu->timeSet == 1){
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <main+0xc48>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d11c      	bne.n	8001d5a <main+0xc42>
		  HAL_RTC_GetTime(&hrtc, &sDateTime->Time, RTC_FORMAT_BIN);
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <main+0xc4c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2200      	movs	r2, #0
 8001d26:	4619      	mov	r1, r3
 8001d28:	480f      	ldr	r0, [pc, #60]	; (8001d68 <main+0xc50>)
 8001d2a:	f004 fd53 	bl	80067d4 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &sDateTime->Date, RTC_FORMAT_BIN);
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <main+0xc4c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3314      	adds	r3, #20
 8001d34:	2200      	movs	r2, #0
 8001d36:	4619      	mov	r1, r3
 8001d38:	480b      	ldr	r0, [pc, #44]	; (8001d68 <main+0xc50>)
 8001d3a:	f004 fe2d 	bl	8006998 <HAL_RTC_GetDate>
		  setDisplayMode3(screen, sDateTime);
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <main+0xc54>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <main+0xc4c>)
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 fdfd 	bl	8003948 <setDisplayMode3>
		  screen->updateScreen = 1;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <main+0xc54>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2201      	movs	r2, #1
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	f7ff babe 	b.w	80012d6 <main+0x1be>
	  }
	  else{
		  __NOP();
 8001d5a:	bf00      	nop
	  if (state->activeBtn != 0){
 8001d5c:	f7ff babb 	b.w	80012d6 <main+0x1be>
 8001d60:	20000338 	.word	0x20000338
 8001d64:	20000330 	.word	0x20000330
 8001d68:	20000148 	.word	0x20000148
 8001d6c:	20000328 	.word	0x20000328

08001d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b094      	sub	sp, #80	; 0x50
 8001d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d76:	f107 0320 	add.w	r3, r7, #32
 8001d7a:	2230      	movs	r2, #48	; 0x30
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f007 fa7c 	bl	800927c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d84:	f107 030c 	add.w	r3, r7, #12
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <SystemClock_Config+0xd0>)
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	4a28      	ldr	r2, [pc, #160]	; (8001e40 <SystemClock_Config+0xd0>)
 8001d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da2:	6413      	str	r3, [r2, #64]	; 0x40
 8001da4:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <SystemClock_Config+0xd0>)
 8001da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db0:	2300      	movs	r3, #0
 8001db2:	607b      	str	r3, [r7, #4]
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <SystemClock_Config+0xd4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <SystemClock_Config+0xd4>)
 8001dba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <SystemClock_Config+0xd4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001dcc:	230a      	movs	r3, #10
 8001dce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dd4:	2310      	movs	r3, #16
 8001dd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001de0:	2300      	movs	r3, #0
 8001de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001de4:	2310      	movs	r3, #16
 8001de6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001de8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001dec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001dee:	2304      	movs	r3, #4
 8001df0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001df2:	2304      	movs	r3, #4
 8001df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df6:	f107 0320 	add.w	r3, r7, #32
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 fe52 	bl	8005aa4 <HAL_RCC_OscConfig>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001e06:	f000 fddd 	bl	80029c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e0a:	230f      	movs	r3, #15
 8001e0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e12:	2300      	movs	r3, #0
 8001e14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	2102      	movs	r1, #2
 8001e26:	4618      	mov	r0, r3
 8001e28:	f004 f8b4 	bl	8005f94 <HAL_RCC_ClockConfig>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001e32:	f000 fdc7 	bl	80029c4 <Error_Handler>
  }
}
 8001e36:	bf00      	nop
 8001e38:	3750      	adds	r7, #80	; 0x50
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40007000 	.word	0x40007000

08001e48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e4e:	463b      	mov	r3, r7
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e5a:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <MX_ADC1_Init+0x98>)
 8001e5c:	4a21      	ldr	r2, [pc, #132]	; (8001ee4 <MX_ADC1_Init+0x9c>)
 8001e5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e60:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <MX_ADC1_Init+0x98>)
 8001e62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e68:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <MX_ADC1_Init+0x98>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <MX_ADC1_Init+0x98>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <MX_ADC1_Init+0x98>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <MX_ADC1_Init+0x98>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <MX_ADC1_Init+0x98>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <MX_ADC1_Init+0x98>)
 8001e8a:	4a17      	ldr	r2, [pc, #92]	; (8001ee8 <MX_ADC1_Init+0xa0>)
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <MX_ADC1_Init+0x98>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <MX_ADC1_Init+0x98>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <MX_ADC1_Init+0x98>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ea2:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <MX_ADC1_Init+0x98>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <MX_ADC1_Init+0x98>)
 8001eaa:	f002 fa73 	bl	8004394 <HAL_ADC_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001eb4:	f000 fd86 	bl	80029c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001eb8:	2304      	movs	r3, #4
 8001eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <MX_ADC1_Init+0x98>)
 8001eca:	f002 fd55 	bl	8004978 <HAL_ADC_ConfigChannel>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ed4:	f000 fd76 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	200000a0 	.word	0x200000a0
 8001ee4:	40012000 	.word	0x40012000
 8001ee8:	0f000001 	.word	0x0f000001

08001eec <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f00:	2300      	movs	r3, #0
 8001f02:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f06:	4a25      	ldr	r2, [pc, #148]	; (8001f9c <MX_RTC_Init+0xb0>)
 8001f08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f0a:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f12:	227f      	movs	r2, #127	; 0x7f
 8001f14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f18:	22ff      	movs	r2, #255	; 0xff
 8001f1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f2e:	481a      	ldr	r0, [pc, #104]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f30:	f004 fb40 	bl	80065b4 <HAL_RTC_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001f3a:	f000 fd43 	bl	80029c4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x16;
 8001f3e:	2316      	movs	r3, #22
 8001f40:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 8001f42:	2320      	movs	r3, #32
 8001f44:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	2201      	movs	r2, #1
 8001f56:	4619      	mov	r1, r3
 8001f58:	480f      	ldr	r0, [pc, #60]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f5a:	f004 fba1 	bl	80066a0 <HAL_RTC_SetTime>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001f64:	f000 fd2e 	bl	80029c4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_SEPTEMBER;
 8001f6c:	2309      	movs	r3, #9
 8001f6e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x19;
 8001f70:	2319      	movs	r3, #25
 8001f72:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f78:	463b      	mov	r3, r7
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4806      	ldr	r0, [pc, #24]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f80:	f004 fc86 	bl	8006890 <HAL_RTC_SetDate>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001f8a:	f000 fd1b 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000148 	.word	0x20000148
 8001f9c:	40002800 	.word	0x40002800

08001fa0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b096      	sub	sp, #88	; 0x58
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	611a      	str	r2, [r3, #16]
 8001fce:	615a      	str	r2, [r3, #20]
 8001fd0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f007 f94f 	bl	800927c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fde:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <MX_TIM1_Init+0x134>)
 8001fe0:	4a3d      	ldr	r2, [pc, #244]	; (80020d8 <MX_TIM1_Init+0x138>)
 8001fe2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fe4:	4b3b      	ldr	r3, [pc, #236]	; (80020d4 <MX_TIM1_Init+0x134>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fea:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <MX_TIM1_Init+0x134>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ff0:	4b38      	ldr	r3, [pc, #224]	; (80020d4 <MX_TIM1_Init+0x134>)
 8001ff2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff8:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <MX_TIM1_Init+0x134>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ffe:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <MX_TIM1_Init+0x134>)
 8002000:	2200      	movs	r2, #0
 8002002:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002004:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <MX_TIM1_Init+0x134>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800200a:	4832      	ldr	r0, [pc, #200]	; (80020d4 <MX_TIM1_Init+0x134>)
 800200c:	f004 fdd0 	bl	8006bb0 <HAL_TIM_Base_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002016:	f000 fcd5 	bl	80029c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800201e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002020:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002024:	4619      	mov	r1, r3
 8002026:	482b      	ldr	r0, [pc, #172]	; (80020d4 <MX_TIM1_Init+0x134>)
 8002028:	f005 fba0 	bl	800776c <HAL_TIM_ConfigClockSource>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002032:	f000 fcc7 	bl	80029c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002036:	4827      	ldr	r0, [pc, #156]	; (80020d4 <MX_TIM1_Init+0x134>)
 8002038:	f004 fe09 	bl	8006c4e <HAL_TIM_OC_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002042:	f000 fcbf 	bl	80029c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204a:	2300      	movs	r3, #0
 800204c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800204e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002052:	4619      	mov	r1, r3
 8002054:	481f      	ldr	r0, [pc, #124]	; (80020d4 <MX_TIM1_Init+0x134>)
 8002056:	f006 f859 	bl	800810c <HAL_TIMEx_MasterConfigSynchronization>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002060:	f000 fcb0 	bl	80029c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002070:	2300      	movs	r3, #0
 8002072:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002074:	2300      	movs	r3, #0
 8002076:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002078:	2300      	movs	r3, #0
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002084:	2200      	movs	r2, #0
 8002086:	4619      	mov	r1, r3
 8002088:	4812      	ldr	r0, [pc, #72]	; (80020d4 <MX_TIM1_Init+0x134>)
 800208a:	f005 f9b5 	bl	80073f8 <HAL_TIM_OC_ConfigChannel>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002094:	f000 fc96 	bl	80029c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002098:	2300      	movs	r3, #0
 800209a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	4619      	mov	r1, r3
 80020ba:	4806      	ldr	r0, [pc, #24]	; (80020d4 <MX_TIM1_Init+0x134>)
 80020bc:	f006 f894 	bl	80081e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80020c6:	f000 fc7d 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020ca:	bf00      	nop
 80020cc:	3758      	adds	r7, #88	; 0x58
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000168 	.word	0x20000168
 80020d8:	40010000 	.word	0x40010000

080020dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	; 0x28
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e2:	f107 0320 	add.w	r3, r7, #32
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
 80020f8:	611a      	str	r2, [r3, #16]
 80020fa:	615a      	str	r2, [r3, #20]
 80020fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <MX_TIM2_Init+0xac>)
 8002100:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002104:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <MX_TIM2_Init+0xac>)
 8002108:	2253      	movs	r2, #83	; 0x53
 800210a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210c:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <MX_TIM2_Init+0xac>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39;
 8002112:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <MX_TIM2_Init+0xac>)
 8002114:	2227      	movs	r2, #39	; 0x27
 8002116:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <MX_TIM2_Init+0xac>)
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <MX_TIM2_Init+0xac>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002124:	4818      	ldr	r0, [pc, #96]	; (8002188 <MX_TIM2_Init+0xac>)
 8002126:	f004 fdeb 	bl	8006d00 <HAL_TIM_PWM_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002130:	f000 fc48 	bl	80029c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002138:	2300      	movs	r3, #0
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800213c:	f107 0320 	add.w	r3, r7, #32
 8002140:	4619      	mov	r1, r3
 8002142:	4811      	ldr	r0, [pc, #68]	; (8002188 <MX_TIM2_Init+0xac>)
 8002144:	f005 ffe2 	bl	800810c <HAL_TIMEx_MasterConfigSynchronization>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800214e:	f000 fc39 	bl	80029c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002152:	2360      	movs	r3, #96	; 0x60
 8002154:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	2200      	movs	r2, #0
 8002166:	4619      	mov	r1, r3
 8002168:	4807      	ldr	r0, [pc, #28]	; (8002188 <MX_TIM2_Init+0xac>)
 800216a:	f005 fa3d 	bl	80075e8 <HAL_TIM_PWM_ConfigChannel>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002174:	f000 fc26 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002178:	4803      	ldr	r0, [pc, #12]	; (8002188 <MX_TIM2_Init+0xac>)
 800217a:	f001 fecf 	bl	8003f1c <HAL_TIM_MspPostInit>

}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	; 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200001b0 	.word	0x200001b0

0800218c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b092      	sub	sp, #72	; 0x48
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002192:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021aa:	f107 0320 	add.w	r3, r7, #32
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]
 80021c2:	60da      	str	r2, [r3, #12]
 80021c4:	611a      	str	r2, [r3, #16]
 80021c6:	615a      	str	r2, [r3, #20]
 80021c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021ca:	4b3b      	ldr	r3, [pc, #236]	; (80022b8 <MX_TIM3_Init+0x12c>)
 80021cc:	4a3b      	ldr	r2, [pc, #236]	; (80022bc <MX_TIM3_Init+0x130>)
 80021ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42-1;
 80021d0:	4b39      	ldr	r3, [pc, #228]	; (80022b8 <MX_TIM3_Init+0x12c>)
 80021d2:	2229      	movs	r2, #41	; 0x29
 80021d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d6:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <MX_TIM3_Init+0x12c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 25999;
 80021dc:	4b36      	ldr	r3, [pc, #216]	; (80022b8 <MX_TIM3_Init+0x12c>)
 80021de:	f246 528f 	movw	r2, #25999	; 0x658f
 80021e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e4:	4b34      	ldr	r3, [pc, #208]	; (80022b8 <MX_TIM3_Init+0x12c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ea:	4b33      	ldr	r3, [pc, #204]	; (80022b8 <MX_TIM3_Init+0x12c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021f0:	4831      	ldr	r0, [pc, #196]	; (80022b8 <MX_TIM3_Init+0x12c>)
 80021f2:	f004 fcdd 	bl	8006bb0 <HAL_TIM_Base_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80021fc:	f000 fbe2 	bl	80029c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002204:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002206:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800220a:	4619      	mov	r1, r3
 800220c:	482a      	ldr	r0, [pc, #168]	; (80022b8 <MX_TIM3_Init+0x12c>)
 800220e:	f005 faad 	bl	800776c <HAL_TIM_ConfigClockSource>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002218:	f000 fbd4 	bl	80029c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800221c:	4826      	ldr	r0, [pc, #152]	; (80022b8 <MX_TIM3_Init+0x12c>)
 800221e:	f004 fe6f 	bl	8006f00 <HAL_TIM_IC_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002228:	f000 fbcc 	bl	80029c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800222c:	4822      	ldr	r0, [pc, #136]	; (80022b8 <MX_TIM3_Init+0x12c>)
 800222e:	f004 fd67 	bl	8006d00 <HAL_TIM_PWM_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002238:	f000 fbc4 	bl	80029c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223c:	2300      	movs	r3, #0
 800223e:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002244:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002248:	4619      	mov	r1, r3
 800224a:	481b      	ldr	r0, [pc, #108]	; (80022b8 <MX_TIM3_Init+0x12c>)
 800224c:	f005 ff5e 	bl	800810c <HAL_TIMEx_MasterConfigSynchronization>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 8002256:	f000 fbb5 	bl	80029c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800225e:	2301      	movs	r3, #1
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002262:	2300      	movs	r3, #0
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800226a:	f107 0320 	add.w	r3, r7, #32
 800226e:	2200      	movs	r2, #0
 8002270:	4619      	mov	r1, r3
 8002272:	4811      	ldr	r0, [pc, #68]	; (80022b8 <MX_TIM3_Init+0x12c>)
 8002274:	f005 f91c 	bl	80074b0 <HAL_TIM_IC_ConfigChannel>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 800227e:	f000 fba1 	bl	80029c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002282:	2360      	movs	r3, #96	; 0x60
 8002284:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2204      	movs	r2, #4
 8002296:	4619      	mov	r1, r3
 8002298:	4807      	ldr	r0, [pc, #28]	; (80022b8 <MX_TIM3_Init+0x12c>)
 800229a:	f005 f9a5 	bl	80075e8 <HAL_TIM_PWM_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 80022a4:	f000 fb8e 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022a8:	4803      	ldr	r0, [pc, #12]	; (80022b8 <MX_TIM3_Init+0x12c>)
 80022aa:	f001 fe37 	bl	8003f1c <HAL_TIM_MspPostInit>

}
 80022ae:	bf00      	nop
 80022b0:	3748      	adds	r7, #72	; 0x48
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200001f8 	.word	0x200001f8
 80022bc:	40000400 	.word	0x40000400

080022c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <MX_USART2_UART_Init+0x50>)
 80022c6:	4a13      	ldr	r2, [pc, #76]	; (8002314 <MX_USART2_UART_Init+0x54>)
 80022c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <MX_USART2_UART_Init+0x50>)
 80022cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <MX_USART2_UART_Init+0x50>)
 80022d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022d8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <MX_USART2_UART_Init+0x50>)
 80022dc:	2200      	movs	r2, #0
 80022de:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_ODD;
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <MX_USART2_UART_Init+0x50>)
 80022e2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80022e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <MX_USART2_UART_Init+0x50>)
 80022ea:	220c      	movs	r2, #12
 80022ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ee:	4b08      	ldr	r3, [pc, #32]	; (8002310 <MX_USART2_UART_Init+0x50>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <MX_USART2_UART_Init+0x50>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022fa:	4805      	ldr	r0, [pc, #20]	; (8002310 <MX_USART2_UART_Init+0x50>)
 80022fc:	f005 ffda 	bl	80082b4 <HAL_UART_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8002306:	f000 fb5d 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200002a0 	.word	0x200002a0
 8002314:	40004400 	.word	0x40004400

08002318 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <MX_DMA_Init+0x68>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <MX_DMA_Init+0x68>)
 8002328:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <MX_DMA_Init+0x68>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	603b      	str	r3, [r7, #0]
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <MX_DMA_Init+0x68>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <MX_DMA_Init+0x68>)
 8002344:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <MX_DMA_Init+0x68>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	2010      	movs	r0, #16
 800235c:	f002 fe1f 	bl	8004f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002360:	2010      	movs	r0, #16
 8002362:	f002 fe38 	bl	8004fd6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	2038      	movs	r0, #56	; 0x38
 800236c:	f002 fe17 	bl	8004f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002370:	2038      	movs	r0, #56	; 0x38
 8002372:	f002 fe30 	bl	8004fd6 <HAL_NVIC_EnableIRQ>

}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800

08002384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
 8002398:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
 800239e:	4b67      	ldr	r3, [pc, #412]	; (800253c <MX_GPIO_Init+0x1b8>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	4a66      	ldr	r2, [pc, #408]	; (800253c <MX_GPIO_Init+0x1b8>)
 80023a4:	f043 0304 	orr.w	r3, r3, #4
 80023a8:	6313      	str	r3, [r2, #48]	; 0x30
 80023aa:	4b64      	ldr	r3, [pc, #400]	; (800253c <MX_GPIO_Init+0x1b8>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	613b      	str	r3, [r7, #16]
 80023b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b60      	ldr	r3, [pc, #384]	; (800253c <MX_GPIO_Init+0x1b8>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a5f      	ldr	r2, [pc, #380]	; (800253c <MX_GPIO_Init+0x1b8>)
 80023c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b5d      	ldr	r3, [pc, #372]	; (800253c <MX_GPIO_Init+0x1b8>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	4b59      	ldr	r3, [pc, #356]	; (800253c <MX_GPIO_Init+0x1b8>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a58      	ldr	r2, [pc, #352]	; (800253c <MX_GPIO_Init+0x1b8>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b56      	ldr	r3, [pc, #344]	; (800253c <MX_GPIO_Init+0x1b8>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	60bb      	str	r3, [r7, #8]
 80023ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	4b52      	ldr	r3, [pc, #328]	; (800253c <MX_GPIO_Init+0x1b8>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a51      	ldr	r2, [pc, #324]	; (800253c <MX_GPIO_Init+0x1b8>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b4f      	ldr	r3, [pc, #316]	; (800253c <MX_GPIO_Init+0x1b8>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	607b      	str	r3, [r7, #4]
 8002408:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Data6_Pin|Data7_Pin, GPIO_PIN_RESET);
 800240a:	2200      	movs	r2, #0
 800240c:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8002410:	484b      	ldr	r0, [pc, #300]	; (8002540 <MX_GPIO_Init+0x1bc>)
 8002412:	f003 fafb 	bl	8005a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RS_Pin|Data5_Pin, GPIO_PIN_RESET);
 8002416:	2200      	movs	r2, #0
 8002418:	f44f 7188 	mov.w	r1, #272	; 0x110
 800241c:	4849      	ldr	r0, [pc, #292]	; (8002544 <MX_GPIO_Init+0x1c0>)
 800241e:	f003 faf5 	bl	8005a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_Pin|Data4_Pin|D5_Pin|D4_Pin
 8002422:	2200      	movs	r2, #0
 8002424:	f24f 4106 	movw	r1, #62470	; 0xf406
 8002428:	4847      	ldr	r0, [pc, #284]	; (8002548 <MX_GPIO_Init+0x1c4>)
 800242a:	f003 faef 	bl	8005a0c <HAL_GPIO_WritePin>
                          |D3_Pin|D2_Pin|RNW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800242e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002434:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800243e:	f107 0314 	add.w	r3, r7, #20
 8002442:	4619      	mov	r1, r3
 8002444:	483f      	ldr	r0, [pc, #252]	; (8002544 <MX_GPIO_Init+0x1c0>)
 8002446:	f003 f95d 	bl	8005704 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800244a:	2320      	movs	r3, #32
 800244c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244e:	2301      	movs	r3, #1
 8002450:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	4837      	ldr	r0, [pc, #220]	; (8002540 <MX_GPIO_Init+0x1bc>)
 8002462:	f003 f94f 	bl	8005704 <HAL_GPIO_Init>

  /*Configure GPIO pins : S3_Pin S1_Pin S5_Pin S4_Pin */
  GPIO_InitStruct.Pin = S3_Pin|S1_Pin|S5_Pin|S4_Pin;
 8002466:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800246a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800246c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002472:	2301      	movs	r3, #1
 8002474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	4830      	ldr	r0, [pc, #192]	; (8002540 <MX_GPIO_Init+0x1bc>)
 800247e:	f003 f941 	bl	8005704 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin Data5_Pin */
  GPIO_InitStruct.Pin = RS_Pin|Data5_Pin;
 8002482:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002486:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002488:	2301      	movs	r3, #1
 800248a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800248c:	2302      	movs	r3, #2
 800248e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4619      	mov	r1, r3
 800249a:	482a      	ldr	r0, [pc, #168]	; (8002544 <MX_GPIO_Init+0x1c0>)
 800249c:	f003 f932 	bl	8005704 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin Data4_Pin RNW_Pin */
  GPIO_InitStruct.Pin = EN_Pin|Data4_Pin|RNW_Pin;
 80024a0:	f248 0306 	movw	r3, #32774	; 0x8006
 80024a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024a6:	2301      	movs	r3, #1
 80024a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024aa:	2302      	movs	r3, #2
 80024ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b2:	f107 0314 	add.w	r3, r7, #20
 80024b6:	4619      	mov	r1, r3
 80024b8:	4823      	ldr	r0, [pc, #140]	; (8002548 <MX_GPIO_Init+0x1c4>)
 80024ba:	f003 f923 	bl	8005704 <HAL_GPIO_Init>

  /*Configure GPIO pins : D5_Pin D4_Pin D3_Pin D2_Pin */
  GPIO_InitStruct.Pin = D5_Pin|D4_Pin|D3_Pin|D2_Pin;
 80024be:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80024c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024c4:	2301      	movs	r3, #1
 80024c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024c8:	2301      	movs	r3, #1
 80024ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	2300      	movs	r3, #0
 80024ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	4619      	mov	r1, r3
 80024d6:	481c      	ldr	r0, [pc, #112]	; (8002548 <MX_GPIO_Init+0x1c4>)
 80024d8:	f003 f914 	bl	8005704 <HAL_GPIO_Init>

  /*Configure GPIO pins : Data6_Pin Data7_Pin */
  GPIO_InitStruct.Pin = Data6_Pin|Data7_Pin;
 80024dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80024e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e2:	2301      	movs	r3, #1
 80024e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024e6:	2302      	movs	r3, #2
 80024e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	4619      	mov	r1, r3
 80024f4:	4812      	ldr	r0, [pc, #72]	; (8002540 <MX_GPIO_Init+0x1bc>)
 80024f6:	f003 f905 	bl	8005704 <HAL_GPIO_Init>

  /*Configure GPIO pin : S2_Pin */
  GPIO_InitStruct.Pin = S2_Pin;
 80024fa:	2320      	movs	r3, #32
 80024fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80024fe:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002504:	2301      	movs	r3, #1
 8002506:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S2_GPIO_Port, &GPIO_InitStruct);
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4619      	mov	r1, r3
 800250e:	480e      	ldr	r0, [pc, #56]	; (8002548 <MX_GPIO_Init+0x1c4>)
 8002510:	f003 f8f8 	bl	8005704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8002514:	2200      	movs	r2, #0
 8002516:	2102      	movs	r1, #2
 8002518:	2017      	movs	r0, #23
 800251a:	f002 fd40 	bl	8004f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800251e:	2017      	movs	r0, #23
 8002520:	f002 fd59 	bl	8004fd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002524:	2200      	movs	r2, #0
 8002526:	2100      	movs	r1, #0
 8002528:	2028      	movs	r0, #40	; 0x28
 800252a:	f002 fd38 	bl	8004f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800252e:	2028      	movs	r0, #40	; 0x28
 8002530:	f002 fd51 	bl	8004fd6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002534:	bf00      	nop
 8002536:	3728      	adds	r7, #40	; 0x28
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800
 8002540:	40020000 	.word	0x40020000
 8002544:	40020800 	.word	0x40020800
 8002548:	40020400 	.word	0x40020400

0800254c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	80fb      	strh	r3, [r7, #6]

#if 1
	switch (GPIO_Pin){
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800255c:	f000 80bf 	beq.w	80026de <HAL_GPIO_EXTI_Callback+0x192>
 8002560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002564:	f300 8118 	bgt.w	8002798 <HAL_GPIO_EXTI_Callback+0x24c>
 8002568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256c:	d048      	beq.n	8002600 <HAL_GPIO_EXTI_Callback+0xb4>
 800256e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002572:	f300 8111 	bgt.w	8002798 <HAL_GPIO_EXTI_Callback+0x24c>
 8002576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800257a:	d009      	beq.n	8002590 <HAL_GPIO_EXTI_Callback+0x44>
 800257c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002580:	f300 810a 	bgt.w	8002798 <HAL_GPIO_EXTI_Callback+0x24c>
 8002584:	2b20      	cmp	r3, #32
 8002586:	f000 80e2 	beq.w	800274e <HAL_GPIO_EXTI_Callback+0x202>
 800258a:	2b80      	cmp	r3, #128	; 0x80
 800258c:	d070      	beq.n	8002670 <HAL_GPIO_EXTI_Callback+0x124>
		}
		break;
#endif

	default:
		break;
 800258e:	e103      	b.n	8002798 <HAL_GPIO_EXTI_Callback+0x24c>
		if(btn1bounce.level == 1){
 8002590:	4b84      	ldr	r3, [pc, #528]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d109      	bne.n	80025ac <HAL_GPIO_EXTI_Callback+0x60>
			btn1bounce.goLowTime = HAL_GetTick();
 8002598:	f001 fecc 	bl	8004334 <HAL_GetTick>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	4b80      	ldr	r3, [pc, #512]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 80025a2:	605a      	str	r2, [r3, #4]
			btn1bounce.level = 0;
 80025a4:	4b7f      	ldr	r3, [pc, #508]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
		break;
 80025aa:	e0f6      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
			btn1bounce.goHighTime = HAL_GetTick();
 80025ac:	f001 fec2 	bl	8004334 <HAL_GetTick>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b7b      	ldr	r3, [pc, #492]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 80025b6:	609a      	str	r2, [r3, #8]
			btn1bounce.level = 1;
 80025b8:	4b7a      	ldr	r3, [pc, #488]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
			if( (btn1bounce.goHighTime - btn1bounce.goLowTime) > 25){
 80025be:	4b79      	ldr	r3, [pc, #484]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	4b78      	ldr	r3, [pc, #480]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b19      	cmp	r3, #25
 80025ca:	dd17      	ble.n	80025fc <HAL_GPIO_EXTI_Callback+0xb0>
				if(state->buttonEnabled){
 80025cc:	4b76      	ldr	r3, [pc, #472]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d010      	beq.n	80025f8 <HAL_GPIO_EXTI_Callback+0xac>
					state->uartEnabled = !state->uartEnabled;
 80025d6:	4b74      	ldr	r3, [pc, #464]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4b70      	ldr	r3, [pc, #448]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	669a      	str	r2, [r3, #104]	; 0x68
					state->activeBtn = S1_Pin;
 80025ec:	4b6e      	ldr	r3, [pc, #440]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f4:	815a      	strh	r2, [r3, #10]
		break;
 80025f6:	e0d0      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
					__NOP();
 80025f8:	bf00      	nop
		break;
 80025fa:	e0ce      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
				__NOP();
 80025fc:	bf00      	nop
		break;
 80025fe:	e0cc      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
		if(btn1bounce.level == 1){
 8002600:	4b68      	ldr	r3, [pc, #416]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d109      	bne.n	800261c <HAL_GPIO_EXTI_Callback+0xd0>
					btn1bounce.goLowTime = HAL_GetTick();
 8002608:	f001 fe94 	bl	8004334 <HAL_GetTick>
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	4b64      	ldr	r3, [pc, #400]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002612:	605a      	str	r2, [r3, #4]
					btn1bounce.level = 0;
 8002614:	4b63      	ldr	r3, [pc, #396]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
		  break;
 800261a:	e0be      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
					btn1bounce.goHighTime = HAL_GetTick();
 800261c:	f001 fe8a 	bl	8004334 <HAL_GetTick>
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	4b5f      	ldr	r3, [pc, #380]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002626:	609a      	str	r2, [r3, #8]
					btn1bounce.level = 1;
 8002628:	4b5e      	ldr	r3, [pc, #376]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 800262a:	2201      	movs	r2, #1
 800262c:	601a      	str	r2, [r3, #0]
					if( (btn1bounce.goHighTime - btn1bounce.goLowTime) > 25){
 800262e:	4b5d      	ldr	r3, [pc, #372]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	4b5c      	ldr	r3, [pc, #368]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	2b19      	cmp	r3, #25
 800263a:	dd17      	ble.n	800266c <HAL_GPIO_EXTI_Callback+0x120>
						if(state->buttonEnabled){
 800263c:	4b5a      	ldr	r3, [pc, #360]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002642:	2b00      	cmp	r3, #0
 8002644:	d010      	beq.n	8002668 <HAL_GPIO_EXTI_Callback+0x11c>
							state->uartEnabled = !state->uartEnabled;
 8002646:	4b58      	ldr	r3, [pc, #352]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	669a      	str	r2, [r3, #104]	; 0x68
							state->activeBtn = S5_Pin;
 800265c:	4b52      	ldr	r3, [pc, #328]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002664:	815a      	strh	r2, [r3, #10]
		  break;
 8002666:	e098      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
							__NOP();
 8002668:	bf00      	nop
		  break;
 800266a:	e096      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
						__NOP();
 800266c:	bf00      	nop
		  break;
 800266e:	e094      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
		if(btn1bounce.level == 1){
 8002670:	4b4c      	ldr	r3, [pc, #304]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d109      	bne.n	800268c <HAL_GPIO_EXTI_Callback+0x140>
					btn1bounce.goLowTime = HAL_GetTick();
 8002678:	f001 fe5c 	bl	8004334 <HAL_GetTick>
 800267c:	4603      	mov	r3, r0
 800267e:	461a      	mov	r2, r3
 8002680:	4b48      	ldr	r3, [pc, #288]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002682:	605a      	str	r2, [r3, #4]
					btn1bounce.level = 0;
 8002684:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002686:	2200      	movs	r2, #0
 8002688:	601a      	str	r2, [r3, #0]
		  break;
 800268a:	e086      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
					btn1bounce.goHighTime = HAL_GetTick();
 800268c:	f001 fe52 	bl	8004334 <HAL_GetTick>
 8002690:	4603      	mov	r3, r0
 8002692:	461a      	mov	r2, r3
 8002694:	4b43      	ldr	r3, [pc, #268]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002696:	609a      	str	r2, [r3, #8]
					btn1bounce.level = 1;
 8002698:	4b42      	ldr	r3, [pc, #264]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 800269a:	2201      	movs	r2, #1
 800269c:	601a      	str	r2, [r3, #0]
					if( (btn1bounce.goHighTime - btn1bounce.goLowTime) > 25){
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	4b40      	ldr	r3, [pc, #256]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b19      	cmp	r3, #25
 80026aa:	dd16      	ble.n	80026da <HAL_GPIO_EXTI_Callback+0x18e>
						if(state->buttonEnabled){
 80026ac:	4b3e      	ldr	r3, [pc, #248]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00f      	beq.n	80026d6 <HAL_GPIO_EXTI_Callback+0x18a>
							state->uartEnabled = !state->uartEnabled;
 80026b6:	4b3c      	ldr	r3, [pc, #240]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	669a      	str	r2, [r3, #104]	; 0x68
							state->activeBtn = S3_Pin;
 80026cc:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2280      	movs	r2, #128	; 0x80
 80026d2:	815a      	strh	r2, [r3, #10]
		  break;
 80026d4:	e061      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
							__NOP();
 80026d6:	bf00      	nop
		  break;
 80026d8:	e05f      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
						__NOP();
 80026da:	bf00      	nop
		  break;
 80026dc:	e05d      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
		if(btn1bounce.level == 1){
 80026de:	4b31      	ldr	r3, [pc, #196]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d109      	bne.n	80026fa <HAL_GPIO_EXTI_Callback+0x1ae>
					btn1bounce.goLowTime = HAL_GetTick();
 80026e6:	f001 fe25 	bl	8004334 <HAL_GetTick>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 80026f0:	605a      	str	r2, [r3, #4]
					btn1bounce.level = 0;
 80026f2:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
		  break;
 80026f8:	e04f      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
					btn1bounce.goHighTime = HAL_GetTick();
 80026fa:	f001 fe1b 	bl	8004334 <HAL_GetTick>
 80026fe:	4603      	mov	r3, r0
 8002700:	461a      	mov	r2, r3
 8002702:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002704:	609a      	str	r2, [r3, #8]
					btn1bounce.level = 1;
 8002706:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002708:	2201      	movs	r2, #1
 800270a:	601a      	str	r2, [r3, #0]
					if( (btn1bounce.goHighTime - btn1bounce.goLowTime) > 25){
 800270c:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b19      	cmp	r3, #25
 8002718:	dd17      	ble.n	800274a <HAL_GPIO_EXTI_Callback+0x1fe>
						if(state->buttonEnabled){
 800271a:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002720:	2b00      	cmp	r3, #0
 8002722:	d010      	beq.n	8002746 <HAL_GPIO_EXTI_Callback+0x1fa>
							state->uartEnabled = !state->uartEnabled;
 8002724:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800272a:	2b00      	cmp	r3, #0
 800272c:	bf0c      	ite	eq
 800272e:	2301      	moveq	r3, #1
 8002730:	2300      	movne	r3, #0
 8002732:	b2da      	uxtb	r2, r3
 8002734:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	669a      	str	r2, [r3, #104]	; 0x68
							state->activeBtn = S4_Pin;
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002742:	815a      	strh	r2, [r3, #10]
		  break;
 8002744:	e029      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
							__NOP();
 8002746:	bf00      	nop
		  break;
 8002748:	e027      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
						__NOP();
 800274a:	bf00      	nop
		  break;
 800274c:	e025      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
		if(btn1bounce.level == 1){
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d109      	bne.n	800276a <HAL_GPIO_EXTI_Callback+0x21e>
					btn1bounce.goLowTime = HAL_GetTick();
 8002756:	f001 fded 	bl	8004334 <HAL_GetTick>
 800275a:	4603      	mov	r3, r0
 800275c:	461a      	mov	r2, r3
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002760:	605a      	str	r2, [r3, #4]
					btn1bounce.level = 0;
 8002762:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
		  break;
 8002768:	e017      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
					btn1bounce.goHighTime = HAL_GetTick();
 800276a:	f001 fde3 	bl	8004334 <HAL_GetTick>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002774:	609a      	str	r2, [r3, #8]
					btn1bounce.level = 1;
 8002776:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]
					if( (btn1bounce.goHighTime - btn1bounce.goLowTime) > 25){
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HAL_GPIO_EXTI_Callback+0x258>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b19      	cmp	r3, #25
 8002788:	dd04      	ble.n	8002794 <HAL_GPIO_EXTI_Callback+0x248>
						state->activeBtn = S2_Pin;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <HAL_GPIO_EXTI_Callback+0x25c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2220      	movs	r2, #32
 8002790:	815a      	strh	r2, [r3, #10]
		  break;
 8002792:	e002      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
						__NOP();
 8002794:	bf00      	nop
		  break;
 8002796:	e000      	b.n	800279a <HAL_GPIO_EXTI_Callback+0x24e>
		break;
 8002798:	bf00      	nop
		  __NOP();
	  }

#endif

}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	200002e4 	.word	0x200002e4
 80027a8:	20000320 	.word	0x20000320

080027ac <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
    if (huart == &huart2){
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a16      	ldr	r2, [pc, #88]	; (8002810 <HAL_UART_TxCpltCallback+0x64>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d125      	bne.n	8002808 <HAL_UART_TxCpltCallback+0x5c>
//    	Should make a cleanup function for response
    	state->responseReady = 0;
 80027bc:	4b15      	ldr	r3, [pc, #84]	; (8002814 <HAL_UART_TxCpltCallback+0x68>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2200      	movs	r2, #0
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40
    	resetStr(state->commandMsg,sizeof(state->commandMsg));
 80027c4:	4b13      	ldr	r3, [pc, #76]	; (8002814 <HAL_UART_TxCpltCallback+0x68>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	331c      	adds	r3, #28
 80027ca:	2119      	movs	r1, #25
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 f9b2 	bl	8003b36 <resetStr>
    	state->responseSize = 0;
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <HAL_UART_TxCpltCallback+0x68>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2200      	movs	r2, #0
 80027d8:	661a      	str	r2, [r3, #96]	; 0x60

//    	Should make a cleanup function for command
    	state->commandReady = 0;
 80027da:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <HAL_UART_TxCpltCallback+0x68>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2200      	movs	r2, #0
 80027e0:	619a      	str	r2, [r3, #24]
    	resetStr(state->response,sizeof(state->response));
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <HAL_UART_TxCpltCallback+0x68>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3344      	adds	r3, #68	; 0x44
 80027e8:	2119      	movs	r1, #25
 80027ea:	4618      	mov	r0, r3
 80027ec:	f001 f9a3 	bl	8003b36 <resetStr>
    	state->commandSize = 0;
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_UART_TxCpltCallback+0x68>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2200      	movs	r2, #0
 80027f6:	63da      	str	r2, [r3, #60]	; 0x3c
    	HAL_UART_Receive_IT(&huart2, (uint8_t*)state->commandByte, 1);
 80027f8:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_UART_TxCpltCallback+0x68>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3335      	adds	r3, #53	; 0x35
 80027fe:	2201      	movs	r2, #1
 8002800:	4619      	mov	r1, r3
 8002802:	4803      	ldr	r0, [pc, #12]	; (8002810 <HAL_UART_TxCpltCallback+0x64>)
 8002804:	f005 fde8 	bl	80083d8 <HAL_UART_Receive_IT>
    }
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	200002a0 	.word	0x200002a0
 8002814:	20000320 	.word	0x20000320

08002818 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]

	if (state->commandByte[0] == '\n'){
 8002820:	4b2f      	ldr	r3, [pc, #188]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002828:	2b0a      	cmp	r3, #10
 800282a:	d139      	bne.n	80028a0 <HAL_UART_RxCpltCallback+0x88>
		if(state->uartEnabled){
 800282c:	4b2c      	ldr	r3, [pc, #176]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002832:	2b00      	cmp	r3, #0
 8002834:	d027      	beq.n	8002886 <HAL_UART_RxCpltCallback+0x6e>
			state->commandMsg[state->commandSize] = state->commandByte[0];
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	4b29      	ldr	r3, [pc, #164]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	f891 1035 	ldrb.w	r1, [r1, #53]	; 0x35
 8002848:	4413      	add	r3, r2
 800284a:	460a      	mov	r2, r1
 800284c:	771a      	strb	r2, [r3, #28]
			state->commandSize = 0;
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2200      	movs	r2, #0
 8002854:	63da      	str	r2, [r3, #60]	; 0x3c
			state->commandReady = 1;
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2201      	movs	r2, #1
 800285c:	619a      	str	r2, [r3, #24]
			state->buttonEnabled = !state->buttonEnabled;
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	665a      	str	r2, [r3, #100]	; 0x64
			HAL_UART_Receive_IT(&huart2, (uint8_t*)state->commandByte, 1);
 8002874:	4b1a      	ldr	r3, [pc, #104]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3335      	adds	r3, #53	; 0x35
 800287a:	2201      	movs	r2, #1
 800287c:	4619      	mov	r1, r3
 800287e:	4819      	ldr	r0, [pc, #100]	; (80028e4 <HAL_UART_RxCpltCallback+0xcc>)
 8002880:	f005 fdaa 	bl	80083d8 <HAL_UART_Receive_IT>
		state->commandMsg[state->commandSize] = state->commandByte[0];
		state->commandSize = state->commandSize + 1;
//		HAL_UART_Transmit_IT(&huart2, (uint8_t*)state->commandMsg, state->commandSize);
		HAL_UART_Receive_IT(&huart2, (uint8_t*)state->commandByte, 1);
	}
}
 8002884:	e027      	b.n	80028d6 <HAL_UART_RxCpltCallback+0xbe>
			state->commandSize = 0;
 8002886:	4b16      	ldr	r3, [pc, #88]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2200      	movs	r2, #0
 800288c:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_UART_Receive_IT(&huart2, (uint8_t*)state->commandByte, 1);
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	3335      	adds	r3, #53	; 0x35
 8002894:	2201      	movs	r2, #1
 8002896:	4619      	mov	r1, r3
 8002898:	4812      	ldr	r0, [pc, #72]	; (80028e4 <HAL_UART_RxCpltCallback+0xcc>)
 800289a:	f005 fd9d 	bl	80083d8 <HAL_UART_Receive_IT>
}
 800289e:	e01a      	b.n	80028d6 <HAL_UART_RxCpltCallback+0xbe>
		state->commandMsg[state->commandSize] = state->commandByte[0];
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 80028a2:	6819      	ldr	r1, [r3, #0]
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ae:	f891 1035 	ldrb.w	r1, [r1, #53]	; 0x35
 80028b2:	4413      	add	r3, r2
 80028b4:	460a      	mov	r2, r1
 80028b6:	771a      	strb	r2, [r3, #28]
		state->commandSize = state->commandSize + 1;
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3201      	adds	r2, #1
 80028c4:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_UART_Receive_IT(&huart2, (uint8_t*)state->commandByte, 1);
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_UART_RxCpltCallback+0xc8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	3335      	adds	r3, #53	; 0x35
 80028cc:	2201      	movs	r2, #1
 80028ce:	4619      	mov	r1, r3
 80028d0:	4804      	ldr	r0, [pc, #16]	; (80028e4 <HAL_UART_RxCpltCallback+0xcc>)
 80028d2:	f005 fd81 	bl	80083d8 <HAL_UART_Receive_IT>
}
 80028d6:	bf00      	nop
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000320 	.word	0x20000320
 80028e4:	200002a0 	.word	0x200002a0

080028e8 <HAL_TIM_IC_CaptureCallback>:
#if 1
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	switch(htim->Channel){
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	7f1b      	ldrb	r3, [r3, #28]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d138      	bne.n	800296a <HAL_TIM_IC_CaptureCallback+0x82>
	case HAL_TIM_ACTIVE_CHANNEL_1:

		if((HAL_GetTick()-tempSense->startTime) >= 55){
 80028f8:	f001 fd1c 	bl	8004334 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b36      	cmp	r3, #54	; 0x36
 8002908:	d914      	bls.n	8002934 <HAL_TIM_IC_CaptureCallback+0x4c>
			if(tempSense->digitalBegin == 0){
 800290a:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x90>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d12c      	bne.n	800296e <HAL_TIM_IC_CaptureCallback+0x86>
				tempSense->digitalBegin = 1;
 8002914:	4b18      	ldr	r3, [pc, #96]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2201      	movs	r2, #1
 800291a:	601a      	str	r2, [r3, #0]
				tempSense->startTime = HAL_GetTick();
 800291c:	f001 fd0a 	bl	8004334 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
				tempSense->tspRaw ++;
 8002928:	4b13      	ldr	r3, [pc, #76]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x90>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	3201      	adds	r2, #1
 8002930:	609a      	str	r2, [r3, #8]
				tempSense->tspRaw ++;
			}
		}


		break;
 8002932:	e01c      	b.n	800296e <HAL_TIM_IC_CaptureCallback+0x86>
			if(tempSense->digitalBegin == 0){
 8002934:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <HAL_TIM_IC_CaptureCallback+0x76>
				tempSense->digitalBegin = 1;
 800293e:	4b0e      	ldr	r3, [pc, #56]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]
				tempSense->startTime = HAL_GetTick();
 8002946:	f001 fcf5 	bl	8004334 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	4b0a      	ldr	r3, [pc, #40]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x90>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
				tempSense->tspRaw ++;
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689a      	ldr	r2, [r3, #8]
 8002958:	3201      	adds	r2, #1
 800295a:	609a      	str	r2, [r3, #8]
		break;
 800295c:	e007      	b.n	800296e <HAL_TIM_IC_CaptureCallback+0x86>
				tempSense->tspRaw ++;
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	3201      	adds	r2, #1
 8002966:	609a      	str	r2, [r3, #8]
		break;
 8002968:	e001      	b.n	800296e <HAL_TIM_IC_CaptureCallback+0x86>
	default:
		__NOP();
 800296a:	bf00      	nop
		break;
 800296c:	e000      	b.n	8002970 <HAL_TIM_IC_CaptureCallback+0x88>
		break;
 800296e:	bf00      	nop
	}
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	20000324 	.word	0x20000324

0800297c <HAL_TIM_PeriodElapsedCallback>:
#endif

#if 1
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0c      	ldr	r2, [pc, #48]	; (80029bc <HAL_TIM_PeriodElapsedCallback+0x40>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d112      	bne.n	80029b4 <HAL_TIM_PeriodElapsedCallback+0x38>
		if((HAL_GetTick()-tempSense->startTime) >= 55){
 800298e:	f001 fcd1 	bl	8004334 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	4b0a      	ldr	r3, [pc, #40]	; (80029c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b36      	cmp	r3, #54	; 0x36
 800299e:	d908      	bls.n	80029b2 <HAL_TIM_PeriodElapsedCallback+0x36>
			tempSense->digitalBegin = 0;
 80029a0:	4b07      	ldr	r3, [pc, #28]	; (80029c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
			tempSense->tspRaw = 0;
 80029a8:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
		}
		else{
			__NOP();
		}
	}
}
 80029b0:	e000      	b.n	80029b4 <HAL_TIM_PeriodElapsedCallback+0x38>
			__NOP();
 80029b2:	bf00      	nop
}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40000400 	.word	0x40000400
 80029c0:	20000324 	.word	0x20000324

080029c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029c8:	b672      	cpsid	i
}
 80029ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029cc:	e7fe      	b.n	80029cc <Error_Handler+0x8>
	...

080029d0 <progInit>:
powerSensor* powerMeasure;
dateTime* sDateTime;
calibValue* calibVals;
timeMenu* tMenu;

void progInit(progStates* state){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

	state->mode = SMODE_SP;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	601a      	str	r2, [r3, #0]
	state->modeState = IDEAL;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	605a      	str	r2, [r3, #4]
	state->targetLed = D2_Pin;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029ea:	811a      	strh	r2, [r3, #8]
	state->tickLedMax = D2_TICKS;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2264      	movs	r2, #100	; 0x64
 80029f0:	615a      	str	r2, [r3, #20]
	resetStr(state->commandMsg,sizeof(state->commandMsg));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	331c      	adds	r3, #28
 80029f6:	2119      	movs	r1, #25
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 f89c 	bl	8003b36 <resetStr>
	resetStr(state->response,sizeof(state->response));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3344      	adds	r3, #68	; 0x44
 8002a02:	2119      	movs	r1, #25
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 f896 	bl	8003b36 <resetStr>
	state->buttonEnabled = 1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	665a      	str	r2, [r3, #100]	; 0x64
	state->uartEnabled = 1;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	669a      	str	r2, [r3, #104]	; 0x68
	HAL_GPIO_WritePin(GPIOB, D4_Pin, GPIO_PIN_SET);
 8002a16:	2201      	movs	r2, #1
 8002a18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a1c:	4803      	ldr	r0, [pc, #12]	; (8002a2c <progInit+0x5c>)
 8002a1e:	f002 fff5 	bl	8005a0c <HAL_GPIO_WritePin>
}
 8002a22:	bf00      	nop
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	40020400 	.word	0x40020400

08002a30 <tempSensorInit>:

void tempSensorInit(tempSensor* tempSense){
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	tempSense->startTime = HAL_GetTick();
 8002a38:	f001 fc7c 	bl	8004334 <HAL_GetTick>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	461a      	mov	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	605a      	str	r2, [r3, #4]
	tempSense->numSamples = (uint32_t) (sizeof(tempSense->digitalSamples) / sizeof(tempSense->digitalSamples[0]));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	220a      	movs	r2, #10
 8002a48:	615a      	str	r2, [r3, #20]
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	0000      	movs	r0, r0
 8002a54:	0000      	movs	r0, r0
	...

08002a58 <calibIinit>:

void calibIinit(calibValue* calibVal){
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

	calibVal->beta = -0.004;
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	a30a      	add	r3, pc, #40	; (adr r3, 8002a8c <calibIinit+0x34>)
 8002a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a68:	e9c1 2304 	strd	r2, r3, [r1, #16]
	calibVal->tSTC = 25;
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <calibIinit+0x30>)
 8002a74:	e9c1 2306 	strd	r2, r3, [r1, #24]

}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	f3af 8000 	nop.w
 8002a88:	40390000 	.word	0x40390000
 8002a8c:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a90:	bf70624d 	.word	0xbf70624d

08002a94 <enviroment_resp>:

void enviroment_resp(progStates* state, tempSensor* tempMeasure){
 8002a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a98:	b08d      	sub	sp, #52	; 0x34
 8002a9a:	af02      	add	r7, sp, #8
 8002a9c:	60f8      	str	r0, [r7, #12]
 8002a9e:	60b9      	str	r1, [r7, #8]

#if 1

	if(state->mode == SMODE_CALB){
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d146      	bne.n	8002b36 <enviroment_resp+0xa2>
 8002aa8:	466b      	mov	r3, sp
 8002aaa:	461c      	mov	r4, r3
		uint32_t messageLen = 18;
 8002aac:	2312      	movs	r3, #18
 8002aae:	61bb      	str	r3, [r7, #24]
		char tempStr[messageLen];
 8002ab0:	69b9      	ldr	r1, [r7, #24]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	6039      	str	r1, [r7, #0]
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	e9d7 5600 	ldrd	r5, r6, [r7]
 8002aca:	4630      	mov	r0, r6
 8002acc:	00c3      	lsls	r3, r0, #3
 8002ace:	4628      	mov	r0, r5
 8002ad0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	00c2      	lsls	r2, r0, #3
 8002ad8:	2300      	movs	r3, #0
 8002ada:	468a      	mov	sl, r1
 8002adc:	469b      	mov	fp, r3
 8002ade:	f04f 0200 	mov.w	r2, #0
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002aea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002aee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002af2:	1dcb      	adds	r3, r1, #7
 8002af4:	08db      	lsrs	r3, r3, #3
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	ebad 0d03 	sub.w	sp, sp, r3
 8002afc:	ab02      	add	r3, sp, #8
 8002afe:	3300      	adds	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
		sprintf(tempStr,"&_%03d_%03d_%05d_*\n", tempMeasure->taCPMM, tempMeasure->tspCPMM, tempMeasure->luxPMM );
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	460b      	mov	r3, r1
 8002b18:	492b      	ldr	r1, [pc, #172]	; (8002bc8 <enviroment_resp+0x134>)
 8002b1a:	6938      	ldr	r0, [r7, #16]
 8002b1c:	f006 fca4 	bl	8009468 <siprintf>
		strcpy(state->response, tempStr);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	3344      	adds	r3, #68	; 0x44
 8002b24:	6939      	ldr	r1, [r7, #16]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f006 fcbe 	bl	80094a8 <strcpy>
		state->responseSize = messageLen;
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	661a      	str	r2, [r3, #96]	; 0x60
 8002b32:	46a5      	mov	sp, r4

	strcpy(state->response, tempStr);
	state->responseSize = messageLen;
	state->responseReady = 1;
#endif
}
 8002b34:	e043      	b.n	8002bbe <enviroment_resp+0x12a>
	else{
 8002b36:	466b      	mov	r3, sp
 8002b38:	461e      	mov	r6, r3
		uint32_t messageLen = 18;
 8002b3a:	2312      	movs	r3, #18
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
		char tempStr[messageLen];
 8002b3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b40:	460b      	mov	r3, r1
 8002b42:	3b01      	subs	r3, #1
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	2300      	movs	r3, #0
 8002b48:	4688      	mov	r8, r1
 8002b4a:	4699      	mov	r9, r3
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b60:	2300      	movs	r3, #0
 8002b62:	460c      	mov	r4, r1
 8002b64:	461d      	mov	r5, r3
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	00eb      	lsls	r3, r5, #3
 8002b70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b74:	00e2      	lsls	r2, r4, #3
 8002b76:	1dcb      	adds	r3, r1, #7
 8002b78:	08db      	lsrs	r3, r3, #3
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	ebad 0d03 	sub.w	sp, sp, r3
 8002b80:	ab02      	add	r3, sp, #8
 8002b82:	3300      	adds	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
		sprintf(tempStr,"&_%03d_%03d_%05d_*\n", tempMeasure->taC, tempMeasure->tspC, tempMeasure->lux );
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	490a      	ldr	r1, [pc, #40]	; (8002bc8 <enviroment_resp+0x134>)
 8002b9e:	69f8      	ldr	r0, [r7, #28]
 8002ba0:	f006 fc62 	bl	8009468 <siprintf>
		strcpy(state->response, tempStr);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	3344      	adds	r3, #68	; 0x44
 8002ba8:	69f9      	ldr	r1, [r7, #28]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f006 fc7c 	bl	80094a8 <strcpy>
		state->responseSize = messageLen;
 8002bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	661a      	str	r2, [r3, #96]	; 0x60
		state->responseReady = 1;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
 8002bbc:	46b5      	mov	sp, r6
}
 8002bbe:	bf00      	nop
 8002bc0:	372c      	adds	r7, #44	; 0x2c
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bc8:	0800ab40 	.word	0x0800ab40

08002bcc <solarMeasure_resp>:

void solarMeasure_resp(progStates* state, powerSensor* powerMeasure){
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b091      	sub	sp, #68	; 0x44
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
	state->responseSize = 21;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2215      	movs	r2, #21
 8002bda:	661a      	str	r2, [r3, #96]	; 0x60

	if(state->mode == SMODE_CALB){
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d127      	bne.n	8002c34 <solarMeasure_resp+0x68>
		char tempStr[22] = "";
 8002be4:	2300      	movs	r3, #0
 8002be6:	623b      	str	r3, [r7, #32]
 8002be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	821a      	strh	r2, [r3, #16]
		sprintf(tempStr, "&_%04d_%03d_%03d_%03d_*\n", (int)powerMeasure->vPMM, (int)powerMeasure->iPMM, (int)powerMeasure->PMM, (int)powerMeasure->efficiency);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c02:	461c      	mov	r4, r3
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c08:	461a      	mov	r2, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c10:	f107 0020 	add.w	r0, r7, #32
 8002c14:	9301      	str	r3, [sp, #4]
 8002c16:	9200      	str	r2, [sp, #0]
 8002c18:	4623      	mov	r3, r4
 8002c1a:	460a      	mov	r2, r1
 8002c1c:	491c      	ldr	r1, [pc, #112]	; (8002c90 <solarMeasure_resp+0xc4>)
 8002c1e:	f006 fc23 	bl	8009468 <siprintf>
		strcpy(state->response,tempStr);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3344      	adds	r3, #68	; 0x44
 8002c26:	f107 0220 	add.w	r2, r7, #32
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f006 fc3b 	bl	80094a8 <strcpy>

		state->responseReady = 1;
	}


}
 8002c32:	e029      	b.n	8002c88 <solarMeasure_resp+0xbc>
		char tempStr[22] = "";
 8002c34:	2300      	movs	r3, #0
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	821a      	strh	r2, [r3, #16]
		sprintf(tempStr, "&_%04d_%03d_%03d_%03d_*\n", (int)powerMeasure->vPMM, (int)powerMeasure->iPMM, (int)powerMeasure->PMM, (int)powerMeasure->efficiency);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c52:	461c      	mov	r4, r3
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	461a      	mov	r2, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c60:	f107 0008 	add.w	r0, r7, #8
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	9200      	str	r2, [sp, #0]
 8002c68:	4623      	mov	r3, r4
 8002c6a:	460a      	mov	r2, r1
 8002c6c:	4908      	ldr	r1, [pc, #32]	; (8002c90 <solarMeasure_resp+0xc4>)
 8002c6e:	f006 fbfb 	bl	8009468 <siprintf>
		strcpy(state->response,tempStr);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3344      	adds	r3, #68	; 0x44
 8002c76:	f107 0208 	add.w	r2, r7, #8
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f006 fc13 	bl	80094a8 <strcpy>
		state->responseReady = 1;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c88:	bf00      	nop
 8002c8a:	373c      	adds	r7, #60	; 0x3c
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd90      	pop	{r4, r7, pc}
 8002c90:	0800ab54 	.word	0x0800ab54

08002c94 <setAdcChannel>:
	}
#endif

}

void setAdcChannel(uint32_t channel, ADC_HandleTypeDef* hadc1){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]

	ADC_ChannelConfTypeDef sConfig = {0};
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]
	sConfig.Channel = channel;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = 1;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	613b      	str	r3, [r7, #16]
	if (HAL_ADC_ConfigChannel(hadc1, &sConfig) != HAL_OK)
 8002cb8:	f107 0308 	add.w	r3, r7, #8
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	6838      	ldr	r0, [r7, #0]
 8002cc0:	f001 fe5a 	bl	8004978 <HAL_ADC_ConfigChannel>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <setAdcChannel+0x3a>
	{
		Error_Handler();
 8002cca:	f7ff fe7b 	bl	80029c4 <Error_Handler>
	}
}
 8002cce:	bf00      	nop
 8002cd0:	3718      	adds	r7, #24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <EN_Measure>:

void EN_Measure(progStates* state, tempSensor* temp, lcdScreen* screen){
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]

	if (state->mode != SMODE_EN){
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d025      	beq.n	8002d38 <EN_Measure+0x60>
		HAL_GPIO_WritePin(GPIOB, D2_Pin, 0);
 8002cec:	2200      	movs	r2, #0
 8002cee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002cf2:	4839      	ldr	r0, [pc, #228]	; (8002dd8 <EN_Measure+0x100>)
 8002cf4:	f002 fe8a 	bl	8005a0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, D4_Pin, GPIO_PIN_SET);
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002cfe:	4836      	ldr	r0, [pc, #216]	; (8002dd8 <EN_Measure+0x100>)
 8002d00:	f002 fe84 	bl	8005a0c <HAL_GPIO_WritePin>
//		screen->screenClear = 1;
//		screen->currentDisplay = 2;
		screen->updateScreen = 1;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	605a      	str	r2, [r3, #4]
		state->ledFlash = 1;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	60da      	str	r2, [r3, #12]
		state->targetLed = LED3;
 8002d10:	4b32      	ldr	r3, [pc, #200]	; (8002ddc <EN_Measure+0x104>)
 8002d12:	881a      	ldrh	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	811a      	strh	r2, [r3, #8]
		state->tickLedMax = D3_TICKS;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2232      	movs	r2, #50	; 0x32
 8002d1c:	615a      	str	r2, [r3, #20]
		state->ticks = 0;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	611a      	str	r2, [r3, #16]
		state->mode = SMODE_EN;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
		state->modeState = MEASURE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	605a      	str	r2, [r3, #4]
		state->commandSize = 0;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	63da      	str	r2, [r3, #60]	; 0x3c
			__NOP();
			break;

		}
	}
}
 8002d36:	e04b      	b.n	8002dd0 <EN_Measure+0xf8>
		switch (state->modeState){
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <EN_Measure+0x6e>
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d014      	beq.n	8002d6e <EN_Measure+0x96>
 8002d44:	e042      	b.n	8002dcc <EN_Measure+0xf4>
			state->ledFlash = 1;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	60da      	str	r2, [r3, #12]
			state->targetLed = LED3;
 8002d4c:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <EN_Measure+0x104>)
 8002d4e:	881a      	ldrh	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	811a      	strh	r2, [r3, #8]
			state->modeState = MEASURE;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	605a      	str	r2, [r3, #4]
			state->tickLedMax = D3_TICKS;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2232      	movs	r2, #50	; 0x32
 8002d5e:	615a      	str	r2, [r3, #20]
			state->modeState = MEASURE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	605a      	str	r2, [r3, #4]
			screen->currentDisplay = 2;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	609a      	str	r2, [r3, #8]
			break;
 8002d6c:	e030      	b.n	8002dd0 <EN_Measure+0xf8>
			taToTemp(tempSense);
 8002d6e:	4b1c      	ldr	r3, [pc, #112]	; (8002de0 <EN_Measure+0x108>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fb2c 	bl	80033d0 <taToTemp>
			tspToTemp(tempSense);
 8002d78:	4b19      	ldr	r3, [pc, #100]	; (8002de0 <EN_Measure+0x108>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fae9 	bl	8003354 <tspToTemp>
			toLuxTrue(tempSense);
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <EN_Measure+0x108>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 fb66 	bl	8003458 <toLuxTrue>
			enviroment_resp(state, temp);
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7ff fe80 	bl	8002a94 <enviroment_resp>
			setDisplayMode2(screen, temp);
 8002d94:	68b9      	ldr	r1, [r7, #8]
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 fdb0 	bl	80038fc <setDisplayMode2>
			screen->updateScreen = 1;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	605a      	str	r2, [r3, #4]
			screen->currentDisplay = 2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	609a      	str	r2, [r3, #8]
			state->ledFlash = 0;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	60da      	str	r2, [r3, #12]
			state->modeState = IDEAL;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	605a      	str	r2, [r3, #4]
			if(state->buttonEnabled){
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <EN_Measure+0xec>
				state->uartEnabled = 1;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	669a      	str	r2, [r3, #104]	; 0x68
			break;
 8002dc2:	e005      	b.n	8002dd0 <EN_Measure+0xf8>
				state->buttonEnabled = 1;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	665a      	str	r2, [r3, #100]	; 0x64
			break;
 8002dca:	e001      	b.n	8002dd0 <EN_Measure+0xf8>
			__NOP();
 8002dcc:	bf00      	nop
			break;
 8002dce:	bf00      	nop
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40020400 	.word	0x40020400
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	20000324 	.word	0x20000324

08002de4 <SP_Measure>:

void SP_Measure(progStates* state, powerSensor* powerMeasure, calibValue* calibVal, lcdScreen* screen){
 8002de4:	b5b0      	push	{r4, r5, r7, lr}
 8002de6:	b08c      	sub	sp, #48	; 0x30
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
 8002df0:	603b      	str	r3, [r7, #0]
	if (state->mode != SMODE_SP){
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d032      	beq.n	8002e60 <SP_Measure+0x7c>
		HAL_GPIO_WritePin(GPIOB, D3_Pin, 0); // Turn off previous state's led.
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e00:	4872      	ldr	r0, [pc, #456]	; (8002fcc <SP_Measure+0x1e8>)
 8002e02:	f002 fe03 	bl	8005a0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, D4_Pin, GPIO_PIN_SET);
 8002e06:	2201      	movs	r2, #1
 8002e08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e0c:	486f      	ldr	r0, [pc, #444]	; (8002fcc <SP_Measure+0x1e8>)
 8002e0e:	f002 fdfd 	bl	8005a0c <HAL_GPIO_WritePin>
		state->ledFlash = 1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	60da      	str	r2, [r3, #12]
		state->targetLed = D2_Pin;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e1e:	811a      	strh	r2, [r3, #8]
		state->tickLedMax = D2_TICKS;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2264      	movs	r2, #100	; 0x64
 8002e24:	615a      	str	r2, [r3, #20]
		state->ticks = 0;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
		state->mode = SMODE_SP;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	601a      	str	r2, [r3, #0]
		state->modeState = MEASURE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	605a      	str	r2, [r3, #4]
		state->commandSize = 0;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	63da      	str	r2, [r3, #60]	; 0x3c
		powerMeasure->isMeasure = 0;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		powerMeasure->PMM = 0;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	671a      	str	r2, [r3, #112]	; 0x70
		powerMeasure->vPMM = 0;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	675a      	str	r2, [r3, #116]	; 0x74
		powerMeasure->iPMM = 0;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2200      	movs	r2, #0
 8002e56:	679a      	str	r2, [r3, #120]	; 0x78
//		screen->screenClear = 1;
		screen->updateScreen = 1;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	605a      	str	r2, [r3, #4]
			break;

		}
	}

}
 8002e5e:	e0b0      	b.n	8002fc2 <SP_Measure+0x1de>
		switch (state->modeState){
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <SP_Measure+0x8a>
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d01b      	beq.n	8002ea4 <SP_Measure+0xc0>
 8002e6c:	e0a7      	b.n	8002fbe <SP_Measure+0x1da>
			state->ledFlash = 1;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	60da      	str	r2, [r3, #12]
			state->modeState = MEASURE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	605a      	str	r2, [r3, #4]
			screen->updateScreen = 1;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	605a      	str	r2, [r3, #4]
			powerMeasure->isMeasure  = 1;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			powerMeasure->PMM = 0;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	671a      	str	r2, [r3, #112]	; 0x70
			powerMeasure->vPMM = 0;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2200      	movs	r2, #0
 8002e92:	675a      	str	r2, [r3, #116]	; 0x74
			powerMeasure->iPMM = 0;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2200      	movs	r2, #0
 8002e98:	679a      	str	r2, [r3, #120]	; 0x78
			TIM2->CCR1 = 39;
 8002e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e9e:	2227      	movs	r2, #39	; 0x27
 8002ea0:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002ea2:	e08e      	b.n	8002fc2 <SP_Measure+0x1de>
			solarMeasure_resp(state, powerMeasure);
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f7ff fe90 	bl	8002bcc <solarMeasure_resp>
			screen->updateScreen = 1;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	605a      	str	r2, [r3, #4]
			screen->currentDisplay = 1;
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	609a      	str	r2, [r3, #8]
			state->ledFlash = 0;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	60da      	str	r2, [r3, #12]
			state->modeState = IDEAL;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	605a      	str	r2, [r3, #4]
			double pNormDenominator = 1.0 + calibVals->beta*((double)tempSense->tspC - calibVals->tSTC);
 8002ec4:	4b42      	ldr	r3, [pc, #264]	; (8002fd0 <SP_Measure+0x1ec>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002ecc:	4b41      	ldr	r3, [pc, #260]	; (8002fd4 <SP_Measure+0x1f0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fb2d 	bl	8000534 <__aeabi_i2d>
 8002eda:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <SP_Measure+0x1ec>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ee2:	f7fd f9d9 	bl	8000298 <__aeabi_dsub>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4620      	mov	r0, r4
 8002eec:	4629      	mov	r1, r5
 8002eee:	f7fd fb8b 	bl	8000608 <__aeabi_dmul>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <SP_Measure+0x1f4>)
 8002f00:	f7fd f9cc 	bl	800029c <__adddf3>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		    double pNorm = (double) powerMeasure->PMM /  pNormDenominator;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd faff 	bl	8000514 <__aeabi_ui2d>
 8002f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f1a:	f7fd fc9f 	bl	800085c <__aeabi_ddiv>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	e9c7 2308 	strd	r2, r3, [r7, #32]
		    double pNormalized = pNorm * (calibVals->luxCalib/ tempSense->lux);
 8002f26:	4b2a      	ldr	r3, [pc, #168]	; (8002fd0 <SP_Measure+0x1ec>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002f2e:	4b29      	ldr	r3, [pc, #164]	; (8002fd4 <SP_Measure+0x1f0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd fafc 	bl	8000534 <__aeabi_i2d>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4620      	mov	r0, r4
 8002f42:	4629      	mov	r1, r5
 8002f44:	f7fd fc8a 	bl	800085c <__aeabi_ddiv>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f50:	f7fd fb5a 	bl	8000608 <__aeabi_dmul>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	e9c7 2306 	strd	r2, r3, [r7, #24]
		    uint32_t efficiency = (uint32_t) ((pNormalized/calibVals->mppCalib)*100.0);
 8002f5c:	4b1c      	ldr	r3, [pc, #112]	; (8002fd0 <SP_Measure+0x1ec>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f64:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f68:	f7fd fc78 	bl	800085c <__aeabi_ddiv>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	4b18      	ldr	r3, [pc, #96]	; (8002fdc <SP_Measure+0x1f8>)
 8002f7a:	f7fd fb45 	bl	8000608 <__aeabi_dmul>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4610      	mov	r0, r2
 8002f84:	4619      	mov	r1, r3
 8002f86:	f7fd fdef 	bl	8000b68 <__aeabi_d2uiz>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	617b      	str	r3, [r7, #20]
		    powerMeasure->efficiency = efficiency;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			if(state->buttonEnabled){
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <SP_Measure+0x1c2>
				state->uartEnabled = 1;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	669a      	str	r2, [r3, #104]	; 0x68
 8002fa4:	e002      	b.n	8002fac <SP_Measure+0x1c8>
				state->buttonEnabled = 1;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	665a      	str	r2, [r3, #100]	; 0x64
			powerMeasure->isMeasure  = 0;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			setDisplayMode1(screen, powerMeasure);
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	6838      	ldr	r0, [r7, #0]
 8002fb8:	f000 fc50 	bl	800385c <setDisplayMode1>
			break;
 8002fbc:	e001      	b.n	8002fc2 <SP_Measure+0x1de>
			__NOP();
 8002fbe:	bf00      	nop
			break;
 8002fc0:	bf00      	nop
}
 8002fc2:	bf00      	nop
 8002fc4:	3730      	adds	r7, #48	; 0x30
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40020400 	.word	0x40020400
 8002fd0:	20000334 	.word	0x20000334
 8002fd4:	20000324 	.word	0x20000324
 8002fd8:	3ff00000 	.word	0x3ff00000
 8002fdc:	40590000 	.word	0x40590000

08002fe0 <CA_Measure>:

void CA_Measure(calibValue* calibVal, progStates* state, powerSensor* powerMeasure, tempSensor* tempMeasure, lcdScreen* screen, ADC_HandleTypeDef* hadc, UART_HandleTypeDef* huart){
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
	if(state->startedCalib == 0){
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d163      	bne.n	80030be <CA_Measure+0xde>

		powerMeasure->iPMM = 0;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	679a      	str	r2, [r3, #120]	; 0x78
		powerMeasure->vPMM = 0;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	675a      	str	r2, [r3, #116]	; 0x74
		powerMeasure->PMM = 0;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	671a      	str	r2, [r3, #112]	; 0x70

		taToTemp(tempMeasure);
 8003008:	6838      	ldr	r0, [r7, #0]
 800300a:	f000 f9e1 	bl	80033d0 <taToTemp>
		tspToTemp(tempMeasure);
 800300e:	6838      	ldr	r0, [r7, #0]
 8003010:	f000 f9a0 	bl	8003354 <tspToTemp>
		toLuxTrue(tempMeasure);
 8003014:	6838      	ldr	r0, [r7, #0]
 8003016:	f000 fa1f 	bl	8003458 <toLuxTrue>

		setAdcChannel(ADC_CHANNEL_10, hadc);
 800301a:	69f9      	ldr	r1, [r7, #28]
 800301c:	200a      	movs	r0, #10
 800301e:	f7ff fe39 	bl	8002c94 <setAdcChannel>
		HAL_ADC_Start(hadc);
 8003022:	69f8      	ldr	r0, [r7, #28]
 8003024:	f001 f9fa 	bl	800441c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8003028:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800302c:	69f8      	ldr	r0, [r7, #28]
 800302e:	f001 fadc 	bl	80045ea <HAL_ADC_PollForConversion>
		powerMeasure->voltageRaw = HAL_ADC_GetValue(hadc);
 8003032:	69f8      	ldr	r0, [r7, #28]
 8003034:	f001 fc74 	bl	8004920 <HAL_ADC_GetValue>
 8003038:	4602      	mov	r2, r0
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	651a      	str	r2, [r3, #80]	; 0x50
		HAL_ADC_Stop(hadc);
 800303e:	69f8      	ldr	r0, [r7, #28]
 8003040:	f001 faa0 	bl	8004584 <HAL_ADC_Stop>

		setAdcChannel(ADC_CHANNEL_4, hadc);
 8003044:	69f9      	ldr	r1, [r7, #28]
 8003046:	2004      	movs	r0, #4
 8003048:	f7ff fe24 	bl	8002c94 <setAdcChannel>
		HAL_ADC_Start(hadc);
 800304c:	69f8      	ldr	r0, [r7, #28]
 800304e:	f001 f9e5 	bl	800441c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8003052:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003056:	69f8      	ldr	r0, [r7, #28]
 8003058:	f001 fac7 	bl	80045ea <HAL_ADC_PollForConversion>
		powerMeasure->currentVoltageRaw = HAL_ADC_GetValue(hadc);
 800305c:	69f8      	ldr	r0, [r7, #28]
 800305e:	f001 fc5f 	bl	8004920 <HAL_ADC_GetValue>
 8003062:	4602      	mov	r2, r0
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
		HAL_ADC_Stop(hadc);
 8003068:	69f8      	ldr	r0, [r7, #28]
 800306a:	f001 fa8b 	bl	8004584 <HAL_ADC_Stop>

		toPVMeasures(powerMeasure, tempMeasure);
 800306e:	6839      	ldr	r1, [r7, #0]
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fac1 	bl	80035f8 <toPVMeasures>



		state->pwmARR = 39;
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	2227      	movs	r2, #39	; 0x27
 800307a:	679a      	str	r2, [r3, #120]	; 0x78
		state->ledFlash = 1;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2201      	movs	r2, #1
 8003080:	60da      	str	r2, [r3, #12]
		state->targetLed = D4_Pin;
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003088:	811a      	strh	r2, [r3, #8]
		state->tickLedMax = D4_TICKS;
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	22c8      	movs	r2, #200	; 0xc8
 800308e:	615a      	str	r2, [r3, #20]
		state->calPWMIncrTimeStamp = HAL_GetTick();
 8003090:	f001 f950 	bl	8004334 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		state->calStartTime = HAL_GetTick();
 800309c:	f001 f94a 	bl	8004334 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		state->startedCalib = 1;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2201      	movs	r2, #1
 80030ac:	671a      	str	r2, [r3, #112]	; 0x70
		TIM2->CCR1 = 39;
 80030ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030b2:	2227      	movs	r2, #39	; 0x27
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
		state->pwmCRR = 39;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2227      	movs	r2, #39	; 0x27
 80030ba:	67da      	str	r2, [r3, #124]	; 0x7c
			state->buttonEnabled = 1;
			TIM2->CCR1 = state->pwmCRR;

		}
	}
}
 80030bc:	e0f0      	b.n	80032a0 <CA_Measure+0x2c0>
		if( (HAL_GetTick() - state->calStartTime) < 10000 ){
 80030be:	f001 f939 	bl	8004334 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80030d0:	4293      	cmp	r3, r2
 80030d2:	f200 80ce 	bhi.w	8003272 <CA_Measure+0x292>
			if(state->pwmCRR <= 0){
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d151      	bne.n	8003182 <CA_Measure+0x1a2>
				state->modeState = IDEAL;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2200      	movs	r2, #0
 80030e2:	605a      	str	r2, [r3, #4]
				state->pwmCRR = 1;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2201      	movs	r2, #1
 80030e8:	67da      	str	r2, [r3, #124]	; 0x7c
				state->uartEnabled = 1;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2201      	movs	r2, #1
 80030ee:	669a      	str	r2, [r3, #104]	; 0x68
				state->buttonEnabled = 1;
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2201      	movs	r2, #1
 80030f4:	665a      	str	r2, [r3, #100]	; 0x64
				state->startedCalib = 0;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2200      	movs	r2, #0
 80030fa:	671a      	str	r2, [r3, #112]	; 0x70
				state->ledFlash = 0;
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2200      	movs	r2, #0
 8003100:	60da      	str	r2, [r3, #12]
				TIM2->CCR1 = state->pwmCRR;
 8003102:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800310a:	6353      	str	r3, [r2, #52]	; 0x34
				calibVal->luxCalib = tempSense->luxPMM;
 800310c:	4b66      	ldr	r3, [pc, #408]	; (80032a8 <CA_Measure+0x2c8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd fa0d 	bl	8000534 <__aeabi_i2d>
 800311a:	4602      	mov	r2, r0
 800311c:	460b      	mov	r3, r1
 800311e:	68f9      	ldr	r1, [r7, #12]
 8003120:	e9c1 2300 	strd	r2, r3, [r1]
				calibVal->mppCalib = powerMeasure->PMM;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	4618      	mov	r0, r3
 800312a:	f7fd f9f3 	bl	8000514 <__aeabi_ui2d>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	68f9      	ldr	r1, [r7, #12]
 8003134:	e9c1 2302 	strd	r2, r3, [r1, #8]
				enviroment_resp(state, tempMeasure);
 8003138:	6839      	ldr	r1, [r7, #0]
 800313a:	68b8      	ldr	r0, [r7, #8]
 800313c:	f7ff fcaa 	bl	8002a94 <enviroment_resp>
				HAL_UART_Transmit_IT(huart,(uint8_t*) state->response, state->responseSize);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314a:	b29b      	uxth	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	6a38      	ldr	r0, [r7, #32]
 8003150:	f005 f8fd 	bl	800834e <HAL_UART_Transmit_IT>
				while(huart->gState == HAL_UART_STATE_BUSY_TX){
 8003154:	e000      	b.n	8003158 <CA_Measure+0x178>
					__NOP();
 8003156:	bf00      	nop
				while(huart->gState == HAL_UART_STATE_BUSY_TX){
 8003158:	6a3b      	ldr	r3, [r7, #32]
 800315a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b21      	cmp	r3, #33	; 0x21
 8003162:	d0f8      	beq.n	8003156 <CA_Measure+0x176>
				solarMeasure_resp(state, powerMeasure);
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	68b8      	ldr	r0, [r7, #8]
 8003168:	f7ff fd30 	bl	8002bcc <solarMeasure_resp>
				HAL_UART_Transmit_IT(huart,(uint8_t*) state->response, state->responseSize);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	6a38      	ldr	r0, [r7, #32]
 800317c:	f005 f8e7 	bl	800834e <HAL_UART_Transmit_IT>
}
 8003180:	e08e      	b.n	80032a0 <CA_Measure+0x2c0>
				if((HAL_GetTick() - state->calPWMIncrTimeStamp) < 128){
 8003182:	f001 f8d7 	bl	8004334 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b7f      	cmp	r3, #127	; 0x7f
 8003192:	d85d      	bhi.n	8003250 <CA_Measure+0x270>
					taToTemp(tempMeasure);
 8003194:	6838      	ldr	r0, [r7, #0]
 8003196:	f000 f91b 	bl	80033d0 <taToTemp>
					tspToTemp(tempMeasure);
 800319a:	6838      	ldr	r0, [r7, #0]
 800319c:	f000 f8da 	bl	8003354 <tspToTemp>
					toLuxTrue(tempMeasure);
 80031a0:	6838      	ldr	r0, [r7, #0]
 80031a2:	f000 f959 	bl	8003458 <toLuxTrue>
					setAdcChannel(ADC_CHANNEL_10, hadc);
 80031a6:	69f9      	ldr	r1, [r7, #28]
 80031a8:	200a      	movs	r0, #10
 80031aa:	f7ff fd73 	bl	8002c94 <setAdcChannel>
					HAL_ADC_Start(hadc);
 80031ae:	69f8      	ldr	r0, [r7, #28]
 80031b0:	f001 f934 	bl	800441c <HAL_ADC_Start>
					HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 80031b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031b8:	69f8      	ldr	r0, [r7, #28]
 80031ba:	f001 fa16 	bl	80045ea <HAL_ADC_PollForConversion>
					powerMeasure->voltageRaw = HAL_ADC_GetValue(hadc);
 80031be:	69f8      	ldr	r0, [r7, #28]
 80031c0:	f001 fbae 	bl	8004920 <HAL_ADC_GetValue>
 80031c4:	4602      	mov	r2, r0
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	651a      	str	r2, [r3, #80]	; 0x50
					HAL_ADC_Stop(hadc);
 80031ca:	69f8      	ldr	r0, [r7, #28]
 80031cc:	f001 f9da 	bl	8004584 <HAL_ADC_Stop>
					setAdcChannel(ADC_CHANNEL_4, hadc);
 80031d0:	69f9      	ldr	r1, [r7, #28]
 80031d2:	2004      	movs	r0, #4
 80031d4:	f7ff fd5e 	bl	8002c94 <setAdcChannel>
					HAL_ADC_Start(hadc);
 80031d8:	69f8      	ldr	r0, [r7, #28]
 80031da:	f001 f91f 	bl	800441c <HAL_ADC_Start>
					HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 80031de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031e2:	69f8      	ldr	r0, [r7, #28]
 80031e4:	f001 fa01 	bl	80045ea <HAL_ADC_PollForConversion>
					powerMeasure->currentVoltageRaw = HAL_ADC_GetValue(hadc);
 80031e8:	69f8      	ldr	r0, [r7, #28]
 80031ea:	f001 fb99 	bl	8004920 <HAL_ADC_GetValue>
 80031ee:	4602      	mov	r2, r0
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
					HAL_ADC_Stop(hadc);
 80031f4:	69f8      	ldr	r0, [r7, #28]
 80031f6:	f001 f9c5 	bl	8004584 <HAL_ADC_Stop>
					toPVMeasures(powerMeasure, tempMeasure);
 80031fa:	6839      	ldr	r1, [r7, #0]
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f9fb 	bl	80035f8 <toPVMeasures>
					if(powerMeasure->PMM < powerMeasure->power){
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800320a:	429a      	cmp	r2, r3
 800320c:	d21e      	bcs.n	800324c <CA_Measure+0x26c>
						powerMeasure->vPMM =  powerMeasure->solarVoltage;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	675a      	str	r2, [r3, #116]	; 0x74
						powerMeasure->iPMM =  powerMeasure->solarCurrent;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	679a      	str	r2, [r3, #120]	; 0x78
						powerMeasure->PMM = powerMeasure->power;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	671a      	str	r2, [r3, #112]	; 0x70
						tempMeasure->luxPMM = tempMeasure->lux;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
						tempMeasure->taCPMM = tempMeasure->taC;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
						tempMeasure->tspCPMM = tempMeasure->tspC;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800324a:	e029      	b.n	80032a0 <CA_Measure+0x2c0>
						__NOP();
 800324c:	bf00      	nop
}
 800324e:	e027      	b.n	80032a0 <CA_Measure+0x2c0>
					state->pwmCRR = state->pwmCRR - 1;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003254:	1e5a      	subs	r2, r3, #1
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	67da      	str	r2, [r3, #124]	; 0x7c
					TIM2->CCR1 = state->pwmCRR;
 800325a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003262:	6353      	str	r3, [r2, #52]	; 0x34
					state->calPWMIncrTimeStamp = HAL_GetTick();
 8003264:	f001 f866 	bl	8004334 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8003270:	e016      	b.n	80032a0 <CA_Measure+0x2c0>
			state->modeState = IDEAL;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2200      	movs	r2, #0
 8003276:	605a      	str	r2, [r3, #4]
			state->pwmCRR = 1;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2201      	movs	r2, #1
 800327c:	67da      	str	r2, [r3, #124]	; 0x7c
			state->startedCalib = 0;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2200      	movs	r2, #0
 8003282:	671a      	str	r2, [r3, #112]	; 0x70
			state->ledFlash = 0;
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	2200      	movs	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
			state->uartEnabled = 1;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2201      	movs	r2, #1
 800328e:	669a      	str	r2, [r3, #104]	; 0x68
			state->buttonEnabled = 1;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2201      	movs	r2, #1
 8003294:	665a      	str	r2, [r3, #100]	; 0x64
			TIM2->CCR1 = state->pwmCRR;
 8003296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800329e:	6353      	str	r3, [r2, #52]	; 0x34
}
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000324 	.word	0x20000324

080032ac <uart_command_set>:

void uart_command_set(progStates* state){
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
//	Extract the required command.
	char command[2] = "";
 80032b4:	2300      	movs	r3, #0
 80032b6:	82bb      	strh	r3, [r7, #20]
	char EN[2] = "EN";
 80032b8:	f644 6345 	movw	r3, #20037	; 0x4e45
 80032bc:	823b      	strh	r3, [r7, #16]
	char SP[2] = "SP";
 80032be:	f245 0353 	movw	r3, #20563	; 0x5053
 80032c2:	81bb      	strh	r3, [r7, #12]
	char CA[2] = "CA";
 80032c4:	f244 1343 	movw	r3, #16707	; 0x4143
 80032c8:	813b      	strh	r3, [r7, #8]

	command[0] = (char)state->commandMsg[2];
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	7f9b      	ldrb	r3, [r3, #30]
 80032ce:	753b      	strb	r3, [r7, #20]
	command[1] = (char)state->commandMsg[3];
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	7fdb      	ldrb	r3, [r3, #31]
 80032d4:	757b      	strb	r3, [r7, #21]
	}
#endif


#if 1
	if(!strncmp(command,EN,2)){
 80032d6:	f107 0110 	add.w	r1, r7, #16
 80032da:	f107 0314 	add.w	r3, r7, #20
 80032de:	2202      	movs	r2, #2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f006 f8e9 	bl	80094b8 <strncmp>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d103      	bne.n	80032f4 <uart_command_set+0x48>
		state->cmdCall = SMODE_EN;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	639a      	str	r2, [r3, #56]	; 0x38
 80032f2:	e01e      	b.n	8003332 <uart_command_set+0x86>
	}

	else if(!strncmp(command,SP,2)){
 80032f4:	f107 010c 	add.w	r1, r7, #12
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	2202      	movs	r2, #2
 80032fe:	4618      	mov	r0, r3
 8003300:	f006 f8da 	bl	80094b8 <strncmp>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <uart_command_set+0x66>
		state->cmdCall = SMODE_SP;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	639a      	str	r2, [r3, #56]	; 0x38
 8003310:	e00f      	b.n	8003332 <uart_command_set+0x86>
	}

	else if(!strncmp(command,CA,2)){
 8003312:	f107 0108 	add.w	r1, r7, #8
 8003316:	f107 0314 	add.w	r3, r7, #20
 800331a:	2202      	movs	r2, #2
 800331c:	4618      	mov	r0, r3
 800331e:	f006 f8cb 	bl	80094b8 <strncmp>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d103      	bne.n	8003330 <uart_command_set+0x84>
		state->cmdCall = SMODE_CALB;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2203      	movs	r2, #3
 800332c:	639a      	str	r2, [r3, #56]	; 0x38
 800332e:	e000      	b.n	8003332 <uart_command_set+0x86>
	}

	else{
		__NOP();
 8003330:	bf00      	nop
	}
#endif
	state->commandReady = 0;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	619a      	str	r2, [r3, #24]
	resetStr(state->commandMsg,sizeof(state->commandMsg));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	331c      	adds	r3, #28
 800333c:	2119      	movs	r1, #25
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fbf9 	bl	8003b36 <resetStr>
	state->commandSize = 0;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <tspToTemp>:

void tspToTemp(tempSensor* tempMeasure){
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	float tempPulses = (float) intAverage(tempMeasure->digitalSamples, tempMeasure->numSamples);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f103 0218 	add.w	r2, r3, #24
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	4619      	mov	r1, r3
 8003368:	4610      	mov	r0, r2
 800336a:	f000 fbf3 	bl	8003b54 <intAverage>
 800336e:	ee07 0a90 	vmov	s15, r0
 8003372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003376:	edc7 7a03 	vstr	s15, [r7, #12]
	float temp = tempPulses/4096.0;
 800337a:	ed97 7a03 	vldr	s14, [r7, #12]
 800337e:	eddf 6a11 	vldr	s13, [pc, #68]	; 80033c4 <tspToTemp+0x70>
 8003382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003386:	edc7 7a02 	vstr	s15, [r7, #8]
	temp = temp * 256;
 800338a:	edd7 7a02 	vldr	s15, [r7, #8]
 800338e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80033c8 <tspToTemp+0x74>
 8003392:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003396:	edc7 7a02 	vstr	s15, [r7, #8]
	temp  = temp - 50;
 800339a:	edd7 7a02 	vldr	s15, [r7, #8]
 800339e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80033cc <tspToTemp+0x78>
 80033a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033a6:	edc7 7a02 	vstr	s15, [r7, #8]
	tempMeasure->tspC = temp;
 80033aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80033ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033b2:	ee17 2a90 	vmov	r2, s15
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	45800000 	.word	0x45800000
 80033c8:	43800000 	.word	0x43800000
 80033cc:	42480000 	.word	0x42480000

080033d0 <taToTemp>:

void taToTemp(tempSensor* tempMeasure){
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
	double tempAdcMeasure = (double) intAverage(tempMeasure->analogSamples, tempMeasure->numSamples);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	4619      	mov	r1, r3
 80033e4:	4610      	mov	r0, r2
 80033e6:	f000 fbb5 	bl	8003b54 <intAverage>
 80033ea:	4603      	mov	r3, r0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7fd f891 	bl	8000514 <__aeabi_ui2d>
 80033f2:	4602      	mov	r2, r0
 80033f4:	460b      	mov	r3, r1
 80033f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double temp = tempAdcMeasure;
 80033fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80033fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp = temp * (22.0/273.0);
 8003402:	a311      	add	r3, pc, #68	; (adr r3, 8003448 <taToTemp+0x78>)
 8003404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003408:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800340c:	f7fd f8fc 	bl	8000608 <__aeabi_dmul>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	e9c7 2302 	strd	r2, r3, [r7, #8]
	temp = temp - 273.0;
 8003418:	a30d      	add	r3, pc, #52	; (adr r3, 8003450 <taToTemp+0x80>)
 800341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003422:	f7fc ff39 	bl	8000298 <__aeabi_dsub>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tempMeasure->taC = (uint32_t) temp;
 800342e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003432:	f7fd fb99 	bl	8000b68 <__aeabi_d2uiz>
 8003436:	4603      	mov	r3, r0
 8003438:	461a      	mov	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
}
 8003440:	bf00      	nop
 8003442:	3718      	adds	r7, #24
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	14a14a15 	.word	0x14a14a15
 800344c:	3fb4a14a 	.word	0x3fb4a14a
 8003450:	00000000 	.word	0x00000000
 8003454:	40711000 	.word	0x40711000

08003458 <toLuxTrue>:

void toLuxTrue(tempSensor* tempMeasure){
 8003458:	b580      	push	{r7, lr}
 800345a:	b090      	sub	sp, #64	; 0x40
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
//	Equation Vout = (LUX)^(1.01337) * (10)^(-1.3299) * Rp * 10^(-6)
//	Design LUX = 500000; make LUX subject of equation
#if 1 //My attempt
	double Rref = 11000.0;
 8003460:	a333      	add	r3, pc, #204	; (adr r3, 8003530 <toLuxTrue+0xd8>)
 8003462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003466:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double luxAdcMeasure = (double) intAverage(tempMeasure->luxSamples, tempMeasure->numSamples);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f000 fb6c 	bl	8003b54 <intAverage>
 800347c:	4603      	mov	r3, r0
 800347e:	4618      	mov	r0, r3
 8003480:	f7fd f848 	bl	8000514 <__aeabi_ui2d>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double Vout = (luxAdcMeasure / 4095.0) * 3.3;
 800348c:	a32a      	add	r3, pc, #168	; (adr r3, 8003538 <toLuxTrue+0xe0>)
 800348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003492:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003496:	f7fd f9e1 	bl	800085c <__aeabi_ddiv>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4610      	mov	r0, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	a327      	add	r3, pc, #156	; (adr r3, 8003540 <toLuxTrue+0xe8>)
 80034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a8:	f7fd f8ae 	bl	8000608 <__aeabi_dmul>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double exponent = pow(1.013366679, -1.0);
 80034b4:	a324      	add	r3, pc, #144	; (adr r3, 8003548 <toLuxTrue+0xf0>)
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double denominator = Rref * pow(10.0, -7.13298628);;
 80034be:	a324      	add	r3, pc, #144	; (adr r3, 8003550 <toLuxTrue+0xf8>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80034c8:	f7fd f89e 	bl	8000608 <__aeabi_dmul>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double base = Vout / denominator;
 80034d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80034dc:	f7fd f9be 	bl	800085c <__aeabi_ddiv>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double tempLux = pow(base,exponent);
 80034e8:	ed97 1b08 	vldr	d1, [r7, #32]
 80034ec:	ed97 0b04 	vldr	d0, [r7, #16]
 80034f0:	f006 fbf0 	bl	8009cd4 <pow>
 80034f4:	ed87 0b02 	vstr	d0, [r7, #8]
	double luxAdcMeasure = (double) intAverage(tempMeasure->luxSamples, tempMeasure->numSamples);
	double Vout = (luxAdcMeasure / 4095.0) * 3.3;
	double tempLux = (((Vout/Rref)-(0.02*(0.000001)))/(8.02*(0.00000001)));
#endif

	tempMeasure->lux = (uint32_t) fmin(tempLux, 99999.0);
 80034f8:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8003528 <toLuxTrue+0xd0>
 80034fc:	ed97 0b02 	vldr	d0, [r7, #8]
 8003500:	f006 fb97 	bl	8009c32 <fmin>
 8003504:	ec53 2b10 	vmov	r2, r3, d0
 8003508:	4610      	mov	r0, r2
 800350a:	4619      	mov	r1, r3
 800350c:	f7fd fb2c 	bl	8000b68 <__aeabi_d2uiz>
 8003510:	4603      	mov	r3, r0
 8003512:	461a      	mov	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 800351a:	bf00      	nop
 800351c:	3740      	adds	r7, #64	; 0x40
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	f3af 8000 	nop.w
 8003528:	00000000 	.word	0x00000000
 800352c:	40f869f0 	.word	0x40f869f0
 8003530:	00000000 	.word	0x00000000
 8003534:	40c57c00 	.word	0x40c57c00
 8003538:	00000000 	.word	0x00000000
 800353c:	40affe00 	.word	0x40affe00
 8003540:	66666666 	.word	0x66666666
 8003544:	400a6666 	.word	0x400a6666
 8003548:	cb52727c 	.word	0xcb52727c
 800354c:	3fef93f1 	.word	0x3fef93f1
 8003550:	2391ef3c 	.word	0x2391ef3c
 8003554:	3e73c356 	.word	0x3e73c356

08003558 <toVoltageMeasure>:

void toVoltageMeasure(powerSensor* powerMeasure){
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
//	This function converts the adc value to the measured voltages.

	double adcResolution = 4095.0;
 8003560:	a321      	add	r3, pc, #132	; (adr r3, 80035e8 <toVoltageMeasure+0x90>)
 8003562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003566:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double voltageMeasure = (double) powerMeasure->voltageRaw * 3.3;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356e:	4618      	mov	r0, r3
 8003570:	f7fc ffd0 	bl	8000514 <__aeabi_ui2d>
 8003574:	a31e      	add	r3, pc, #120	; (adr r3, 80035f0 <toVoltageMeasure+0x98>)
 8003576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357a:	f7fd f845 	bl	8000608 <__aeabi_dmul>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double currentVoltageMeasure = (double) powerMeasure->currentVoltageRaw * 3.3;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	4618      	mov	r0, r3
 800358c:	f7fc ffc2 	bl	8000514 <__aeabi_ui2d>
 8003590:	a317      	add	r3, pc, #92	; (adr r3, 80035f0 <toVoltageMeasure+0x98>)
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f7fd f837 	bl	8000608 <__aeabi_dmul>
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	e9c7 2302 	strd	r2, r3, [r7, #8]

	voltageMeasure = voltageMeasure / adcResolution;
 80035a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035aa:	f7fd f957 	bl	800085c <__aeabi_ddiv>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	currentVoltageMeasure =  currentVoltageMeasure / adcResolution;
 80035b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035be:	f7fd f94d 	bl	800085c <__aeabi_ddiv>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	e9c7 2302 	strd	r2, r3, [r7, #8]

	powerMeasure->voltage = (voltageMeasure);
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035d0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	powerMeasure->currentVoltage = (currentVoltageMeasure);
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035da:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

}
 80035de:	bf00      	nop
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	00000000 	.word	0x00000000
 80035ec:	40affe00 	.word	0x40affe00
 80035f0:	66666666 	.word	0x66666666
 80035f4:	400a6666 	.word	0x400a6666

080035f8 <toPVMeasures>:

void toPVMeasures(powerSensor* powerMeasure, tempSensor* tempMeasure){
 80035f8:	b5b0      	push	{r4, r5, r7, lr}
 80035fa:	b098      	sub	sp, #96	; 0x60
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]

	toVoltageMeasure(powerMeasure);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ffa8 	bl	8003558 <toVoltageMeasure>

	double R1 = 13400.0;
 8003608:	a367      	add	r3, pc, #412	; (adr r3, 80037a8 <toPVMeasures+0x1b0>)
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double R2 = 6600.0;
 8003612:	a367      	add	r3, pc, #412	; (adr r3, 80037b0 <toPVMeasures+0x1b8>)
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double R3 = 13220.0;
 800361c:	a366      	add	r3, pc, #408	; (adr r3, 80037b8 <toPVMeasures+0x1c0>)
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double R4 = 6600.0;
 8003626:	a362      	add	r3, pc, #392	; (adr r3, 80037b0 <toPVMeasures+0x1b8>)
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double Rsense = 10.0;
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	4b5a      	ldr	r3, [pc, #360]	; (80037a0 <toPVMeasures+0x1a8>)
 8003636:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	double vOutSolar = powerMeasure->voltage * (R3 + R4);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8003640:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003644:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003648:	f7fc fe28 	bl	800029c <__adddf3>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4620      	mov	r0, r4
 8003652:	4629      	mov	r1, r5
 8003654:	f7fc ffd8 	bl	8000608 <__aeabi_dmul>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	vOutSolar = (vOutSolar / R4);
 8003660:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003664:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003668:	f7fd f8f8 	bl	800085c <__aeabi_ddiv>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	double vk = powerMeasure->currentVoltage * (R1 + R2);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 800367a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800367e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003682:	f7fc fe0b 	bl	800029c <__adddf3>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4620      	mov	r0, r4
 800368c:	4629      	mov	r1, r5
 800368e:	f7fc ffbb 	bl	8000608 <__aeabi_dmul>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	vk = vk / R2 ;
 800369a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800369e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80036a2:	f7fd f8db 	bl	800085c <__aeabi_ddiv>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double solarCurrent = (vOutSolar - vk) / Rsense;
 80036ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036b2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80036b6:	f7fc fdef 	bl	8000298 <__aeabi_dsub>
 80036ba:	4602      	mov	r2, r0
 80036bc:	460b      	mov	r3, r1
 80036be:	4610      	mov	r0, r2
 80036c0:	4619      	mov	r1, r3
 80036c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036c6:	f7fd f8c9 	bl	800085c <__aeabi_ddiv>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double vOutSolarMV = vOutSolar * 1000.0;
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	4b33      	ldr	r3, [pc, #204]	; (80037a4 <toPVMeasures+0x1ac>)
 80036d8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80036dc:	f7fc ff94 	bl	8000608 <__aeabi_dmul>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double solarCurrentMA = solarCurrent * 1000.0;
 80036e8:	f04f 0200 	mov.w	r2, #0
 80036ec:	4b2d      	ldr	r3, [pc, #180]	; (80037a4 <toPVMeasures+0x1ac>)
 80036ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80036f2:	f7fc ff89 	bl	8000608 <__aeabi_dmul>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double power = (solarCurrent * vOutSolar) * 1000.0;
 80036fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003702:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003706:	f7fc ff7f 	bl	8000608 <__aeabi_dmul>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4610      	mov	r0, r2
 8003710:	4619      	mov	r1, r3
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <toPVMeasures+0x1ac>)
 8003718:	f7fc ff76 	bl	8000608 <__aeabi_dmul>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	e9c7 2302 	strd	r2, r3, [r7, #8]

	powerMeasure->solarVoltage = (uint32_t) fmin(vOutSolarMV, 9999.0);
 8003724:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8003790 <toPVMeasures+0x198>
 8003728:	ed97 0b06 	vldr	d0, [r7, #24]
 800372c:	f006 fa81 	bl	8009c32 <fmin>
 8003730:	ec53 2b10 	vmov	r2, r3, d0
 8003734:	4610      	mov	r0, r2
 8003736:	4619      	mov	r1, r3
 8003738:	f7fd fa16 	bl	8000b68 <__aeabi_d2uiz>
 800373c:	4602      	mov	r2, r0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	669a      	str	r2, [r3, #104]	; 0x68
	powerMeasure->solarCurrent = (uint32_t) fmin(solarCurrentMA, 999.0);
 8003742:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8003798 <toPVMeasures+0x1a0>
 8003746:	ed97 0b04 	vldr	d0, [r7, #16]
 800374a:	f006 fa72 	bl	8009c32 <fmin>
 800374e:	ec53 2b10 	vmov	r2, r3, d0
 8003752:	4610      	mov	r0, r2
 8003754:	4619      	mov	r1, r3
 8003756:	f7fd fa07 	bl	8000b68 <__aeabi_d2uiz>
 800375a:	4602      	mov	r2, r0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	66da      	str	r2, [r3, #108]	; 0x6c
	powerMeasure->power = (uint32_t) fmin(power, 999.0);
 8003760:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8003798 <toPVMeasures+0x1a0>
 8003764:	ed97 0b02 	vldr	d0, [r7, #8]
 8003768:	f006 fa63 	bl	8009c32 <fmin>
 800376c:	ec53 2b10 	vmov	r2, r3, d0
 8003770:	4610      	mov	r0, r2
 8003772:	4619      	mov	r1, r3
 8003774:	f7fd f9f8 	bl	8000b68 <__aeabi_d2uiz>
 8003778:	4602      	mov	r2, r0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	67da      	str	r2, [r3, #124]	; 0x7c
	else{
		powerMeasure->power = (uint32_t) power;
	}
#endif

	capturePMM(powerMeasure, tempMeasure);
 800377e:	6839      	ldr	r1, [r7, #0]
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f81d 	bl	80037c0 <capturePMM>

}
 8003786:	bf00      	nop
 8003788:	3760      	adds	r7, #96	; 0x60
 800378a:	46bd      	mov	sp, r7
 800378c:	bdb0      	pop	{r4, r5, r7, pc}
 800378e:	bf00      	nop
 8003790:	00000000 	.word	0x00000000
 8003794:	40c38780 	.word	0x40c38780
 8003798:	00000000 	.word	0x00000000
 800379c:	408f3800 	.word	0x408f3800
 80037a0:	40240000 	.word	0x40240000
 80037a4:	408f4000 	.word	0x408f4000
 80037a8:	00000000 	.word	0x00000000
 80037ac:	40ca2c00 	.word	0x40ca2c00
 80037b0:	00000000 	.word	0x00000000
 80037b4:	40b9c800 	.word	0x40b9c800
 80037b8:	00000000 	.word	0x00000000
 80037bc:	40c9d200 	.word	0x40c9d200

080037c0 <capturePMM>:

void capturePMM(powerSensor* powerMeasure, tempSensor* tempMeasure){
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
	if (powerMeasure->power > powerMeasure->PMM){
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d924      	bls.n	8003820 <capturePMM+0x60>
		powerMeasure->vPMM = powerMeasure->solarVoltage;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	675a      	str	r2, [r3, #116]	; 0x74
		powerMeasure->iPMM = powerMeasure->solarCurrent;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	679a      	str	r2, [r3, #120]	; 0x78
		powerMeasure->PMM = powerMeasure->power;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	671a      	str	r2, [r3, #112]	; 0x70
		powerMeasure->mppDutyCycle = TIM2->CCR1;
 80037ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		tempMeasure->taCPMM = tempMeasure->taC;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		tempMeasure->tspCPMM = tempMeasure->tspC;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		tempMeasure->luxPMM = tempMeasure->lux;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	}
	else{
		__NOP();
	}
}
 800381e:	e000      	b.n	8003822 <capturePMM+0x62>
		__NOP();
 8003820:	bf00      	nop
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <screenInit>:
//LCD functions
void screenInit(lcdScreen* screen, tempSensor* tempMeasure, powerSensor* powerMeasure, dateTime* dateTime){
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
 800383a:	603b      	str	r3, [r7, #0]
	setDisplayMode1(screen, powerMeasure);
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f80c 	bl	800385c <setDisplayMode1>
	setDisplayMode2(screen, tempMeasure);
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f858 	bl	80038fc <setDisplayMode2>
	setDisplayMode3(screen, dateTime);
 800384c:	6839      	ldr	r1, [r7, #0]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f87a 	bl	8003948 <setDisplayMode3>
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <setDisplayMode1>:

void setDisplayMode1(lcdScreen* screen, powerSensor* powerMeasure){
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af02      	add	r7, sp, #8
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
	if(powerMeasure->isMeasure == 1){
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386c:	2b01      	cmp	r3, #1
 800386e:	d11d      	bne.n	80038ac <setDisplayMode1+0x50>
		snprintf(screen->displayMode1[0],sizeof(screen->displayMode1[0]) ,"V:%04dmV  I:%03dmA", (int)powerMeasure->solarVoltage, (int)powerMeasure->solarCurrent);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f103 0014 	add.w	r0, r3, #20
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800387a:	461a      	mov	r2, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	4613      	mov	r3, r2
 8003884:	4a1a      	ldr	r2, [pc, #104]	; (80038f0 <setDisplayMode1+0x94>)
 8003886:	2110      	movs	r1, #16
 8003888:	f005 fdba 	bl	8009400 <sniprintf>
		snprintf(screen->displayMode1[1], sizeof(screen->displayMode1[0]), "P: %03dmW E:%03d%%", (int)powerMeasure->PMM, (int)powerMeasure->efficiency);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	461a      	mov	r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	4613      	mov	r3, r2
 80038a2:	4a14      	ldr	r2, [pc, #80]	; (80038f4 <setDisplayMode1+0x98>)
 80038a4:	2110      	movs	r1, #16
 80038a6:	f005 fdab 	bl	8009400 <sniprintf>
	else{
		snprintf(screen->displayMode1[0], sizeof(screen->displayMode1[0]), "V:%04dmV I:%03dmA", (int)powerMeasure->vPMM, (int)powerMeasure->iPMM);
		snprintf(screen->displayMode1[1], sizeof(screen->displayMode1[0]), "P: %03dmW E:%03d%%", (int)powerMeasure->PMM, (int)powerMeasure->efficiency);
	}

}
 80038aa:	e01c      	b.n	80038e6 <setDisplayMode1+0x8a>
		snprintf(screen->displayMode1[0], sizeof(screen->displayMode1[0]), "V:%04dmV I:%03dmA", (int)powerMeasure->vPMM, (int)powerMeasure->iPMM);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f103 0014 	add.w	r0, r3, #20
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b6:	461a      	mov	r2, r3
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	4613      	mov	r3, r2
 80038c0:	4a0d      	ldr	r2, [pc, #52]	; (80038f8 <setDisplayMode1+0x9c>)
 80038c2:	2110      	movs	r1, #16
 80038c4:	f005 fd9c 	bl	8009400 <sniprintf>
		snprintf(screen->displayMode1[1], sizeof(screen->displayMode1[0]), "P: %03dmW E:%03d%%", (int)powerMeasure->PMM, (int)powerMeasure->efficiency);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	461a      	mov	r2, r3
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	4613      	mov	r3, r2
 80038de:	4a05      	ldr	r2, [pc, #20]	; (80038f4 <setDisplayMode1+0x98>)
 80038e0:	2110      	movs	r1, #16
 80038e2:	f005 fd8d 	bl	8009400 <sniprintf>
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	0800ab7c 	.word	0x0800ab7c
 80038f4:	0800ab90 	.word	0x0800ab90
 80038f8:	0800aba4 	.word	0x0800aba4

080038fc <setDisplayMode2>:

void setDisplayMode2(lcdScreen* screen, tempSensor* tempMeasure){
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af02      	add	r7, sp, #8
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
	snprintf(screen->displayMode2[0], sizeof(screen->displayMode1[0]),"AMB:%03dC SP:%03dC", tempMeasure->taC, tempMeasure->tspC);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	4613      	mov	r3, r2
 800391c:	4a08      	ldr	r2, [pc, #32]	; (8003940 <setDisplayMode2+0x44>)
 800391e:	2110      	movs	r1, #16
 8003920:	f005 fd6e 	bl	8009400 <sniprintf>
	snprintf(screen->displayMode2[1], sizeof(screen->displayMode1[0]),"LUX:%05d      ",tempMeasure->lux);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003930:	4a04      	ldr	r2, [pc, #16]	; (8003944 <setDisplayMode2+0x48>)
 8003932:	2110      	movs	r1, #16
 8003934:	f005 fd64 	bl	8009400 <sniprintf>
}
 8003938:	bf00      	nop
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	0800abb8 	.word	0x0800abb8
 8003944:	0800abcc 	.word	0x0800abcc

08003948 <setDisplayMode3>:

void setDisplayMode3(lcdScreen* screen, dateTime* dateTime){
 8003948:	b5b0      	push	{r4, r5, r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af02      	add	r7, sp, #8
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
	RTC_DateTypeDef date = dateTime->Date;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	61fb      	str	r3, [r7, #28]
	RTC_TimeTypeDef time = dateTime->Time;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	f107 0408 	add.w	r4, r7, #8
 800395e:	461d      	mov	r5, r3
 8003960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003964:	682b      	ldr	r3, [r5, #0]
 8003966:	6023      	str	r3, [r4, #0]
	sprintf(screen->displayMode3[0],"%02d/%02d/%04d      ",(int) date.Date, (int)date.Month,(int) dateTime->year );
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800396e:	7fbb      	ldrb	r3, [r7, #30]
 8003970:	461a      	mov	r2, r3
 8003972:	7f7b      	ldrb	r3, [r7, #29]
 8003974:	4619      	mov	r1, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	460b      	mov	r3, r1
 800397e:	490a      	ldr	r1, [pc, #40]	; (80039a8 <setDisplayMode3+0x60>)
 8003980:	f005 fd72 	bl	8009468 <siprintf>
	sprintf(screen->displayMode3[1],"%02d:%02d:%02d        ",(int) time.Hours,(int) time.Minutes,(int) time.Seconds);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800398a:	7a3b      	ldrb	r3, [r7, #8]
 800398c:	461a      	mov	r2, r3
 800398e:	7a7b      	ldrb	r3, [r7, #9]
 8003990:	4619      	mov	r1, r3
 8003992:	7abb      	ldrb	r3, [r7, #10]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	460b      	mov	r3, r1
 8003998:	4904      	ldr	r1, [pc, #16]	; (80039ac <setDisplayMode3+0x64>)
 800399a:	f005 fd65 	bl	8009468 <siprintf>
}
 800399e:	bf00      	nop
 80039a0:	3720      	adds	r7, #32
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bdb0      	pop	{r4, r5, r7, pc}
 80039a6:	bf00      	nop
 80039a8:	0800abdc 	.word	0x0800abdc
 80039ac:	0800abf4 	.word	0x0800abf4

080039b0 <displayMode1>:

void displayMode1(Lcd_HandleTypeDef* lcd, lcdScreen* screen){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
	Lcd_cursor(lcd, 0,0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2100      	movs	r1, #0
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7fd fae8 	bl	8000f94 <Lcd_cursor>
	Lcd_string(lcd, screen->displayMode1[0]);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	3314      	adds	r3, #20
 80039c8:	4619      	mov	r1, r3
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd fac2 	bl	8000f54 <Lcd_string>
	Lcd_cursor(lcd, 1,0);
 80039d0:	2200      	movs	r2, #0
 80039d2:	2101      	movs	r1, #1
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7fd fadd 	bl	8000f94 <Lcd_cursor>
	Lcd_string(lcd, screen->displayMode1[1]);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	3324      	adds	r3, #36	; 0x24
 80039de:	4619      	mov	r1, r3
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7fd fab7 	bl	8000f54 <Lcd_string>
	screen->updateScreen = 1;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2201      	movs	r2, #1
 80039ea:	605a      	str	r2, [r3, #4]
	screen->currentDisplay = 1;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2201      	movs	r2, #1
 80039f0:	609a      	str	r2, [r3, #8]
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <displayMode2>:

void displayMode2(Lcd_HandleTypeDef* lcd, lcdScreen* screen){
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	6039      	str	r1, [r7, #0]
	Lcd_cursor(lcd, 0,0);
 8003a04:	2200      	movs	r2, #0
 8003a06:	2100      	movs	r1, #0
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7fd fac3 	bl	8000f94 <Lcd_cursor>
	Lcd_string(lcd, screen->displayMode2[0]);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	3334      	adds	r3, #52	; 0x34
 8003a12:	4619      	mov	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7fd fa9d 	bl	8000f54 <Lcd_string>
	Lcd_cursor(lcd, 1,0);
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fd fab8 	bl	8000f94 <Lcd_cursor>
	Lcd_string(lcd, screen->displayMode2[1]);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	3344      	adds	r3, #68	; 0x44
 8003a28:	4619      	mov	r1, r3
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7fd fa92 	bl	8000f54 <Lcd_string>
	screen->updateScreen = 1;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2201      	movs	r2, #1
 8003a34:	605a      	str	r2, [r3, #4]
	screen->currentDisplay = 2;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2202      	movs	r2, #2
 8003a3a:	609a      	str	r2, [r3, #8]
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <displayMode3>:

void displayMode3(Lcd_HandleTypeDef* lcd, lcdScreen* screen){
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
	Lcd_cursor(lcd, 0,0);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2100      	movs	r1, #0
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fd fa9e 	bl	8000f94 <Lcd_cursor>
	Lcd_string(lcd, screen->displayMode3[0]);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	3354      	adds	r3, #84	; 0x54
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fd fa78 	bl	8000f54 <Lcd_string>
	Lcd_cursor(lcd, 1,0);
 8003a64:	2200      	movs	r2, #0
 8003a66:	2101      	movs	r1, #1
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7fd fa93 	bl	8000f94 <Lcd_cursor>
	Lcd_string(lcd, screen->displayMode3[1]);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	3364      	adds	r3, #100	; 0x64
 8003a72:	4619      	mov	r1, r3
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7fd fa6d 	bl	8000f54 <Lcd_string>
	screen->currentDisplay = 3;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	609a      	str	r2, [r3, #8]
	screen->updateScreen = 1;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2201      	movs	r2, #1
 8003a84:	605a      	str	r2, [r3, #4]
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <switchScreen>:

void switchScreen(lcdScreen* screen){
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]

	switch (screen->currentDisplay){
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d014      	beq.n	8003ac8 <switchScreen+0x3a>
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	dc19      	bgt.n	8003ad6 <switchScreen+0x48>
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d002      	beq.n	8003aac <switchScreen+0x1e>
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d007      	beq.n	8003aba <switchScreen+0x2c>
 8003aaa:	e014      	b.n	8003ad6 <switchScreen+0x48>

	case 1:
		screen->currentDisplay = 2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	609a      	str	r2, [r3, #8]
//		screen->screenClear = 1;
		screen->updateScreen = 1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	605a      	str	r2, [r3, #4]
		break;
 8003ab8:	e00f      	b.n	8003ada <switchScreen+0x4c>

	case 2:
		screen->currentDisplay = 3;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2203      	movs	r2, #3
 8003abe:	609a      	str	r2, [r3, #8]
//		screen->screenClear = 1;
		screen->updateScreen = 1;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	605a      	str	r2, [r3, #4]
		break;
 8003ac6:	e008      	b.n	8003ada <switchScreen+0x4c>

	case 3:
		screen->currentDisplay = 1;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	609a      	str	r2, [r3, #8]
//		screen->screenClear = 1;
		screen->updateScreen = 1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	605a      	str	r2, [r3, #4]
		break;
 8003ad4:	e001      	b.n	8003ada <switchScreen+0x4c>

	default:
		__NOP();
 8003ad6:	bf00      	nop
	}
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <isCommandValid>:
/*
 * isCommandValid takes in a program state and checks if the command is valid. If the command is valid it returns 1 and 0 otherwise.
 *
 * It checks if the first element = &, second element = _, fifth element = * and sixth element = \n
 * */
int isCommandValid(progStates* state){
 8003ae6:	b480      	push	{r7}
 8003ae8:	b085      	sub	sp, #20
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
	int commandValid = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]

	if (state->commandMsg[0] == 38 &&
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	7f1b      	ldrb	r3, [r3, #28]
 8003af6:	2b26      	cmp	r3, #38	; 0x26
 8003af8:	d116      	bne.n	8003b28 <isCommandValid+0x42>
		state->commandMsg[1] == 95 &&
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7f5b      	ldrb	r3, [r3, #29]
	if (state->commandMsg[0] == 38 &&
 8003afe:	2b5f      	cmp	r3, #95	; 0x5f
 8003b00:	d112      	bne.n	8003b28 <isCommandValid+0x42>
		state->commandMsg[4] == 95 &&
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3020 	ldrb.w	r3, [r3, #32]
		state->commandMsg[1] == 95 &&
 8003b08:	2b5f      	cmp	r3, #95	; 0x5f
 8003b0a:	d10d      	bne.n	8003b28 <isCommandValid+0x42>
		state->commandMsg[5] == 42 &&
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
		state->commandMsg[4] == 95 &&
 8003b12:	2b2a      	cmp	r3, #42	; 0x2a
 8003b14:	d108      	bne.n	8003b28 <isCommandValid+0x42>
		state->commandMsg[6] == 10){
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
		state->commandMsg[5] == 42 &&
 8003b1c:	2b0a      	cmp	r3, #10
 8003b1e:	d103      	bne.n	8003b28 <isCommandValid+0x42>
		commandValid = 1;
 8003b20:	2301      	movs	r3, #1
 8003b22:	60fb      	str	r3, [r7, #12]
		return commandValid;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	e000      	b.n	8003b2a <isCommandValid+0x44>
	}

	else{
		return commandValid;
 8003b28:	68fb      	ldr	r3, [r7, #12]
	}
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3714      	adds	r7, #20
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <resetStr>:

void resetStr(char* str,int lenStr){
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	6039      	str	r1, [r7, #0]
	memset(str,0,lenStr);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	461a      	mov	r2, r3
 8003b44:	2100      	movs	r1, #0
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f005 fb98 	bl	800927c <memset>
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <intAverage>:

uint32_t intAverage(uint32_t* elements, uint32_t numElements){
 8003b54:	b480      	push	{r7}
 8003b56:	b087      	sub	sp, #28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
	uint32_t sum = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < numElements; i++){
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	e00a      	b.n	8003b7e <intAverage+0x2a>
		sum = sum + elements[i];
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4413      	add	r3, r2
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4413      	add	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < numElements; i++){
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d8f0      	bhi.n	8003b68 <intAverage+0x14>
	}

	float average = (float) sum / (float) numElements;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	ee07 3a90 	vmov	s15, r3
 8003b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	ee07 3a90 	vmov	s15, r3
 8003b96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b9e:	edc7 7a03 	vstr	s15, [r7, #12]

	return (uint32_t) average;
 8003ba2:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003baa:	ee17 3a90 	vmov	r3, s15
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	4b10      	ldr	r3, [pc, #64]	; (8003c08 <HAL_MspInit+0x4c>)
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	4a0f      	ldr	r2, [pc, #60]	; (8003c08 <HAL_MspInit+0x4c>)
 8003bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bd2:	4b0d      	ldr	r3, [pc, #52]	; (8003c08 <HAL_MspInit+0x4c>)
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_MspInit+0x4c>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <HAL_MspInit+0x4c>)
 8003be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bec:	6413      	str	r3, [r2, #64]	; 0x40
 8003bee:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_MspInit+0x4c>)
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800

08003c0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b08a      	sub	sp, #40	; 0x28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c14:	f107 0314 	add.w	r3, r7, #20
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	60da      	str	r2, [r3, #12]
 8003c22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a40      	ldr	r2, [pc, #256]	; (8003d2c <HAL_ADC_MspInit+0x120>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d179      	bne.n	8003d22 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c2e:	2300      	movs	r3, #0
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <HAL_ADC_MspInit+0x124>)
 8003c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c36:	4a3e      	ldr	r2, [pc, #248]	; (8003d30 <HAL_ADC_MspInit+0x124>)
 8003c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c3e:	4b3c      	ldr	r3, [pc, #240]	; (8003d30 <HAL_ADC_MspInit+0x124>)
 8003c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	4b38      	ldr	r3, [pc, #224]	; (8003d30 <HAL_ADC_MspInit+0x124>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	4a37      	ldr	r2, [pc, #220]	; (8003d30 <HAL_ADC_MspInit+0x124>)
 8003c54:	f043 0304 	orr.w	r3, r3, #4
 8003c58:	6313      	str	r3, [r2, #48]	; 0x30
 8003c5a:	4b35      	ldr	r3, [pc, #212]	; (8003d30 <HAL_ADC_MspInit+0x124>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c66:	2300      	movs	r3, #0
 8003c68:	60bb      	str	r3, [r7, #8]
 8003c6a:	4b31      	ldr	r3, [pc, #196]	; (8003d30 <HAL_ADC_MspInit+0x124>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	4a30      	ldr	r2, [pc, #192]	; (8003d30 <HAL_ADC_MspInit+0x124>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6313      	str	r3, [r2, #48]	; 0x30
 8003c76:	4b2e      	ldr	r3, [pc, #184]	; (8003d30 <HAL_ADC_MspInit+0x124>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	60bb      	str	r3, [r7, #8]
 8003c80:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = PV_Voltage_Pin|TempSensor_Pin|LuxSensor_Pin;
 8003c82:	2323      	movs	r3, #35	; 0x23
 8003c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c86:	2303      	movs	r3, #3
 8003c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c8e:	f107 0314 	add.w	r3, r7, #20
 8003c92:	4619      	mov	r1, r3
 8003c94:	4827      	ldr	r0, [pc, #156]	; (8003d34 <HAL_ADC_MspInit+0x128>)
 8003c96:	f001 fd35 	bl	8005704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PV_Current_Pin;
 8003c9a:	2310      	movs	r3, #16
 8003c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PV_Current_GPIO_Port, &GPIO_InitStruct);
 8003ca6:	f107 0314 	add.w	r3, r7, #20
 8003caa:	4619      	mov	r1, r3
 8003cac:	4822      	ldr	r0, [pc, #136]	; (8003d38 <HAL_ADC_MspInit+0x12c>)
 8003cae:	f001 fd29 	bl	8005704 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003cb2:	4b22      	ldr	r3, [pc, #136]	; (8003d3c <HAL_ADC_MspInit+0x130>)
 8003cb4:	4a22      	ldr	r2, [pc, #136]	; (8003d40 <HAL_ADC_MspInit+0x134>)
 8003cb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003cb8:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_ADC_MspInit+0x130>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cbe:	4b1f      	ldr	r3, [pc, #124]	; (8003d3c <HAL_ADC_MspInit+0x130>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <HAL_ADC_MspInit+0x130>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003cca:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <HAL_ADC_MspInit+0x130>)
 8003ccc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cd2:	4b1a      	ldr	r3, [pc, #104]	; (8003d3c <HAL_ADC_MspInit+0x130>)
 8003cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <HAL_ADC_MspInit+0x130>)
 8003cdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ce0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003ce2:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <HAL_ADC_MspInit+0x130>)
 8003ce4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ce8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003cea:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <HAL_ADC_MspInit+0x130>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cf0:	4b12      	ldr	r3, [pc, #72]	; (8003d3c <HAL_ADC_MspInit+0x130>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003cf6:	4811      	ldr	r0, [pc, #68]	; (8003d3c <HAL_ADC_MspInit+0x130>)
 8003cf8:	f001 f988 	bl	800500c <HAL_DMA_Init>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003d02:	f7fe fe5f 	bl	80029c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a0c      	ldr	r2, [pc, #48]	; (8003d3c <HAL_ADC_MspInit+0x130>)
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38
 8003d0c:	4a0b      	ldr	r2, [pc, #44]	; (8003d3c <HAL_ADC_MspInit+0x130>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 8003d12:	2200      	movs	r2, #0
 8003d14:	2101      	movs	r1, #1
 8003d16:	2012      	movs	r0, #18
 8003d18:	f001 f941 	bl	8004f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003d1c:	2012      	movs	r0, #18
 8003d1e:	f001 f95a 	bl	8004fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003d22:	bf00      	nop
 8003d24:	3728      	adds	r7, #40	; 0x28
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40012000 	.word	0x40012000
 8003d30:	40023800 	.word	0x40023800
 8003d34:	40020800 	.word	0x40020800
 8003d38:	40020000 	.word	0x40020000
 8003d3c:	200000e8 	.word	0x200000e8
 8003d40:	40026410 	.word	0x40026410

08003d44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d4c:	f107 0308 	add.w	r3, r7, #8
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	60da      	str	r2, [r3, #12]
 8003d5a:	611a      	str	r2, [r3, #16]
 8003d5c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a0c      	ldr	r2, [pc, #48]	; (8003d94 <HAL_RTC_MspInit+0x50>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d111      	bne.n	8003d8c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d70:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d72:	f107 0308 	add.w	r3, r7, #8
 8003d76:	4618      	mov	r0, r3
 8003d78:	f002 fb2c 	bl	80063d4 <HAL_RCCEx_PeriphCLKConfig>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003d82:	f7fe fe1f 	bl	80029c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d86:	4b04      	ldr	r3, [pc, #16]	; (8003d98 <HAL_RTC_MspInit+0x54>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d8c:	bf00      	nop
 8003d8e:	3720      	adds	r7, #32
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40002800 	.word	0x40002800
 8003d98:	42470e3c 	.word	0x42470e3c

08003d9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	; 0x28
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da4:	f107 0314 	add.w	r3, r7, #20
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	605a      	str	r2, [r3, #4]
 8003dae:	609a      	str	r2, [r3, #8]
 8003db0:	60da      	str	r2, [r3, #12]
 8003db2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a27      	ldr	r2, [pc, #156]	; (8003e58 <HAL_TIM_Base_MspInit+0xbc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d10e      	bne.n	8003ddc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	4b26      	ldr	r3, [pc, #152]	; (8003e5c <HAL_TIM_Base_MspInit+0xc0>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc6:	4a25      	ldr	r2, [pc, #148]	; (8003e5c <HAL_TIM_Base_MspInit+0xc0>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003dce:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <HAL_TIM_Base_MspInit+0xc0>)
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003dda:	e038      	b.n	8003e4e <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a1f      	ldr	r2, [pc, #124]	; (8003e60 <HAL_TIM_Base_MspInit+0xc4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d133      	bne.n	8003e4e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	4b1c      	ldr	r3, [pc, #112]	; (8003e5c <HAL_TIM_Base_MspInit+0xc0>)
 8003dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dee:	4a1b      	ldr	r2, [pc, #108]	; (8003e5c <HAL_TIM_Base_MspInit+0xc0>)
 8003df0:	f043 0302 	orr.w	r3, r3, #2
 8003df4:	6413      	str	r3, [r2, #64]	; 0x40
 8003df6:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <HAL_TIM_Base_MspInit+0xc0>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <HAL_TIM_Base_MspInit+0xc0>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	4a14      	ldr	r2, [pc, #80]	; (8003e5c <HAL_TIM_Base_MspInit+0xc0>)
 8003e0c:	f043 0304 	orr.w	r3, r3, #4
 8003e10:	6313      	str	r3, [r2, #48]	; 0x30
 8003e12:	4b12      	ldr	r3, [pc, #72]	; (8003e5c <HAL_TIM_Base_MspInit+0xc0>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e1e:	2340      	movs	r3, #64	; 0x40
 8003e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e22:	2302      	movs	r3, #2
 8003e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e32:	f107 0314 	add.w	r3, r7, #20
 8003e36:	4619      	mov	r1, r3
 8003e38:	480a      	ldr	r0, [pc, #40]	; (8003e64 <HAL_TIM_Base_MspInit+0xc8>)
 8003e3a:	f001 fc63 	bl	8005704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2100      	movs	r1, #0
 8003e42:	201d      	movs	r0, #29
 8003e44:	f001 f8ab 	bl	8004f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003e48:	201d      	movs	r0, #29
 8003e4a:	f001 f8c4 	bl	8004fd6 <HAL_NVIC_EnableIRQ>
}
 8003e4e:	bf00      	nop
 8003e50:	3728      	adds	r7, #40	; 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40010000 	.word	0x40010000
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40000400 	.word	0x40000400
 8003e64:	40020800 	.word	0x40020800

08003e68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e78:	d145      	bne.n	8003f06 <HAL_TIM_PWM_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	60fb      	str	r3, [r7, #12]
 8003e7e:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <HAL_TIM_PWM_MspInit+0xa8>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a23      	ldr	r2, [pc, #140]	; (8003f10 <HAL_TIM_PWM_MspInit+0xa8>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b21      	ldr	r3, [pc, #132]	; (8003f10 <HAL_TIM_PWM_MspInit+0xa8>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8003e96:	4b1f      	ldr	r3, [pc, #124]	; (8003f14 <HAL_TIM_PWM_MspInit+0xac>)
 8003e98:	4a1f      	ldr	r2, [pc, #124]	; (8003f18 <HAL_TIM_PWM_MspInit+0xb0>)
 8003e9a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8003e9c:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <HAL_TIM_PWM_MspInit+0xac>)
 8003e9e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003ea2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ea4:	4b1b      	ldr	r3, [pc, #108]	; (8003f14 <HAL_TIM_PWM_MspInit+0xac>)
 8003ea6:	2240      	movs	r2, #64	; 0x40
 8003ea8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eaa:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <HAL_TIM_PWM_MspInit+0xac>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003eb0:	4b18      	ldr	r3, [pc, #96]	; (8003f14 <HAL_TIM_PWM_MspInit+0xac>)
 8003eb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eb6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003eb8:	4b16      	ldr	r3, [pc, #88]	; (8003f14 <HAL_TIM_PWM_MspInit+0xac>)
 8003eba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ebe:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ec0:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <HAL_TIM_PWM_MspInit+0xac>)
 8003ec2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ec6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8003ec8:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_TIM_PWM_MspInit+0xac>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003ece:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <HAL_TIM_PWM_MspInit+0xac>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ed4:	4b0f      	ldr	r3, [pc, #60]	; (8003f14 <HAL_TIM_PWM_MspInit+0xac>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8003eda:	480e      	ldr	r0, [pc, #56]	; (8003f14 <HAL_TIM_PWM_MspInit+0xac>)
 8003edc:	f001 f896 	bl	800500c <HAL_DMA_Init>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8003ee6:	f7fe fd6d 	bl	80029c4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a09      	ldr	r2, [pc, #36]	; (8003f14 <HAL_TIM_PWM_MspInit+0xac>)
 8003eee:	625a      	str	r2, [r3, #36]	; 0x24
 8003ef0:	4a08      	ldr	r2, [pc, #32]	; (8003f14 <HAL_TIM_PWM_MspInit+0xac>)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2100      	movs	r1, #0
 8003efa:	201c      	movs	r0, #28
 8003efc:	f001 f84f 	bl	8004f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003f00:	201c      	movs	r0, #28
 8003f02:	f001 f868 	bl	8004fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	20000240 	.word	0x20000240
 8003f18:	40026088 	.word	0x40026088

08003f1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	f107 0314 	add.w	r3, r7, #20
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	605a      	str	r2, [r3, #4]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	60da      	str	r2, [r3, #12]
 8003f32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3c:	d11e      	bne.n	8003f7c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <HAL_TIM_MspPostInit+0xb0>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	4a21      	ldr	r2, [pc, #132]	; (8003fcc <HAL_TIM_MspPostInit+0xb0>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4e:	4b1f      	ldr	r3, [pc, #124]	; (8003fcc <HAL_TIM_MspPostInit+0xb0>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	613b      	str	r3, [r7, #16]
 8003f58:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f66:	2300      	movs	r3, #0
 8003f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6e:	f107 0314 	add.w	r3, r7, #20
 8003f72:	4619      	mov	r1, r3
 8003f74:	4816      	ldr	r0, [pc, #88]	; (8003fd0 <HAL_TIM_MspPostInit+0xb4>)
 8003f76:	f001 fbc5 	bl	8005704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003f7a:	e022      	b.n	8003fc2 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <HAL_TIM_MspPostInit+0xb8>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d11d      	bne.n	8003fc2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <HAL_TIM_MspPostInit+0xb0>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	4a0f      	ldr	r2, [pc, #60]	; (8003fcc <HAL_TIM_MspPostInit+0xb0>)
 8003f90:	f043 0304 	orr.w	r3, r3, #4
 8003f94:	6313      	str	r3, [r2, #48]	; 0x30
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <HAL_TIM_MspPostInit+0xb0>)
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003fa2:	2380      	movs	r3, #128	; 0x80
 8003fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fb6:	f107 0314 	add.w	r3, r7, #20
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4806      	ldr	r0, [pc, #24]	; (8003fd8 <HAL_TIM_MspPostInit+0xbc>)
 8003fbe:	f001 fba1 	bl	8005704 <HAL_GPIO_Init>
}
 8003fc2:	bf00      	nop
 8003fc4:	3728      	adds	r7, #40	; 0x28
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	40020000 	.word	0x40020000
 8003fd4:	40000400 	.word	0x40000400
 8003fd8:	40020800 	.word	0x40020800

08003fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe4:	f107 0314 	add.w	r3, r7, #20
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	605a      	str	r2, [r3, #4]
 8003fee:	609a      	str	r2, [r3, #8]
 8003ff0:	60da      	str	r2, [r3, #12]
 8003ff2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1d      	ldr	r2, [pc, #116]	; (8004070 <HAL_UART_MspInit+0x94>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d133      	bne.n	8004066 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	4b1c      	ldr	r3, [pc, #112]	; (8004074 <HAL_UART_MspInit+0x98>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <HAL_UART_MspInit+0x98>)
 8004008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400c:	6413      	str	r3, [r2, #64]	; 0x40
 800400e:	4b19      	ldr	r3, [pc, #100]	; (8004074 <HAL_UART_MspInit+0x98>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
 800401e:	4b15      	ldr	r3, [pc, #84]	; (8004074 <HAL_UART_MspInit+0x98>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	4a14      	ldr	r2, [pc, #80]	; (8004074 <HAL_UART_MspInit+0x98>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	6313      	str	r3, [r2, #48]	; 0x30
 800402a:	4b12      	ldr	r3, [pc, #72]	; (8004074 <HAL_UART_MspInit+0x98>)
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004036:	230c      	movs	r3, #12
 8004038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403a:	2302      	movs	r3, #2
 800403c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004042:	2303      	movs	r3, #3
 8004044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004046:	2307      	movs	r3, #7
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800404a:	f107 0314 	add.w	r3, r7, #20
 800404e:	4619      	mov	r1, r3
 8004050:	4809      	ldr	r0, [pc, #36]	; (8004078 <HAL_UART_MspInit+0x9c>)
 8004052:	f001 fb57 	bl	8005704 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8004056:	2200      	movs	r2, #0
 8004058:	2102      	movs	r1, #2
 800405a:	2026      	movs	r0, #38	; 0x26
 800405c:	f000 ff9f 	bl	8004f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004060:	2026      	movs	r0, #38	; 0x26
 8004062:	f000 ffb8 	bl	8004fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004066:	bf00      	nop
 8004068:	3728      	adds	r7, #40	; 0x28
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40004400 	.word	0x40004400
 8004074:	40023800 	.word	0x40023800
 8004078:	40020000 	.word	0x40020000

0800407c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004080:	e7fe      	b.n	8004080 <NMI_Handler+0x4>

08004082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004086:	e7fe      	b.n	8004086 <HardFault_Handler+0x4>

08004088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800408c:	e7fe      	b.n	800408c <MemManage_Handler+0x4>

0800408e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800408e:	b480      	push	{r7}
 8004090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004092:	e7fe      	b.n	8004092 <BusFault_Handler+0x4>

08004094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004098:	e7fe      	b.n	8004098 <UsageFault_Handler+0x4>

0800409a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800409a:	b480      	push	{r7}
 800409c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800409e:	bf00      	nop
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040b6:	b480      	push	{r7}
 80040b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040ba:	bf00      	nop
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040c8:	f000 f920 	bl	800430c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040cc:	bf00      	nop
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80040d4:	4802      	ldr	r0, [pc, #8]	; (80040e0 <DMA1_Stream5_IRQHandler+0x10>)
 80040d6:	f001 f8d9 	bl	800528c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000240 	.word	0x20000240

080040e4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80040e8:	4802      	ldr	r0, [pc, #8]	; (80040f4 <ADC_IRQHandler+0x10>)
 80040ea:	f000 fb09 	bl	8004700 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80040ee:	bf00      	nop
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	200000a0 	.word	0x200000a0

080040f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 80040fc:	2020      	movs	r0, #32
 80040fe:	f001 fcb9 	bl	8005a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S3_Pin);
 8004102:	2080      	movs	r0, #128	; 0x80
 8004104:	f001 fcb6 	bl	8005a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8004108:	f44f 7080 	mov.w	r0, #256	; 0x100
 800410c:	f001 fcb2 	bl	8005a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(S5_Pin);
 8004110:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004114:	f001 fcae 	bl	8005a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004118:	bf00      	nop
 800411a:	bd80      	pop	{r7, pc}

0800411c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004120:	4802      	ldr	r0, [pc, #8]	; (800412c <TIM2_IRQHandler+0x10>)
 8004122:	f003 f861 	bl	80071e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	200001b0 	.word	0x200001b0

08004130 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004134:	4802      	ldr	r0, [pc, #8]	; (8004140 <TIM3_IRQHandler+0x10>)
 8004136:	f003 f857 	bl	80071e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	200001f8 	.word	0x200001f8

08004144 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004148:	4802      	ldr	r0, [pc, #8]	; (8004154 <USART2_IRQHandler+0x10>)
 800414a:	f004 f975 	bl	8008438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800414e:	bf00      	nop
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	200002a0 	.word	0x200002a0

08004158 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S4_Pin);
 800415c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004160:	f001 fc88 	bl	8005a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8004164:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004168:	f001 fc84 	bl	8005a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800416c:	bf00      	nop
 800416e:	bd80      	pop	{r7, pc}

08004170 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004174:	4802      	ldr	r0, [pc, #8]	; (8004180 <DMA2_Stream0_IRQHandler+0x10>)
 8004176:	f001 f889 	bl	800528c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	200000e8 	.word	0x200000e8

08004184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800418c:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <_sbrk+0x5c>)
 800418e:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <_sbrk+0x60>)
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004198:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <_sbrk+0x64>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d102      	bne.n	80041a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <_sbrk+0x64>)
 80041a2:	4a12      	ldr	r2, [pc, #72]	; (80041ec <_sbrk+0x68>)
 80041a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041a6:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <_sbrk+0x64>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4413      	add	r3, r2
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d207      	bcs.n	80041c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041b4:	f005 f838 	bl	8009228 <__errno>
 80041b8:	4603      	mov	r3, r0
 80041ba:	220c      	movs	r2, #12
 80041bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041c2:	e009      	b.n	80041d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041c4:	4b08      	ldr	r3, [pc, #32]	; (80041e8 <_sbrk+0x64>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041ca:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <_sbrk+0x64>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	4a05      	ldr	r2, [pc, #20]	; (80041e8 <_sbrk+0x64>)
 80041d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041d6:	68fb      	ldr	r3, [r7, #12]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20020000 	.word	0x20020000
 80041e4:	00000400 	.word	0x00000400
 80041e8:	2000033c 	.word	0x2000033c
 80041ec:	20000358 	.word	0x20000358

080041f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041f4:	4b06      	ldr	r3, [pc, #24]	; (8004210 <SystemInit+0x20>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	4a05      	ldr	r2, [pc, #20]	; (8004210 <SystemInit+0x20>)
 80041fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800424c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004218:	480d      	ldr	r0, [pc, #52]	; (8004250 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800421a:	490e      	ldr	r1, [pc, #56]	; (8004254 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800421c:	4a0e      	ldr	r2, [pc, #56]	; (8004258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800421e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004220:	e002      	b.n	8004228 <LoopCopyDataInit>

08004222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004226:	3304      	adds	r3, #4

08004228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800422a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800422c:	d3f9      	bcc.n	8004222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800422e:	4a0b      	ldr	r2, [pc, #44]	; (800425c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004230:	4c0b      	ldr	r4, [pc, #44]	; (8004260 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004234:	e001      	b.n	800423a <LoopFillZerobss>

08004236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004238:	3204      	adds	r2, #4

0800423a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800423a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800423c:	d3fb      	bcc.n	8004236 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800423e:	f7ff ffd7 	bl	80041f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004242:	f004 fff7 	bl	8009234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004246:	f7fc ff67 	bl	8001118 <main>
  bx  lr    
 800424a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800424c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004254:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8004258:	0800aca8 	.word	0x0800aca8
  ldr r2, =_sbss
 800425c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8004260:	20000354 	.word	0x20000354

08004264 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004264:	e7fe      	b.n	8004264 <DMA1_Stream0_IRQHandler>
	...

08004268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800426c:	4b0e      	ldr	r3, [pc, #56]	; (80042a8 <HAL_Init+0x40>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a0d      	ldr	r2, [pc, #52]	; (80042a8 <HAL_Init+0x40>)
 8004272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_Init+0x40>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a0a      	ldr	r2, [pc, #40]	; (80042a8 <HAL_Init+0x40>)
 800427e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <HAL_Init+0x40>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a07      	ldr	r2, [pc, #28]	; (80042a8 <HAL_Init+0x40>)
 800428a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800428e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004290:	2003      	movs	r0, #3
 8004292:	f000 fe79 	bl	8004f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004296:	2000      	movs	r0, #0
 8004298:	f000 f808 	bl	80042ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800429c:	f7ff fc8e 	bl	8003bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023c00 	.word	0x40023c00

080042ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042b4:	4b12      	ldr	r3, [pc, #72]	; (8004300 <HAL_InitTick+0x54>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4b12      	ldr	r3, [pc, #72]	; (8004304 <HAL_InitTick+0x58>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	4619      	mov	r1, r3
 80042be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80042c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fe91 	bl	8004ff2 <HAL_SYSTICK_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e00e      	b.n	80042f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b0f      	cmp	r3, #15
 80042de:	d80a      	bhi.n	80042f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042e0:	2200      	movs	r2, #0
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042e8:	f000 fe59 	bl	8004f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042ec:	4a06      	ldr	r2, [pc, #24]	; (8004308 <HAL_InitTick+0x5c>)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	e000      	b.n	80042f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000014 	.word	0x20000014
 8004304:	2000001c 	.word	0x2000001c
 8004308:	20000018 	.word	0x20000018

0800430c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004310:	4b06      	ldr	r3, [pc, #24]	; (800432c <HAL_IncTick+0x20>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	4b06      	ldr	r3, [pc, #24]	; (8004330 <HAL_IncTick+0x24>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4413      	add	r3, r2
 800431c:	4a04      	ldr	r2, [pc, #16]	; (8004330 <HAL_IncTick+0x24>)
 800431e:	6013      	str	r3, [r2, #0]
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	2000001c 	.word	0x2000001c
 8004330:	20000340 	.word	0x20000340

08004334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  return uwTick;
 8004338:	4b03      	ldr	r3, [pc, #12]	; (8004348 <HAL_GetTick+0x14>)
 800433a:	681b      	ldr	r3, [r3, #0]
}
 800433c:	4618      	mov	r0, r3
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	20000340 	.word	0x20000340

0800434c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004354:	f7ff ffee 	bl	8004334 <HAL_GetTick>
 8004358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004364:	d005      	beq.n	8004372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <HAL_Delay+0x44>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004372:	bf00      	nop
 8004374:	f7ff ffde 	bl	8004334 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	429a      	cmp	r2, r3
 8004382:	d8f7      	bhi.n	8004374 <HAL_Delay+0x28>
  {
  }
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	2000001c 	.word	0x2000001c

08004394 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e033      	b.n	8004412 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d109      	bne.n	80043c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff fc2a 	bl	8003c0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d118      	bne.n	8004404 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80043da:	f023 0302 	bic.w	r3, r3, #2
 80043de:	f043 0202 	orr.w	r2, r3, #2
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fbf8 	bl	8004bdc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	f023 0303 	bic.w	r3, r3, #3
 80043fa:	f043 0201 	orr.w	r2, r3, #1
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40
 8004402:	e001      	b.n	8004408 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004410:	7bfb      	ldrb	r3, [r7, #15]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004424:	2300      	movs	r3, #0
 8004426:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_ADC_Start+0x1a>
 8004432:	2302      	movs	r3, #2
 8004434:	e097      	b.n	8004566 <HAL_ADC_Start+0x14a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b01      	cmp	r3, #1
 800444a:	d018      	beq.n	800447e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800445c:	4b45      	ldr	r3, [pc, #276]	; (8004574 <HAL_ADC_Start+0x158>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a45      	ldr	r2, [pc, #276]	; (8004578 <HAL_ADC_Start+0x15c>)
 8004462:	fba2 2303 	umull	r2, r3, r2, r3
 8004466:	0c9a      	lsrs	r2, r3, #18
 8004468:	4613      	mov	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	4413      	add	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004470:	e002      	b.n	8004478 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	3b01      	subs	r3, #1
 8004476:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f9      	bne.n	8004472 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b01      	cmp	r3, #1
 800448a:	d15f      	bne.n	800454c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80044b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ca:	d106      	bne.n	80044da <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d0:	f023 0206 	bic.w	r2, r3, #6
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	645a      	str	r2, [r3, #68]	; 0x44
 80044d8:	e002      	b.n	80044e0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044e8:	4b24      	ldr	r3, [pc, #144]	; (800457c <HAL_ADC_Start+0x160>)
 80044ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80044f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 031f 	and.w	r3, r3, #31
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10f      	bne.n	8004522 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d129      	bne.n	8004564 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800451e:	609a      	str	r2, [r3, #8]
 8004520:	e020      	b.n	8004564 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a16      	ldr	r2, [pc, #88]	; (8004580 <HAL_ADC_Start+0x164>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d11b      	bne.n	8004564 <HAL_ADC_Start+0x148>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d114      	bne.n	8004564 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004548:	609a      	str	r2, [r3, #8]
 800454a:	e00b      	b.n	8004564 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	f043 0210 	orr.w	r2, r3, #16
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000014 	.word	0x20000014
 8004578:	431bde83 	.word	0x431bde83
 800457c:	40012300 	.word	0x40012300
 8004580:	40012000 	.word	0x40012000

08004584 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004592:	2b01      	cmp	r3, #1
 8004594:	d101      	bne.n	800459a <HAL_ADC_Stop+0x16>
 8004596:	2302      	movs	r3, #2
 8004598:	e021      	b.n	80045de <HAL_ADC_Stop+0x5a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0201 	bic.w	r2, r2, #1
 80045b0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	f043 0201 	orr.w	r2, r3, #1
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
 80045f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004606:	d113      	bne.n	8004630 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004612:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004616:	d10b      	bne.n	8004630 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e063      	b.n	80046f8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004630:	f7ff fe80 	bl	8004334 <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004636:	e021      	b.n	800467c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800463e:	d01d      	beq.n	800467c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <HAL_ADC_PollForConversion+0x6c>
 8004646:	f7ff fe75 	bl	8004334 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d212      	bcs.n	800467c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b02      	cmp	r3, #2
 8004662:	d00b      	beq.n	800467c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004668:	f043 0204 	orr.w	r2, r3, #4
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e03d      	b.n	80046f8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b02      	cmp	r3, #2
 8004688:	d1d6      	bne.n	8004638 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f06f 0212 	mvn.w	r2, #18
 8004692:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004698:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d123      	bne.n	80046f6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d11f      	bne.n	80046f6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046bc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d006      	beq.n	80046d2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d111      	bne.n	80046f6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d105      	bne.n	80046f6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f043 0201 	orr.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 0320 	and.w	r3, r3, #32
 800472e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d049      	beq.n	80047ca <HAL_ADC_IRQHandler+0xca>
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d046      	beq.n	80047ca <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	f003 0310 	and.w	r3, r3, #16
 8004744:	2b00      	cmp	r3, #0
 8004746:	d105      	bne.n	8004754 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d12b      	bne.n	80047ba <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004766:	2b00      	cmp	r3, #0
 8004768:	d127      	bne.n	80047ba <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004774:	2b00      	cmp	r3, #0
 8004776:	d006      	beq.n	8004786 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004782:	2b00      	cmp	r3, #0
 8004784:	d119      	bne.n	80047ba <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0220 	bic.w	r2, r2, #32
 8004794:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d105      	bne.n	80047ba <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f043 0201 	orr.w	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f8bd 	bl	800493a <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0212 	mvn.w	r2, #18
 80047c8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d057      	beq.n	8004890 <HAL_ADC_IRQHandler+0x190>
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d054      	beq.n	8004890 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d105      	bne.n	80047fe <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d139      	bne.n	8004880 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004816:	2b00      	cmp	r3, #0
 8004818:	d006      	beq.n	8004828 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004824:	2b00      	cmp	r3, #0
 8004826:	d12b      	bne.n	8004880 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004832:	2b00      	cmp	r3, #0
 8004834:	d124      	bne.n	8004880 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004840:	2b00      	cmp	r3, #0
 8004842:	d11d      	bne.n	8004880 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004848:	2b00      	cmp	r3, #0
 800484a:	d119      	bne.n	8004880 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800485a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	f043 0201 	orr.w	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 faa7 	bl	8004dd4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f06f 020c 	mvn.w	r2, #12
 800488e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d017      	beq.n	80048d6 <HAL_ADC_IRQHandler+0x1d6>
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d014      	beq.n	80048d6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d10d      	bne.n	80048d6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f841 	bl	800494e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0201 	mvn.w	r2, #1
 80048d4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048e4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d015      	beq.n	8004918 <HAL_ADC_IRQHandler+0x218>
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d012      	beq.n	8004918 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	f043 0202 	orr.w	r2, r3, #2
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f06f 0220 	mvn.w	r2, #32
 8004906:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f82a 	bl	8004962 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f06f 0220 	mvn.w	r2, #32
 8004916:	601a      	str	r2, [r3, #0]
  }
}
 8004918:	bf00      	nop
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_ADC_ConfigChannel+0x1c>
 8004990:	2302      	movs	r3, #2
 8004992:	e113      	b.n	8004bbc <HAL_ADC_ConfigChannel+0x244>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b09      	cmp	r3, #9
 80049a2:	d925      	bls.n	80049f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68d9      	ldr	r1, [r3, #12]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	461a      	mov	r2, r3
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	3b1e      	subs	r3, #30
 80049ba:	2207      	movs	r2, #7
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	43da      	mvns	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	400a      	ands	r2, r1
 80049c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68d9      	ldr	r1, [r3, #12]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	b29b      	uxth	r3, r3
 80049da:	4618      	mov	r0, r3
 80049dc:	4603      	mov	r3, r0
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	4403      	add	r3, r0
 80049e2:	3b1e      	subs	r3, #30
 80049e4:	409a      	lsls	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	60da      	str	r2, [r3, #12]
 80049ee:	e022      	b.n	8004a36 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6919      	ldr	r1, [r3, #16]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	4613      	mov	r3, r2
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	4413      	add	r3, r2
 8004a04:	2207      	movs	r2, #7
 8004a06:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0a:	43da      	mvns	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	400a      	ands	r2, r1
 8004a12:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6919      	ldr	r1, [r3, #16]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	4618      	mov	r0, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4403      	add	r3, r0
 8004a2c:	409a      	lsls	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b06      	cmp	r3, #6
 8004a3c:	d824      	bhi.n	8004a88 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3b05      	subs	r3, #5
 8004a50:	221f      	movs	r2, #31
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43da      	mvns	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	400a      	ands	r2, r1
 8004a5e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	3b05      	subs	r3, #5
 8004a7a:	fa00 f203 	lsl.w	r2, r0, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	635a      	str	r2, [r3, #52]	; 0x34
 8004a86:	e04c      	b.n	8004b22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b0c      	cmp	r3, #12
 8004a8e:	d824      	bhi.n	8004ada <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3b23      	subs	r3, #35	; 0x23
 8004aa2:	221f      	movs	r2, #31
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	43da      	mvns	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	400a      	ands	r2, r1
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	4618      	mov	r0, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	3b23      	subs	r3, #35	; 0x23
 8004acc:	fa00 f203 	lsl.w	r2, r0, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ad8:	e023      	b.n	8004b22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	3b41      	subs	r3, #65	; 0x41
 8004aec:	221f      	movs	r2, #31
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	43da      	mvns	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	400a      	ands	r2, r1
 8004afa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	4618      	mov	r0, r3
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	3b41      	subs	r3, #65	; 0x41
 8004b16:	fa00 f203 	lsl.w	r2, r0, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b22:	4b29      	ldr	r3, [pc, #164]	; (8004bc8 <HAL_ADC_ConfigChannel+0x250>)
 8004b24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a28      	ldr	r2, [pc, #160]	; (8004bcc <HAL_ADC_ConfigChannel+0x254>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10f      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x1d8>
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b12      	cmp	r3, #18
 8004b36:	d10b      	bne.n	8004b50 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a1d      	ldr	r2, [pc, #116]	; (8004bcc <HAL_ADC_ConfigChannel+0x254>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d12b      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x23a>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <HAL_ADC_ConfigChannel+0x258>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d003      	beq.n	8004b6c <HAL_ADC_ConfigChannel+0x1f4>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b11      	cmp	r3, #17
 8004b6a:	d122      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a11      	ldr	r2, [pc, #68]	; (8004bd0 <HAL_ADC_ConfigChannel+0x258>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d111      	bne.n	8004bb2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b8e:	4b11      	ldr	r3, [pc, #68]	; (8004bd4 <HAL_ADC_ConfigChannel+0x25c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a11      	ldr	r2, [pc, #68]	; (8004bd8 <HAL_ADC_ConfigChannel+0x260>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	0c9a      	lsrs	r2, r3, #18
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ba4:	e002      	b.n	8004bac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f9      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	40012300 	.word	0x40012300
 8004bcc:	40012000 	.word	0x40012000
 8004bd0:	10000012 	.word	0x10000012
 8004bd4:	20000014 	.word	0x20000014
 8004bd8:	431bde83 	.word	0x431bde83

08004bdc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004be4:	4b79      	ldr	r3, [pc, #484]	; (8004dcc <ADC_Init+0x1f0>)
 8004be6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	431a      	orrs	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6859      	ldr	r1, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	021a      	lsls	r2, r3, #8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6859      	ldr	r1, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6899      	ldr	r1, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6e:	4a58      	ldr	r2, [pc, #352]	; (8004dd0 <ADC_Init+0x1f4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d022      	beq.n	8004cba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6899      	ldr	r1, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ca4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6899      	ldr	r1, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	e00f      	b.n	8004cda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004cc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f022 0202 	bic.w	r2, r2, #2
 8004ce8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	6899      	ldr	r1, [r3, #8]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	7e1b      	ldrb	r3, [r3, #24]
 8004cf4:	005a      	lsls	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01b      	beq.n	8004d40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6859      	ldr	r1, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	3b01      	subs	r3, #1
 8004d34:	035a      	lsls	r2, r3, #13
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	e007      	b.n	8004d50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	051a      	lsls	r2, r3, #20
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	689a      	ldr	r2, [r3, #8]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6899      	ldr	r1, [r3, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d92:	025a      	lsls	r2, r3, #9
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004daa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6899      	ldr	r1, [r3, #8]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	029a      	lsls	r2, r3, #10
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	609a      	str	r2, [r3, #8]
}
 8004dc0:	bf00      	nop
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	40012300 	.word	0x40012300
 8004dd0:	0f000001 	.word	0x0f000001

08004dd4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004df8:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <__NVIC_SetPriorityGrouping+0x44>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e04:	4013      	ands	r3, r2
 8004e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e1a:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <__NVIC_SetPriorityGrouping+0x44>)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	60d3      	str	r3, [r2, #12]
}
 8004e20:	bf00      	nop
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	e000ed00 	.word	0xe000ed00

08004e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e34:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <__NVIC_GetPriorityGrouping+0x18>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	0a1b      	lsrs	r3, r3, #8
 8004e3a:	f003 0307 	and.w	r3, r3, #7
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	e000ed00 	.word	0xe000ed00

08004e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	4603      	mov	r3, r0
 8004e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	db0b      	blt.n	8004e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	f003 021f 	and.w	r2, r3, #31
 8004e64:	4907      	ldr	r1, [pc, #28]	; (8004e84 <__NVIC_EnableIRQ+0x38>)
 8004e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e6a:	095b      	lsrs	r3, r3, #5
 8004e6c:	2001      	movs	r0, #1
 8004e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	e000e100 	.word	0xe000e100

08004e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	6039      	str	r1, [r7, #0]
 8004e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	db0a      	blt.n	8004eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	490c      	ldr	r1, [pc, #48]	; (8004ed4 <__NVIC_SetPriority+0x4c>)
 8004ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ea6:	0112      	lsls	r2, r2, #4
 8004ea8:	b2d2      	uxtb	r2, r2
 8004eaa:	440b      	add	r3, r1
 8004eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004eb0:	e00a      	b.n	8004ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	4908      	ldr	r1, [pc, #32]	; (8004ed8 <__NVIC_SetPriority+0x50>)
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	3b04      	subs	r3, #4
 8004ec0:	0112      	lsls	r2, r2, #4
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	761a      	strb	r2, [r3, #24]
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	e000e100 	.word	0xe000e100
 8004ed8:	e000ed00 	.word	0xe000ed00

08004edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b089      	sub	sp, #36	; 0x24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	f1c3 0307 	rsb	r3, r3, #7
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	bf28      	it	cs
 8004efa:	2304      	movcs	r3, #4
 8004efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	3304      	adds	r3, #4
 8004f02:	2b06      	cmp	r3, #6
 8004f04:	d902      	bls.n	8004f0c <NVIC_EncodePriority+0x30>
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	3b03      	subs	r3, #3
 8004f0a:	e000      	b.n	8004f0e <NVIC_EncodePriority+0x32>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43da      	mvns	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	401a      	ands	r2, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2e:	43d9      	mvns	r1, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f34:	4313      	orrs	r3, r2
         );
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3724      	adds	r7, #36	; 0x24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f54:	d301      	bcc.n	8004f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f56:	2301      	movs	r3, #1
 8004f58:	e00f      	b.n	8004f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f5a:	4a0a      	ldr	r2, [pc, #40]	; (8004f84 <SysTick_Config+0x40>)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f62:	210f      	movs	r1, #15
 8004f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f68:	f7ff ff8e 	bl	8004e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f6c:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <SysTick_Config+0x40>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f72:	4b04      	ldr	r3, [pc, #16]	; (8004f84 <SysTick_Config+0x40>)
 8004f74:	2207      	movs	r2, #7
 8004f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3708      	adds	r7, #8
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	e000e010 	.word	0xe000e010

08004f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff ff29 	bl	8004de8 <__NVIC_SetPriorityGrouping>
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b086      	sub	sp, #24
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	60b9      	str	r1, [r7, #8]
 8004fa8:	607a      	str	r2, [r7, #4]
 8004faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fb0:	f7ff ff3e 	bl	8004e30 <__NVIC_GetPriorityGrouping>
 8004fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	68b9      	ldr	r1, [r7, #8]
 8004fba:	6978      	ldr	r0, [r7, #20]
 8004fbc:	f7ff ff8e 	bl	8004edc <NVIC_EncodePriority>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff ff5d 	bl	8004e88 <__NVIC_SetPriority>
}
 8004fce:	bf00      	nop
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b082      	sub	sp, #8
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	4603      	mov	r3, r0
 8004fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7ff ff31 	bl	8004e4c <__NVIC_EnableIRQ>
}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff ffa2 	bl	8004f44 <SysTick_Config>
 8005000:	4603      	mov	r3, r0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3708      	adds	r7, #8
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
	...

0800500c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005018:	f7ff f98c 	bl	8004334 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e099      	b.n	800515c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2202      	movs	r2, #2
 800502c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0201 	bic.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005048:	e00f      	b.n	800506a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800504a:	f7ff f973 	bl	8004334 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b05      	cmp	r3, #5
 8005056:	d908      	bls.n	800506a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2203      	movs	r2, #3
 8005062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e078      	b.n	800515c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e8      	bne.n	800504a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4b38      	ldr	r3, [pc, #224]	; (8005164 <HAL_DMA_Init+0x158>)
 8005084:	4013      	ands	r3, r2
 8005086:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005096:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d107      	bne.n	80050d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	4313      	orrs	r3, r2
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f023 0307 	bic.w	r3, r3, #7
 80050ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d117      	bne.n	800512e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00e      	beq.n	800512e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fa7b 	bl	800560c <DMA_CheckFifoParam>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d008      	beq.n	800512e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2240      	movs	r2, #64	; 0x40
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800512a:	2301      	movs	r3, #1
 800512c:	e016      	b.n	800515c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fa32 	bl	80055a0 <DMA_CalcBaseAndBitshift>
 800513c:	4603      	mov	r3, r0
 800513e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005144:	223f      	movs	r2, #63	; 0x3f
 8005146:	409a      	lsls	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3718      	adds	r7, #24
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	f010803f 	.word	0xf010803f

08005168 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005174:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005176:	f7ff f8dd 	bl	8004334 <HAL_GetTick>
 800517a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d008      	beq.n	800519a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2280      	movs	r2, #128	; 0x80
 800518c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e052      	b.n	8005240 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0216 	bic.w	r2, r2, #22
 80051a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	695a      	ldr	r2, [r3, #20]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <HAL_DMA_Abort+0x62>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0208 	bic.w	r2, r2, #8
 80051d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 0201 	bic.w	r2, r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051ea:	e013      	b.n	8005214 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051ec:	f7ff f8a2 	bl	8004334 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	d90c      	bls.n	8005214 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2203      	movs	r2, #3
 8005204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e015      	b.n	8005240 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e4      	bne.n	80051ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005226:	223f      	movs	r2, #63	; 0x3f
 8005228:	409a      	lsls	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d004      	beq.n	8005266 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2280      	movs	r2, #128	; 0x80
 8005260:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e00c      	b.n	8005280 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2205      	movs	r2, #5
 800526a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b086      	sub	sp, #24
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005294:	2300      	movs	r3, #0
 8005296:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005298:	4b8e      	ldr	r3, [pc, #568]	; (80054d4 <HAL_DMA_IRQHandler+0x248>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a8e      	ldr	r2, [pc, #568]	; (80054d8 <HAL_DMA_IRQHandler+0x24c>)
 800529e:	fba2 2303 	umull	r2, r3, r2, r3
 80052a2:	0a9b      	lsrs	r3, r3, #10
 80052a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b6:	2208      	movs	r2, #8
 80052b8:	409a      	lsls	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	4013      	ands	r3, r2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d01a      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d013      	beq.n	80052f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 0204 	bic.w	r2, r2, #4
 80052de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e4:	2208      	movs	r2, #8
 80052e6:	409a      	lsls	r2, r3
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f0:	f043 0201 	orr.w	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052fc:	2201      	movs	r2, #1
 80052fe:	409a      	lsls	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d012      	beq.n	800532e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531a:	2201      	movs	r2, #1
 800531c:	409a      	lsls	r2, r3
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005326:	f043 0202 	orr.w	r2, r3, #2
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005332:	2204      	movs	r2, #4
 8005334:	409a      	lsls	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4013      	ands	r3, r2
 800533a:	2b00      	cmp	r3, #0
 800533c:	d012      	beq.n	8005364 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00b      	beq.n	8005364 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005350:	2204      	movs	r2, #4
 8005352:	409a      	lsls	r2, r3
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800535c:	f043 0204 	orr.w	r2, r3, #4
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005368:	2210      	movs	r2, #16
 800536a:	409a      	lsls	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4013      	ands	r3, r2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d043      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d03c      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005386:	2210      	movs	r2, #16
 8005388:	409a      	lsls	r2, r3
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d018      	beq.n	80053ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d108      	bne.n	80053bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d024      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
 80053ba:	e01f      	b.n	80053fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01b      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	4798      	blx	r3
 80053cc:	e016      	b.n	80053fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d107      	bne.n	80053ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f022 0208 	bic.w	r2, r2, #8
 80053ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005400:	2220      	movs	r2, #32
 8005402:	409a      	lsls	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	4013      	ands	r3, r2
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 808f 	beq.w	800552c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	2b00      	cmp	r3, #0
 800541a:	f000 8087 	beq.w	800552c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005422:	2220      	movs	r2, #32
 8005424:	409a      	lsls	r2, r3
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b05      	cmp	r3, #5
 8005434:	d136      	bne.n	80054a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0216 	bic.w	r2, r2, #22
 8005444:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	695a      	ldr	r2, [r3, #20]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005454:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	d103      	bne.n	8005466 <HAL_DMA_IRQHandler+0x1da>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005462:	2b00      	cmp	r3, #0
 8005464:	d007      	beq.n	8005476 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 0208 	bic.w	r2, r2, #8
 8005474:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800547a:	223f      	movs	r2, #63	; 0x3f
 800547c:	409a      	lsls	r2, r3
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005496:	2b00      	cmp	r3, #0
 8005498:	d07e      	beq.n	8005598 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
        }
        return;
 80054a2:	e079      	b.n	8005598 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d01d      	beq.n	80054ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10d      	bne.n	80054dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d031      	beq.n	800552c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	4798      	blx	r3
 80054d0:	e02c      	b.n	800552c <HAL_DMA_IRQHandler+0x2a0>
 80054d2:	bf00      	nop
 80054d4:	20000014 	.word	0x20000014
 80054d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d023      	beq.n	800552c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	4798      	blx	r3
 80054ec:	e01e      	b.n	800552c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10f      	bne.n	800551c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f022 0210 	bic.w	r2, r2, #16
 800550a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005530:	2b00      	cmp	r3, #0
 8005532:	d032      	beq.n	800559a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d022      	beq.n	8005586 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2205      	movs	r2, #5
 8005544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	3301      	adds	r3, #1
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	429a      	cmp	r2, r3
 8005562:	d307      	bcc.n	8005574 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f2      	bne.n	8005558 <HAL_DMA_IRQHandler+0x2cc>
 8005572:	e000      	b.n	8005576 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005574:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
 8005596:	e000      	b.n	800559a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005598:	bf00      	nop
    }
  }
}
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	3b10      	subs	r3, #16
 80055b0:	4a14      	ldr	r2, [pc, #80]	; (8005604 <DMA_CalcBaseAndBitshift+0x64>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	091b      	lsrs	r3, r3, #4
 80055b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055ba:	4a13      	ldr	r2, [pc, #76]	; (8005608 <DMA_CalcBaseAndBitshift+0x68>)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d909      	bls.n	80055e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055d6:	f023 0303 	bic.w	r3, r3, #3
 80055da:	1d1a      	adds	r2, r3, #4
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	659a      	str	r2, [r3, #88]	; 0x58
 80055e0:	e007      	b.n	80055f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	aaaaaaab 	.word	0xaaaaaaab
 8005608:	0800ac28 	.word	0x0800ac28

0800560c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d11f      	bne.n	8005666 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d856      	bhi.n	80056da <DMA_CheckFifoParam+0xce>
 800562c:	a201      	add	r2, pc, #4	; (adr r2, 8005634 <DMA_CheckFifoParam+0x28>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005645 	.word	0x08005645
 8005638:	08005657 	.word	0x08005657
 800563c:	08005645 	.word	0x08005645
 8005640:	080056db 	.word	0x080056db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d046      	beq.n	80056de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005654:	e043      	b.n	80056de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800565e:	d140      	bne.n	80056e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005664:	e03d      	b.n	80056e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800566e:	d121      	bne.n	80056b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b03      	cmp	r3, #3
 8005674:	d837      	bhi.n	80056e6 <DMA_CheckFifoParam+0xda>
 8005676:	a201      	add	r2, pc, #4	; (adr r2, 800567c <DMA_CheckFifoParam+0x70>)
 8005678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567c:	0800568d 	.word	0x0800568d
 8005680:	08005693 	.word	0x08005693
 8005684:	0800568d 	.word	0x0800568d
 8005688:	080056a5 	.word	0x080056a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	73fb      	strb	r3, [r7, #15]
      break;
 8005690:	e030      	b.n	80056f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d025      	beq.n	80056ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056a2:	e022      	b.n	80056ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056ac:	d11f      	bne.n	80056ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056b2:	e01c      	b.n	80056ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d903      	bls.n	80056c2 <DMA_CheckFifoParam+0xb6>
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d003      	beq.n	80056c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056c0:	e018      	b.n	80056f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
      break;
 80056c6:	e015      	b.n	80056f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00e      	beq.n	80056f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
      break;
 80056d8:	e00b      	b.n	80056f2 <DMA_CheckFifoParam+0xe6>
      break;
 80056da:	bf00      	nop
 80056dc:	e00a      	b.n	80056f4 <DMA_CheckFifoParam+0xe8>
      break;
 80056de:	bf00      	nop
 80056e0:	e008      	b.n	80056f4 <DMA_CheckFifoParam+0xe8>
      break;
 80056e2:	bf00      	nop
 80056e4:	e006      	b.n	80056f4 <DMA_CheckFifoParam+0xe8>
      break;
 80056e6:	bf00      	nop
 80056e8:	e004      	b.n	80056f4 <DMA_CheckFifoParam+0xe8>
      break;
 80056ea:	bf00      	nop
 80056ec:	e002      	b.n	80056f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80056ee:	bf00      	nop
 80056f0:	e000      	b.n	80056f4 <DMA_CheckFifoParam+0xe8>
      break;
 80056f2:	bf00      	nop
    }
  } 
  
  return status; 
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop

08005704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005704:	b480      	push	{r7}
 8005706:	b089      	sub	sp, #36	; 0x24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005712:	2300      	movs	r3, #0
 8005714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
 800571e:	e159      	b.n	80059d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005720:	2201      	movs	r2, #1
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4013      	ands	r3, r2
 8005732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	429a      	cmp	r2, r3
 800573a:	f040 8148 	bne.w	80059ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b01      	cmp	r3, #1
 8005748:	d005      	beq.n	8005756 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005752:	2b02      	cmp	r3, #2
 8005754:	d130      	bne.n	80057b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	2203      	movs	r2, #3
 8005762:	fa02 f303 	lsl.w	r3, r2, r3
 8005766:	43db      	mvns	r3, r3
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	4013      	ands	r3, r2
 800576c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	005b      	lsls	r3, r3, #1
 8005776:	fa02 f303 	lsl.w	r3, r2, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4313      	orrs	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800578c:	2201      	movs	r2, #1
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	43db      	mvns	r3, r3
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	4013      	ands	r3, r2
 800579a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	091b      	lsrs	r3, r3, #4
 80057a2:	f003 0201 	and.w	r2, r3, #1
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f003 0303 	and.w	r3, r3, #3
 80057c0:	2b03      	cmp	r3, #3
 80057c2:	d017      	beq.n	80057f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	2203      	movs	r2, #3
 80057d0:	fa02 f303 	lsl.w	r3, r2, r3
 80057d4:	43db      	mvns	r3, r3
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	4013      	ands	r3, r2
 80057da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	005b      	lsls	r3, r3, #1
 80057e4:	fa02 f303 	lsl.w	r3, r2, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f003 0303 	and.w	r3, r3, #3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d123      	bne.n	8005848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	08da      	lsrs	r2, r3, #3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3208      	adds	r2, #8
 8005808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	220f      	movs	r2, #15
 8005818:	fa02 f303 	lsl.w	r3, r2, r3
 800581c:	43db      	mvns	r3, r3
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4013      	ands	r3, r2
 8005822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	fa02 f303 	lsl.w	r3, r2, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	4313      	orrs	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	08da      	lsrs	r2, r3, #3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	3208      	adds	r2, #8
 8005842:	69b9      	ldr	r1, [r7, #24]
 8005844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	2203      	movs	r2, #3
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	43db      	mvns	r3, r3
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	4013      	ands	r3, r2
 800585e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f003 0203 	and.w	r2, r3, #3
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	fa02 f303 	lsl.w	r3, r2, r3
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	4313      	orrs	r3, r2
 8005874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80a2 	beq.w	80059ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	4b57      	ldr	r3, [pc, #348]	; (80059ec <HAL_GPIO_Init+0x2e8>)
 8005890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005892:	4a56      	ldr	r2, [pc, #344]	; (80059ec <HAL_GPIO_Init+0x2e8>)
 8005894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005898:	6453      	str	r3, [r2, #68]	; 0x44
 800589a:	4b54      	ldr	r3, [pc, #336]	; (80059ec <HAL_GPIO_Init+0x2e8>)
 800589c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058a2:	60fb      	str	r3, [r7, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058a6:	4a52      	ldr	r2, [pc, #328]	; (80059f0 <HAL_GPIO_Init+0x2ec>)
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	089b      	lsrs	r3, r3, #2
 80058ac:	3302      	adds	r3, #2
 80058ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	220f      	movs	r2, #15
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	43db      	mvns	r3, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	4013      	ands	r3, r2
 80058c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a49      	ldr	r2, [pc, #292]	; (80059f4 <HAL_GPIO_Init+0x2f0>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d019      	beq.n	8005906 <HAL_GPIO_Init+0x202>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a48      	ldr	r2, [pc, #288]	; (80059f8 <HAL_GPIO_Init+0x2f4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <HAL_GPIO_Init+0x1fe>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a47      	ldr	r2, [pc, #284]	; (80059fc <HAL_GPIO_Init+0x2f8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00d      	beq.n	80058fe <HAL_GPIO_Init+0x1fa>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a46      	ldr	r2, [pc, #280]	; (8005a00 <HAL_GPIO_Init+0x2fc>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d007      	beq.n	80058fa <HAL_GPIO_Init+0x1f6>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a45      	ldr	r2, [pc, #276]	; (8005a04 <HAL_GPIO_Init+0x300>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d101      	bne.n	80058f6 <HAL_GPIO_Init+0x1f2>
 80058f2:	2304      	movs	r3, #4
 80058f4:	e008      	b.n	8005908 <HAL_GPIO_Init+0x204>
 80058f6:	2307      	movs	r3, #7
 80058f8:	e006      	b.n	8005908 <HAL_GPIO_Init+0x204>
 80058fa:	2303      	movs	r3, #3
 80058fc:	e004      	b.n	8005908 <HAL_GPIO_Init+0x204>
 80058fe:	2302      	movs	r3, #2
 8005900:	e002      	b.n	8005908 <HAL_GPIO_Init+0x204>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <HAL_GPIO_Init+0x204>
 8005906:	2300      	movs	r3, #0
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	f002 0203 	and.w	r2, r2, #3
 800590e:	0092      	lsls	r2, r2, #2
 8005910:	4093      	lsls	r3, r2
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	4313      	orrs	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005918:	4935      	ldr	r1, [pc, #212]	; (80059f0 <HAL_GPIO_Init+0x2ec>)
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	089b      	lsrs	r3, r3, #2
 800591e:	3302      	adds	r3, #2
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005926:	4b38      	ldr	r3, [pc, #224]	; (8005a08 <HAL_GPIO_Init+0x304>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	43db      	mvns	r3, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4013      	ands	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	4313      	orrs	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800594a:	4a2f      	ldr	r2, [pc, #188]	; (8005a08 <HAL_GPIO_Init+0x304>)
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005950:	4b2d      	ldr	r3, [pc, #180]	; (8005a08 <HAL_GPIO_Init+0x304>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	43db      	mvns	r3, r3
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	4013      	ands	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005974:	4a24      	ldr	r2, [pc, #144]	; (8005a08 <HAL_GPIO_Init+0x304>)
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800597a:	4b23      	ldr	r3, [pc, #140]	; (8005a08 <HAL_GPIO_Init+0x304>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	43db      	mvns	r3, r3
 8005984:	69ba      	ldr	r2, [r7, #24]
 8005986:	4013      	ands	r3, r2
 8005988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	4313      	orrs	r3, r2
 800599c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800599e:	4a1a      	ldr	r2, [pc, #104]	; (8005a08 <HAL_GPIO_Init+0x304>)
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059a4:	4b18      	ldr	r3, [pc, #96]	; (8005a08 <HAL_GPIO_Init+0x304>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	43db      	mvns	r3, r3
 80059ae:	69ba      	ldr	r2, [r7, #24]
 80059b0:	4013      	ands	r3, r2
 80059b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80059c0:	69ba      	ldr	r2, [r7, #24]
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059c8:	4a0f      	ldr	r2, [pc, #60]	; (8005a08 <HAL_GPIO_Init+0x304>)
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	3301      	adds	r3, #1
 80059d2:	61fb      	str	r3, [r7, #28]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	2b0f      	cmp	r3, #15
 80059d8:	f67f aea2 	bls.w	8005720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	3724      	adds	r7, #36	; 0x24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	40023800 	.word	0x40023800
 80059f0:	40013800 	.word	0x40013800
 80059f4:	40020000 	.word	0x40020000
 80059f8:	40020400 	.word	0x40020400
 80059fc:	40020800 	.word	0x40020800
 8005a00:	40020c00 	.word	0x40020c00
 8005a04:	40021000 	.word	0x40021000
 8005a08:	40013c00 	.word	0x40013c00

08005a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	807b      	strh	r3, [r7, #2]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a1c:	787b      	ldrb	r3, [r7, #1]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a22:	887a      	ldrh	r2, [r7, #2]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a28:	e003      	b.n	8005a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a2a:	887b      	ldrh	r3, [r7, #2]
 8005a2c:	041a      	lsls	r2, r3, #16
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	619a      	str	r2, [r3, #24]
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b085      	sub	sp, #20
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	460b      	mov	r3, r1
 8005a48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005a50:	887a      	ldrh	r2, [r7, #2]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	4013      	ands	r3, r2
 8005a56:	041a      	lsls	r2, r3, #16
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	43d9      	mvns	r1, r3
 8005a5c:	887b      	ldrh	r3, [r7, #2]
 8005a5e:	400b      	ands	r3, r1
 8005a60:	431a      	orrs	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	619a      	str	r2, [r3, #24]
}
 8005a66:	bf00      	nop
 8005a68:	3714      	adds	r7, #20
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005a7e:	4b08      	ldr	r3, [pc, #32]	; (8005aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a80:	695a      	ldr	r2, [r3, #20]
 8005a82:	88fb      	ldrh	r3, [r7, #6]
 8005a84:	4013      	ands	r3, r2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d006      	beq.n	8005a98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a8a:	4a05      	ldr	r2, [pc, #20]	; (8005aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a8c:	88fb      	ldrh	r3, [r7, #6]
 8005a8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a90:	88fb      	ldrh	r3, [r7, #6]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7fc fd5a 	bl	800254c <HAL_GPIO_EXTI_Callback>
  }
}
 8005a98:	bf00      	nop
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40013c00 	.word	0x40013c00

08005aa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e267      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d075      	beq.n	8005bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ac2:	4b88      	ldr	r3, [pc, #544]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	f003 030c 	and.w	r3, r3, #12
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d00c      	beq.n	8005ae8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ace:	4b85      	ldr	r3, [pc, #532]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d112      	bne.n	8005b00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ada:	4b82      	ldr	r3, [pc, #520]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ae6:	d10b      	bne.n	8005b00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ae8:	4b7e      	ldr	r3, [pc, #504]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d05b      	beq.n	8005bac <HAL_RCC_OscConfig+0x108>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d157      	bne.n	8005bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e242      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b08:	d106      	bne.n	8005b18 <HAL_RCC_OscConfig+0x74>
 8005b0a:	4b76      	ldr	r3, [pc, #472]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a75      	ldr	r2, [pc, #468]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	e01d      	b.n	8005b54 <HAL_RCC_OscConfig+0xb0>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b20:	d10c      	bne.n	8005b3c <HAL_RCC_OscConfig+0x98>
 8005b22:	4b70      	ldr	r3, [pc, #448]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a6f      	ldr	r2, [pc, #444]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	4b6d      	ldr	r3, [pc, #436]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a6c      	ldr	r2, [pc, #432]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	e00b      	b.n	8005b54 <HAL_RCC_OscConfig+0xb0>
 8005b3c:	4b69      	ldr	r3, [pc, #420]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a68      	ldr	r2, [pc, #416]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b46:	6013      	str	r3, [r2, #0]
 8005b48:	4b66      	ldr	r3, [pc, #408]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a65      	ldr	r2, [pc, #404]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d013      	beq.n	8005b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b5c:	f7fe fbea 	bl	8004334 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b64:	f7fe fbe6 	bl	8004334 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	2b64      	cmp	r3, #100	; 0x64
 8005b70:	d901      	bls.n	8005b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e207      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b76:	4b5b      	ldr	r3, [pc, #364]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d0f0      	beq.n	8005b64 <HAL_RCC_OscConfig+0xc0>
 8005b82:	e014      	b.n	8005bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b84:	f7fe fbd6 	bl	8004334 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b8c:	f7fe fbd2 	bl	8004334 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b64      	cmp	r3, #100	; 0x64
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e1f3      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b9e:	4b51      	ldr	r3, [pc, #324]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f0      	bne.n	8005b8c <HAL_RCC_OscConfig+0xe8>
 8005baa:	e000      	b.n	8005bae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d063      	beq.n	8005c82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bba:	4b4a      	ldr	r3, [pc, #296]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	f003 030c 	and.w	r3, r3, #12
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00b      	beq.n	8005bde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bc6:	4b47      	ldr	r3, [pc, #284]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bce:	2b08      	cmp	r3, #8
 8005bd0:	d11c      	bne.n	8005c0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bd2:	4b44      	ldr	r3, [pc, #272]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d116      	bne.n	8005c0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bde:	4b41      	ldr	r3, [pc, #260]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0302 	and.w	r3, r3, #2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x152>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d001      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e1c7      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf6:	4b3b      	ldr	r3, [pc, #236]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	4937      	ldr	r1, [pc, #220]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c0a:	e03a      	b.n	8005c82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d020      	beq.n	8005c56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c14:	4b34      	ldr	r3, [pc, #208]	; (8005ce8 <HAL_RCC_OscConfig+0x244>)
 8005c16:	2201      	movs	r2, #1
 8005c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1a:	f7fe fb8b 	bl	8004334 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c20:	e008      	b.n	8005c34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c22:	f7fe fb87 	bl	8004334 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e1a8      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c34:	4b2b      	ldr	r3, [pc, #172]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0f0      	beq.n	8005c22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c40:	4b28      	ldr	r3, [pc, #160]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	4925      	ldr	r1, [pc, #148]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	600b      	str	r3, [r1, #0]
 8005c54:	e015      	b.n	8005c82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c56:	4b24      	ldr	r3, [pc, #144]	; (8005ce8 <HAL_RCC_OscConfig+0x244>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c5c:	f7fe fb6a 	bl	8004334 <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c64:	f7fe fb66 	bl	8004334 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e187      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c76:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1f0      	bne.n	8005c64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d036      	beq.n	8005cfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d016      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c96:	4b15      	ldr	r3, [pc, #84]	; (8005cec <HAL_RCC_OscConfig+0x248>)
 8005c98:	2201      	movs	r2, #1
 8005c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9c:	f7fe fb4a 	bl	8004334 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ca4:	f7fe fb46 	bl	8004334 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e167      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <HAL_RCC_OscConfig+0x240>)
 8005cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cba:	f003 0302 	and.w	r3, r3, #2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0f0      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x200>
 8005cc2:	e01b      	b.n	8005cfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc4:	4b09      	ldr	r3, [pc, #36]	; (8005cec <HAL_RCC_OscConfig+0x248>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cca:	f7fe fb33 	bl	8004334 <HAL_GetTick>
 8005cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd0:	e00e      	b.n	8005cf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cd2:	f7fe fb2f 	bl	8004334 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d907      	bls.n	8005cf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e150      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	42470000 	.word	0x42470000
 8005cec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf0:	4b88      	ldr	r3, [pc, #544]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf4:	f003 0302 	and.w	r3, r3, #2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1ea      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 8097 	beq.w	8005e38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d0e:	4b81      	ldr	r3, [pc, #516]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10f      	bne.n	8005d3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60bb      	str	r3, [r7, #8]
 8005d1e:	4b7d      	ldr	r3, [pc, #500]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	4a7c      	ldr	r2, [pc, #496]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d28:	6413      	str	r3, [r2, #64]	; 0x40
 8005d2a:	4b7a      	ldr	r3, [pc, #488]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d32:	60bb      	str	r3, [r7, #8]
 8005d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d36:	2301      	movs	r3, #1
 8005d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3a:	4b77      	ldr	r3, [pc, #476]	; (8005f18 <HAL_RCC_OscConfig+0x474>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d118      	bne.n	8005d78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d46:	4b74      	ldr	r3, [pc, #464]	; (8005f18 <HAL_RCC_OscConfig+0x474>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a73      	ldr	r2, [pc, #460]	; (8005f18 <HAL_RCC_OscConfig+0x474>)
 8005d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d52:	f7fe faef 	bl	8004334 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d5a:	f7fe faeb 	bl	8004334 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e10c      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d6c:	4b6a      	ldr	r3, [pc, #424]	; (8005f18 <HAL_RCC_OscConfig+0x474>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f0      	beq.n	8005d5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d106      	bne.n	8005d8e <HAL_RCC_OscConfig+0x2ea>
 8005d80:	4b64      	ldr	r3, [pc, #400]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d84:	4a63      	ldr	r2, [pc, #396]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d86:	f043 0301 	orr.w	r3, r3, #1
 8005d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d8c:	e01c      	b.n	8005dc8 <HAL_RCC_OscConfig+0x324>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b05      	cmp	r3, #5
 8005d94:	d10c      	bne.n	8005db0 <HAL_RCC_OscConfig+0x30c>
 8005d96:	4b5f      	ldr	r3, [pc, #380]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9a:	4a5e      	ldr	r2, [pc, #376]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005d9c:	f043 0304 	orr.w	r3, r3, #4
 8005da0:	6713      	str	r3, [r2, #112]	; 0x70
 8005da2:	4b5c      	ldr	r3, [pc, #368]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	4a5b      	ldr	r2, [pc, #364]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005da8:	f043 0301 	orr.w	r3, r3, #1
 8005dac:	6713      	str	r3, [r2, #112]	; 0x70
 8005dae:	e00b      	b.n	8005dc8 <HAL_RCC_OscConfig+0x324>
 8005db0:	4b58      	ldr	r3, [pc, #352]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db4:	4a57      	ldr	r2, [pc, #348]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005db6:	f023 0301 	bic.w	r3, r3, #1
 8005dba:	6713      	str	r3, [r2, #112]	; 0x70
 8005dbc:	4b55      	ldr	r3, [pc, #340]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc0:	4a54      	ldr	r2, [pc, #336]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005dc2:	f023 0304 	bic.w	r3, r3, #4
 8005dc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d015      	beq.n	8005dfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd0:	f7fe fab0 	bl	8004334 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd6:	e00a      	b.n	8005dee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dd8:	f7fe faac 	bl	8004334 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e0cb      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dee:	4b49      	ldr	r3, [pc, #292]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0ee      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x334>
 8005dfa:	e014      	b.n	8005e26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dfc:	f7fe fa9a 	bl	8004334 <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e02:	e00a      	b.n	8005e1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e04:	f7fe fa96 	bl	8004334 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e0b5      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e1a:	4b3e      	ldr	r3, [pc, #248]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1ee      	bne.n	8005e04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d105      	bne.n	8005e38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e2c:	4b39      	ldr	r3, [pc, #228]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e30:	4a38      	ldr	r2, [pc, #224]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f000 80a1 	beq.w	8005f84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e42:	4b34      	ldr	r3, [pc, #208]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 030c 	and.w	r3, r3, #12
 8005e4a:	2b08      	cmp	r3, #8
 8005e4c:	d05c      	beq.n	8005f08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d141      	bne.n	8005eda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e56:	4b31      	ldr	r3, [pc, #196]	; (8005f1c <HAL_RCC_OscConfig+0x478>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e5c:	f7fe fa6a 	bl	8004334 <HAL_GetTick>
 8005e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e64:	f7fe fa66 	bl	8004334 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e087      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e76:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f0      	bne.n	8005e64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69da      	ldr	r2, [r3, #28]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	019b      	lsls	r3, r3, #6
 8005e92:	431a      	orrs	r2, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	041b      	lsls	r3, r3, #16
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	061b      	lsls	r3, r3, #24
 8005ea6:	491b      	ldr	r1, [pc, #108]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eac:	4b1b      	ldr	r3, [pc, #108]	; (8005f1c <HAL_RCC_OscConfig+0x478>)
 8005eae:	2201      	movs	r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb2:	f7fe fa3f 	bl	8004334 <HAL_GetTick>
 8005eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb8:	e008      	b.n	8005ecc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eba:	f7fe fa3b 	bl	8004334 <HAL_GetTick>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d901      	bls.n	8005ecc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e05c      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ecc:	4b11      	ldr	r3, [pc, #68]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d0f0      	beq.n	8005eba <HAL_RCC_OscConfig+0x416>
 8005ed8:	e054      	b.n	8005f84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eda:	4b10      	ldr	r3, [pc, #64]	; (8005f1c <HAL_RCC_OscConfig+0x478>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee0:	f7fe fa28 	bl	8004334 <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ee8:	f7fe fa24 	bl	8004334 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e045      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <HAL_RCC_OscConfig+0x470>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1f0      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x444>
 8005f06:	e03d      	b.n	8005f84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d107      	bne.n	8005f20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e038      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
 8005f14:	40023800 	.word	0x40023800
 8005f18:	40007000 	.word	0x40007000
 8005f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f20:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <HAL_RCC_OscConfig+0x4ec>)
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d028      	beq.n	8005f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d121      	bne.n	8005f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d11a      	bne.n	8005f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f50:	4013      	ands	r3, r2
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d111      	bne.n	8005f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	085b      	lsrs	r3, r3, #1
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d107      	bne.n	8005f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d001      	beq.n	8005f84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e000      	b.n	8005f86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	40023800 	.word	0x40023800

08005f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0cc      	b.n	8006142 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fa8:	4b68      	ldr	r3, [pc, #416]	; (800614c <HAL_RCC_ClockConfig+0x1b8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d90c      	bls.n	8005fd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb6:	4b65      	ldr	r3, [pc, #404]	; (800614c <HAL_RCC_ClockConfig+0x1b8>)
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fbe:	4b63      	ldr	r3, [pc, #396]	; (800614c <HAL_RCC_ClockConfig+0x1b8>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d001      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e0b8      	b.n	8006142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d020      	beq.n	800601e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fe8:	4b59      	ldr	r3, [pc, #356]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	4a58      	ldr	r2, [pc, #352]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8005fee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005ff2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0308 	and.w	r3, r3, #8
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006000:	4b53      	ldr	r3, [pc, #332]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	4a52      	ldr	r2, [pc, #328]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006006:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800600a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800600c:	4b50      	ldr	r3, [pc, #320]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	494d      	ldr	r1, [pc, #308]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 800601a:	4313      	orrs	r3, r2
 800601c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d044      	beq.n	80060b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d107      	bne.n	8006042 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006032:	4b47      	ldr	r3, [pc, #284]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d119      	bne.n	8006072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	e07f      	b.n	8006142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d003      	beq.n	8006052 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800604e:	2b03      	cmp	r3, #3
 8006050:	d107      	bne.n	8006062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006052:	4b3f      	ldr	r3, [pc, #252]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d109      	bne.n	8006072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e06f      	b.n	8006142 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006062:	4b3b      	ldr	r3, [pc, #236]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e067      	b.n	8006142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006072:	4b37      	ldr	r3, [pc, #220]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f023 0203 	bic.w	r2, r3, #3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	4934      	ldr	r1, [pc, #208]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006080:	4313      	orrs	r3, r2
 8006082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006084:	f7fe f956 	bl	8004334 <HAL_GetTick>
 8006088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608a:	e00a      	b.n	80060a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800608c:	f7fe f952 	bl	8004334 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	f241 3288 	movw	r2, #5000	; 0x1388
 800609a:	4293      	cmp	r3, r2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e04f      	b.n	8006142 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a2:	4b2b      	ldr	r3, [pc, #172]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	f003 020c 	and.w	r2, r3, #12
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d1eb      	bne.n	800608c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060b4:	4b25      	ldr	r3, [pc, #148]	; (800614c <HAL_RCC_ClockConfig+0x1b8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	683a      	ldr	r2, [r7, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d20c      	bcs.n	80060dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c2:	4b22      	ldr	r3, [pc, #136]	; (800614c <HAL_RCC_ClockConfig+0x1b8>)
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ca:	4b20      	ldr	r3, [pc, #128]	; (800614c <HAL_RCC_ClockConfig+0x1b8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0307 	and.w	r3, r3, #7
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d001      	beq.n	80060dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e032      	b.n	8006142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d008      	beq.n	80060fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060e8:	4b19      	ldr	r3, [pc, #100]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4916      	ldr	r1, [pc, #88]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d009      	beq.n	800611a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006106:	4b12      	ldr	r3, [pc, #72]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	490e      	ldr	r1, [pc, #56]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006116:	4313      	orrs	r3, r2
 8006118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800611a:	f000 f821 	bl	8006160 <HAL_RCC_GetSysClockFreq>
 800611e:	4602      	mov	r2, r0
 8006120:	4b0b      	ldr	r3, [pc, #44]	; (8006150 <HAL_RCC_ClockConfig+0x1bc>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	091b      	lsrs	r3, r3, #4
 8006126:	f003 030f 	and.w	r3, r3, #15
 800612a:	490a      	ldr	r1, [pc, #40]	; (8006154 <HAL_RCC_ClockConfig+0x1c0>)
 800612c:	5ccb      	ldrb	r3, [r1, r3]
 800612e:	fa22 f303 	lsr.w	r3, r2, r3
 8006132:	4a09      	ldr	r2, [pc, #36]	; (8006158 <HAL_RCC_ClockConfig+0x1c4>)
 8006134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006136:	4b09      	ldr	r3, [pc, #36]	; (800615c <HAL_RCC_ClockConfig+0x1c8>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f7fe f8b6 	bl	80042ac <HAL_InitTick>

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	40023c00 	.word	0x40023c00
 8006150:	40023800 	.word	0x40023800
 8006154:	0800ac10 	.word	0x0800ac10
 8006158:	20000014 	.word	0x20000014
 800615c:	20000018 	.word	0x20000018

08006160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006164:	b094      	sub	sp, #80	; 0x50
 8006166:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	647b      	str	r3, [r7, #68]	; 0x44
 800616c:	2300      	movs	r3, #0
 800616e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006170:	2300      	movs	r3, #0
 8006172:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006178:	4b79      	ldr	r3, [pc, #484]	; (8006360 <HAL_RCC_GetSysClockFreq+0x200>)
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f003 030c 	and.w	r3, r3, #12
 8006180:	2b08      	cmp	r3, #8
 8006182:	d00d      	beq.n	80061a0 <HAL_RCC_GetSysClockFreq+0x40>
 8006184:	2b08      	cmp	r3, #8
 8006186:	f200 80e1 	bhi.w	800634c <HAL_RCC_GetSysClockFreq+0x1ec>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <HAL_RCC_GetSysClockFreq+0x34>
 800618e:	2b04      	cmp	r3, #4
 8006190:	d003      	beq.n	800619a <HAL_RCC_GetSysClockFreq+0x3a>
 8006192:	e0db      	b.n	800634c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006194:	4b73      	ldr	r3, [pc, #460]	; (8006364 <HAL_RCC_GetSysClockFreq+0x204>)
 8006196:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006198:	e0db      	b.n	8006352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800619a:	4b73      	ldr	r3, [pc, #460]	; (8006368 <HAL_RCC_GetSysClockFreq+0x208>)
 800619c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800619e:	e0d8      	b.n	8006352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061a0:	4b6f      	ldr	r3, [pc, #444]	; (8006360 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061aa:	4b6d      	ldr	r3, [pc, #436]	; (8006360 <HAL_RCC_GetSysClockFreq+0x200>)
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d063      	beq.n	800627e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061b6:	4b6a      	ldr	r3, [pc, #424]	; (8006360 <HAL_RCC_GetSysClockFreq+0x200>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	099b      	lsrs	r3, r3, #6
 80061bc:	2200      	movs	r2, #0
 80061be:	63bb      	str	r3, [r7, #56]	; 0x38
 80061c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c8:	633b      	str	r3, [r7, #48]	; 0x30
 80061ca:	2300      	movs	r3, #0
 80061cc:	637b      	str	r3, [r7, #52]	; 0x34
 80061ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061d2:	4622      	mov	r2, r4
 80061d4:	462b      	mov	r3, r5
 80061d6:	f04f 0000 	mov.w	r0, #0
 80061da:	f04f 0100 	mov.w	r1, #0
 80061de:	0159      	lsls	r1, r3, #5
 80061e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061e4:	0150      	lsls	r0, r2, #5
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	4621      	mov	r1, r4
 80061ec:	1a51      	subs	r1, r2, r1
 80061ee:	6139      	str	r1, [r7, #16]
 80061f0:	4629      	mov	r1, r5
 80061f2:	eb63 0301 	sbc.w	r3, r3, r1
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006204:	4659      	mov	r1, fp
 8006206:	018b      	lsls	r3, r1, #6
 8006208:	4651      	mov	r1, sl
 800620a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800620e:	4651      	mov	r1, sl
 8006210:	018a      	lsls	r2, r1, #6
 8006212:	4651      	mov	r1, sl
 8006214:	ebb2 0801 	subs.w	r8, r2, r1
 8006218:	4659      	mov	r1, fp
 800621a:	eb63 0901 	sbc.w	r9, r3, r1
 800621e:	f04f 0200 	mov.w	r2, #0
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800622a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800622e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006232:	4690      	mov	r8, r2
 8006234:	4699      	mov	r9, r3
 8006236:	4623      	mov	r3, r4
 8006238:	eb18 0303 	adds.w	r3, r8, r3
 800623c:	60bb      	str	r3, [r7, #8]
 800623e:	462b      	mov	r3, r5
 8006240:	eb49 0303 	adc.w	r3, r9, r3
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	f04f 0300 	mov.w	r3, #0
 800624e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006252:	4629      	mov	r1, r5
 8006254:	024b      	lsls	r3, r1, #9
 8006256:	4621      	mov	r1, r4
 8006258:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800625c:	4621      	mov	r1, r4
 800625e:	024a      	lsls	r2, r1, #9
 8006260:	4610      	mov	r0, r2
 8006262:	4619      	mov	r1, r3
 8006264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006266:	2200      	movs	r2, #0
 8006268:	62bb      	str	r3, [r7, #40]	; 0x28
 800626a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800626c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006270:	f7fa fc9a 	bl	8000ba8 <__aeabi_uldivmod>
 8006274:	4602      	mov	r2, r0
 8006276:	460b      	mov	r3, r1
 8006278:	4613      	mov	r3, r2
 800627a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800627c:	e058      	b.n	8006330 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800627e:	4b38      	ldr	r3, [pc, #224]	; (8006360 <HAL_RCC_GetSysClockFreq+0x200>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	099b      	lsrs	r3, r3, #6
 8006284:	2200      	movs	r2, #0
 8006286:	4618      	mov	r0, r3
 8006288:	4611      	mov	r1, r2
 800628a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800628e:	623b      	str	r3, [r7, #32]
 8006290:	2300      	movs	r3, #0
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
 8006294:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006298:	4642      	mov	r2, r8
 800629a:	464b      	mov	r3, r9
 800629c:	f04f 0000 	mov.w	r0, #0
 80062a0:	f04f 0100 	mov.w	r1, #0
 80062a4:	0159      	lsls	r1, r3, #5
 80062a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062aa:	0150      	lsls	r0, r2, #5
 80062ac:	4602      	mov	r2, r0
 80062ae:	460b      	mov	r3, r1
 80062b0:	4641      	mov	r1, r8
 80062b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80062b6:	4649      	mov	r1, r9
 80062b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062d0:	ebb2 040a 	subs.w	r4, r2, sl
 80062d4:	eb63 050b 	sbc.w	r5, r3, fp
 80062d8:	f04f 0200 	mov.w	r2, #0
 80062dc:	f04f 0300 	mov.w	r3, #0
 80062e0:	00eb      	lsls	r3, r5, #3
 80062e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062e6:	00e2      	lsls	r2, r4, #3
 80062e8:	4614      	mov	r4, r2
 80062ea:	461d      	mov	r5, r3
 80062ec:	4643      	mov	r3, r8
 80062ee:	18e3      	adds	r3, r4, r3
 80062f0:	603b      	str	r3, [r7, #0]
 80062f2:	464b      	mov	r3, r9
 80062f4:	eb45 0303 	adc.w	r3, r5, r3
 80062f8:	607b      	str	r3, [r7, #4]
 80062fa:	f04f 0200 	mov.w	r2, #0
 80062fe:	f04f 0300 	mov.w	r3, #0
 8006302:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006306:	4629      	mov	r1, r5
 8006308:	028b      	lsls	r3, r1, #10
 800630a:	4621      	mov	r1, r4
 800630c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006310:	4621      	mov	r1, r4
 8006312:	028a      	lsls	r2, r1, #10
 8006314:	4610      	mov	r0, r2
 8006316:	4619      	mov	r1, r3
 8006318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800631a:	2200      	movs	r2, #0
 800631c:	61bb      	str	r3, [r7, #24]
 800631e:	61fa      	str	r2, [r7, #28]
 8006320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006324:	f7fa fc40 	bl	8000ba8 <__aeabi_uldivmod>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4613      	mov	r3, r2
 800632e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006330:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <HAL_RCC_GetSysClockFreq+0x200>)
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	0c1b      	lsrs	r3, r3, #16
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	3301      	adds	r3, #1
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006340:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006344:	fbb2 f3f3 	udiv	r3, r2, r3
 8006348:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800634a:	e002      	b.n	8006352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800634c:	4b05      	ldr	r3, [pc, #20]	; (8006364 <HAL_RCC_GetSysClockFreq+0x204>)
 800634e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006354:	4618      	mov	r0, r3
 8006356:	3750      	adds	r7, #80	; 0x50
 8006358:	46bd      	mov	sp, r7
 800635a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800635e:	bf00      	nop
 8006360:	40023800 	.word	0x40023800
 8006364:	00f42400 	.word	0x00f42400
 8006368:	007a1200 	.word	0x007a1200

0800636c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006370:	4b03      	ldr	r3, [pc, #12]	; (8006380 <HAL_RCC_GetHCLKFreq+0x14>)
 8006372:	681b      	ldr	r3, [r3, #0]
}
 8006374:	4618      	mov	r0, r3
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	20000014 	.word	0x20000014

08006384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006388:	f7ff fff0 	bl	800636c <HAL_RCC_GetHCLKFreq>
 800638c:	4602      	mov	r2, r0
 800638e:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	0a9b      	lsrs	r3, r3, #10
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	4903      	ldr	r1, [pc, #12]	; (80063a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800639a:	5ccb      	ldrb	r3, [r1, r3]
 800639c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	40023800 	.word	0x40023800
 80063a8:	0800ac20 	.word	0x0800ac20

080063ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063b0:	f7ff ffdc 	bl	800636c <HAL_RCC_GetHCLKFreq>
 80063b4:	4602      	mov	r2, r0
 80063b6:	4b05      	ldr	r3, [pc, #20]	; (80063cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	0b5b      	lsrs	r3, r3, #13
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	4903      	ldr	r1, [pc, #12]	; (80063d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063c2:	5ccb      	ldrb	r3, [r1, r3]
 80063c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40023800 	.word	0x40023800
 80063d0:	0800ac20 	.word	0x0800ac20

080063d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d105      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d038      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80063fc:	4b68      	ldr	r3, [pc, #416]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006402:	f7fd ff97 	bl	8004334 <HAL_GetTick>
 8006406:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006408:	e008      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800640a:	f7fd ff93 	bl	8004334 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e0bd      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800641c:	4b61      	ldr	r3, [pc, #388]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1f0      	bne.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	019b      	lsls	r3, r3, #6
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	071b      	lsls	r3, r3, #28
 800643a:	495a      	ldr	r1, [pc, #360]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800643c:	4313      	orrs	r3, r2
 800643e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006442:	4b57      	ldr	r3, [pc, #348]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006444:	2201      	movs	r2, #1
 8006446:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006448:	f7fd ff74 	bl	8004334 <HAL_GetTick>
 800644c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800644e:	e008      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006450:	f7fd ff70 	bl	8004334 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b02      	cmp	r3, #2
 800645c:	d901      	bls.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e09a      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006462:	4b50      	ldr	r3, [pc, #320]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0f0      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 8083 	beq.w	8006582 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	4b48      	ldr	r3, [pc, #288]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	4a47      	ldr	r2, [pc, #284]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800648a:	6413      	str	r3, [r2, #64]	; 0x40
 800648c:	4b45      	ldr	r3, [pc, #276]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006498:	4b43      	ldr	r3, [pc, #268]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a42      	ldr	r2, [pc, #264]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800649e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064a2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064a4:	f7fd ff46 	bl	8004334 <HAL_GetTick>
 80064a8:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064aa:	e008      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064ac:	f7fd ff42 	bl	8004334 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d901      	bls.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e06c      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064be:	4b3a      	ldr	r3, [pc, #232]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0f0      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064ca:	4b36      	ldr	r3, [pc, #216]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d02f      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d028      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064e8:	4b2e      	ldr	r3, [pc, #184]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064f0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80064f2:	4b2e      	ldr	r3, [pc, #184]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80064f4:	2201      	movs	r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80064f8:	4b2c      	ldr	r3, [pc, #176]	; (80065ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80064fe:	4a29      	ldr	r2, [pc, #164]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006504:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b01      	cmp	r3, #1
 800650e:	d114      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006510:	f7fd ff10 	bl	8004334 <HAL_GetTick>
 8006514:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006516:	e00a      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006518:	f7fd ff0c 	bl	8004334 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	f241 3288 	movw	r2, #5000	; 0x1388
 8006526:	4293      	cmp	r3, r2
 8006528:	d901      	bls.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e034      	b.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800652e:	4b1d      	ldr	r3, [pc, #116]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0ee      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006546:	d10d      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006548:	4b16      	ldr	r3, [pc, #88]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800655c:	4911      	ldr	r1, [pc, #68]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800655e:	4313      	orrs	r3, r2
 8006560:	608b      	str	r3, [r1, #8]
 8006562:	e005      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006564:	4b0f      	ldr	r3, [pc, #60]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	4a0e      	ldr	r2, [pc, #56]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800656a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800656e:	6093      	str	r3, [r2, #8]
 8006570:	4b0c      	ldr	r3, [pc, #48]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006572:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
 8006578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800657c:	4909      	ldr	r1, [pc, #36]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800657e:	4313      	orrs	r3, r2
 8006580:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	7d1a      	ldrb	r2, [r3, #20]
 8006592:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006594:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3718      	adds	r7, #24
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	42470068 	.word	0x42470068
 80065a4:	40023800 	.word	0x40023800
 80065a8:	40007000 	.word	0x40007000
 80065ac:	42470e40 	.word	0x42470e40
 80065b0:	424711e0 	.word	0x424711e0

080065b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e066      	b.n	8006698 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	7f5b      	ldrb	r3, [r3, #29]
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d105      	bne.n	80065e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fd fbb2 	bl	8003d44 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	22ca      	movs	r2, #202	; 0xca
 80065ec:	625a      	str	r2, [r3, #36]	; 0x24
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2253      	movs	r2, #83	; 0x53
 80065f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa45 	bl	8006a86 <RTC_EnterInitMode>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d12c      	bne.n	8006660 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	6812      	ldr	r2, [r2, #0]
 8006610:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006618:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6899      	ldr	r1, [r3, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	431a      	orrs	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	431a      	orrs	r2, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	68d2      	ldr	r2, [r2, #12]
 8006640:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6919      	ldr	r1, [r3, #16]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	041a      	lsls	r2, r3, #16
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fa4c 	bl	8006af4 <RTC_ExitInitMode>
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006660:	7bfb      	ldrb	r3, [r7, #15]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d113      	bne.n	800668e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006674:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699a      	ldr	r2, [r3, #24]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	430a      	orrs	r2, r1
 8006686:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	22ff      	movs	r2, #255	; 0xff
 8006694:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006696:	7bfb      	ldrb	r3, [r7, #15]
}
 8006698:	4618      	mov	r0, r3
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80066a0:	b590      	push	{r4, r7, lr}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	7f1b      	ldrb	r3, [r3, #28]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d101      	bne.n	80066bc <HAL_RTC_SetTime+0x1c>
 80066b8:	2302      	movs	r3, #2
 80066ba:	e087      	b.n	80067cc <HAL_RTC_SetTime+0x12c>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2201      	movs	r2, #1
 80066c0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2202      	movs	r2, #2
 80066c6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d126      	bne.n	800671c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d102      	bne.n	80066e2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2200      	movs	r2, #0
 80066e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 fa29 	bl	8006b3e <RTC_ByteToBcd2>
 80066ec:	4603      	mov	r3, r0
 80066ee:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	785b      	ldrb	r3, [r3, #1]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fa22 	bl	8006b3e <RTC_ByteToBcd2>
 80066fa:	4603      	mov	r3, r0
 80066fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80066fe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	789b      	ldrb	r3, [r3, #2]
 8006704:	4618      	mov	r0, r3
 8006706:	f000 fa1a 	bl	8006b3e <RTC_ByteToBcd2>
 800670a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800670c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	78db      	ldrb	r3, [r3, #3]
 8006714:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006716:	4313      	orrs	r3, r2
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	e018      	b.n	800674e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d102      	bne.n	8006730 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	2200      	movs	r2, #0
 800672e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	785b      	ldrb	r3, [r3, #1]
 800673a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800673c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006742:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	78db      	ldrb	r3, [r3, #3]
 8006748:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	22ca      	movs	r2, #202	; 0xca
 8006754:	625a      	str	r2, [r3, #36]	; 0x24
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2253      	movs	r2, #83	; 0x53
 800675c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 f991 	bl	8006a86 <RTC_EnterInitMode>
 8006764:	4603      	mov	r3, r0
 8006766:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006768:	7cfb      	ldrb	r3, [r7, #19]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d120      	bne.n	80067b0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006778:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800677c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689a      	ldr	r2, [r3, #8]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800678c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6899      	ldr	r1, [r3, #8]
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	431a      	orrs	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 f9a4 	bl	8006af4 <RTC_ExitInitMode>
 80067ac:	4603      	mov	r3, r0
 80067ae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80067b0:	7cfb      	ldrb	r3, [r7, #19]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d102      	bne.n	80067bc <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	22ff      	movs	r2, #255	; 0xff
 80067c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	771a      	strb	r2, [r3, #28]

  return status;
 80067ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	371c      	adds	r7, #28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd90      	pop	{r4, r7, pc}

080067d4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006806:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800680a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	0c1b      	lsrs	r3, r3, #16
 8006810:	b2db      	uxtb	r3, r3
 8006812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006816:	b2da      	uxtb	r2, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	0a1b      	lsrs	r3, r3, #8
 8006820:	b2db      	uxtb	r3, r3
 8006822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006826:	b2da      	uxtb	r2, r3
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006834:	b2da      	uxtb	r2, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	0d9b      	lsrs	r3, r3, #22
 800683e:	b2db      	uxtb	r3, r3
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	b2da      	uxtb	r2, r3
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d11a      	bne.n	8006886 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	4618      	mov	r0, r3
 8006856:	f000 f98f 	bl	8006b78 <RTC_Bcd2ToByte>
 800685a:	4603      	mov	r3, r0
 800685c:	461a      	mov	r2, r3
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	785b      	ldrb	r3, [r3, #1]
 8006866:	4618      	mov	r0, r3
 8006868:	f000 f986 	bl	8006b78 <RTC_Bcd2ToByte>
 800686c:	4603      	mov	r3, r0
 800686e:	461a      	mov	r2, r3
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	789b      	ldrb	r3, [r3, #2]
 8006878:	4618      	mov	r0, r3
 800687a:	f000 f97d 	bl	8006b78 <RTC_Bcd2ToByte>
 800687e:	4603      	mov	r3, r0
 8006880:	461a      	mov	r2, r3
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006890:	b590      	push	{r4, r7, lr}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	7f1b      	ldrb	r3, [r3, #28]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d101      	bne.n	80068ac <HAL_RTC_SetDate+0x1c>
 80068a8:	2302      	movs	r3, #2
 80068aa:	e071      	b.n	8006990 <HAL_RTC_SetDate+0x100>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2201      	movs	r2, #1
 80068b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2202      	movs	r2, #2
 80068b6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10e      	bne.n	80068dc <HAL_RTC_SetDate+0x4c>
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	785b      	ldrb	r3, [r3, #1]
 80068c2:	f003 0310 	and.w	r3, r3, #16
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d008      	beq.n	80068dc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	f023 0310 	bic.w	r3, r3, #16
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	330a      	adds	r3, #10
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d11c      	bne.n	800691c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	78db      	ldrb	r3, [r3, #3]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 f929 	bl	8006b3e <RTC_ByteToBcd2>
 80068ec:	4603      	mov	r3, r0
 80068ee:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	785b      	ldrb	r3, [r3, #1]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 f922 	bl	8006b3e <RTC_ByteToBcd2>
 80068fa:	4603      	mov	r3, r0
 80068fc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068fe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	789b      	ldrb	r3, [r3, #2]
 8006904:	4618      	mov	r0, r3
 8006906:	f000 f91a 	bl	8006b3e <RTC_ByteToBcd2>
 800690a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800690c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006916:	4313      	orrs	r3, r2
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	e00e      	b.n	800693a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	78db      	ldrb	r3, [r3, #3]
 8006920:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	785b      	ldrb	r3, [r3, #1]
 8006926:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006928:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800692e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006936:	4313      	orrs	r3, r2
 8006938:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	22ca      	movs	r2, #202	; 0xca
 8006940:	625a      	str	r2, [r3, #36]	; 0x24
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2253      	movs	r2, #83	; 0x53
 8006948:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 f89b 	bl	8006a86 <RTC_EnterInitMode>
 8006950:	4603      	mov	r3, r0
 8006952:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006954:	7cfb      	ldrb	r3, [r7, #19]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10c      	bne.n	8006974 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006964:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006968:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f8c2 	bl	8006af4 <RTC_ExitInitMode>
 8006970:	4603      	mov	r3, r0
 8006972:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006974:	7cfb      	ldrb	r3, [r7, #19]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d102      	bne.n	8006980 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	22ff      	movs	r2, #255	; 0xff
 8006986:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	771a      	strb	r2, [r3, #28]

  return status;
 800698e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006990:	4618      	mov	r0, r3
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	bd90      	pop	{r4, r7, pc}

08006998 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	0c1b      	lsrs	r3, r3, #16
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	0a1b      	lsrs	r3, r3, #8
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f003 031f 	and.w	r3, r3, #31
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	0b5b      	lsrs	r3, r3, #13
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d11a      	bne.n	8006a2c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	78db      	ldrb	r3, [r3, #3]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 f8bc 	bl	8006b78 <RTC_Bcd2ToByte>
 8006a00:	4603      	mov	r3, r0
 8006a02:	461a      	mov	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	785b      	ldrb	r3, [r3, #1]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 f8b3 	bl	8006b78 <RTC_Bcd2ToByte>
 8006a12:	4603      	mov	r3, r0
 8006a14:	461a      	mov	r2, r3
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	789b      	ldrb	r3, [r3, #2]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 f8aa 	bl	8006b78 <RTC_Bcd2ToByte>
 8006a24:	4603      	mov	r3, r0
 8006a26:	461a      	mov	r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68da      	ldr	r2, [r3, #12]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a50:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a52:	f7fd fc6f 	bl	8004334 <HAL_GetTick>
 8006a56:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a58:	e009      	b.n	8006a6e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a5a:	f7fd fc6b 	bl	8004334 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a68:	d901      	bls.n	8006a6e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e007      	b.n	8006a7e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0ee      	beq.n	8006a5a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b084      	sub	sp, #16
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006a92:	2300      	movs	r3, #0
 8006a94:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d122      	bne.n	8006aea <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ab2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ab4:	f7fd fc3e 	bl	8004334 <HAL_GetTick>
 8006ab8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006aba:	e00c      	b.n	8006ad6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006abc:	f7fd fc3a 	bl	8004334 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aca:	d904      	bls.n	8006ad6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2204      	movs	r2, #4
 8006ad0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d102      	bne.n	8006aea <RTC_EnterInitMode+0x64>
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d1e8      	bne.n	8006abc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68da      	ldr	r2, [r3, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b0e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f003 0320 	and.w	r3, r3, #32
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10a      	bne.n	8006b34 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff ff89 	bl	8006a36 <HAL_RTC_WaitForSynchro>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d004      	beq.n	8006b34 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2204      	movs	r2, #4
 8006b2e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b085      	sub	sp, #20
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	4603      	mov	r3, r0
 8006b46:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006b4c:	e005      	b.n	8006b5a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006b4e:	7bfb      	ldrb	r3, [r7, #15]
 8006b50:	3301      	adds	r3, #1
 8006b52:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006b54:	79fb      	ldrb	r3, [r7, #7]
 8006b56:	3b0a      	subs	r3, #10
 8006b58:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006b5a:	79fb      	ldrb	r3, [r7, #7]
 8006b5c:	2b09      	cmp	r3, #9
 8006b5e:	d8f6      	bhi.n	8006b4e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
 8006b62:	011b      	lsls	r3, r3, #4
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	79fb      	ldrb	r3, [r7, #7]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	b2db      	uxtb	r3, r3
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	091b      	lsrs	r3, r3, #4
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	0092      	lsls	r2, r2, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006b96:	79fb      	ldrb	r3, [r7, #7]
 8006b98:	f003 030f 	and.w	r3, r3, #15
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	b2db      	uxtb	r3, r3
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e041      	b.n	8006c46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d106      	bne.n	8006bdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f7fd f8e0 	bl	8003d9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	3304      	adds	r3, #4
 8006bec:	4619      	mov	r1, r3
 8006bee:	4610      	mov	r0, r2
 8006bf0:	f000 fea2 	bl	8007938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d101      	bne.n	8006c60 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e041      	b.n	8006ce4 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d106      	bne.n	8006c7a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f839 	bl	8006cec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3304      	adds	r3, #4
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f000 fe53 	bl	8007938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e041      	b.n	8006d96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d106      	bne.n	8006d2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7fd f89e 	bl	8003e68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4610      	mov	r0, r2
 8006d40:	f000 fdfa 	bl	8007938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d109      	bne.n	8006dc4 <HAL_TIM_PWM_Start+0x24>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	bf14      	ite	ne
 8006dbc:	2301      	movne	r3, #1
 8006dbe:	2300      	moveq	r3, #0
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	e022      	b.n	8006e0a <HAL_TIM_PWM_Start+0x6a>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d109      	bne.n	8006dde <HAL_TIM_PWM_Start+0x3e>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	bf14      	ite	ne
 8006dd6:	2301      	movne	r3, #1
 8006dd8:	2300      	moveq	r3, #0
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	e015      	b.n	8006e0a <HAL_TIM_PWM_Start+0x6a>
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	d109      	bne.n	8006df8 <HAL_TIM_PWM_Start+0x58>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	bf14      	ite	ne
 8006df0:	2301      	movne	r3, #1
 8006df2:	2300      	moveq	r3, #0
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	e008      	b.n	8006e0a <HAL_TIM_PWM_Start+0x6a>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	bf14      	ite	ne
 8006e04:	2301      	movne	r3, #1
 8006e06:	2300      	moveq	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d001      	beq.n	8006e12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e068      	b.n	8006ee4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d104      	bne.n	8006e22 <HAL_TIM_PWM_Start+0x82>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e20:	e013      	b.n	8006e4a <HAL_TIM_PWM_Start+0xaa>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	d104      	bne.n	8006e32 <HAL_TIM_PWM_Start+0x92>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e30:	e00b      	b.n	8006e4a <HAL_TIM_PWM_Start+0xaa>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d104      	bne.n	8006e42 <HAL_TIM_PWM_Start+0xa2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e40:	e003      	b.n	8006e4a <HAL_TIM_PWM_Start+0xaa>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2202      	movs	r2, #2
 8006e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f001 f934 	bl	80080c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a23      	ldr	r2, [pc, #140]	; (8006eec <HAL_TIM_PWM_Start+0x14c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d107      	bne.n	8006e72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a1d      	ldr	r2, [pc, #116]	; (8006eec <HAL_TIM_PWM_Start+0x14c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d018      	beq.n	8006eae <HAL_TIM_PWM_Start+0x10e>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e84:	d013      	beq.n	8006eae <HAL_TIM_PWM_Start+0x10e>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a19      	ldr	r2, [pc, #100]	; (8006ef0 <HAL_TIM_PWM_Start+0x150>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00e      	beq.n	8006eae <HAL_TIM_PWM_Start+0x10e>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a17      	ldr	r2, [pc, #92]	; (8006ef4 <HAL_TIM_PWM_Start+0x154>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d009      	beq.n	8006eae <HAL_TIM_PWM_Start+0x10e>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a16      	ldr	r2, [pc, #88]	; (8006ef8 <HAL_TIM_PWM_Start+0x158>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d004      	beq.n	8006eae <HAL_TIM_PWM_Start+0x10e>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a14      	ldr	r2, [pc, #80]	; (8006efc <HAL_TIM_PWM_Start+0x15c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d111      	bne.n	8006ed2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 0307 	and.w	r3, r3, #7
 8006eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2b06      	cmp	r3, #6
 8006ebe:	d010      	beq.n	8006ee2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0201 	orr.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed0:	e007      	b.n	8006ee2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0201 	orr.w	r2, r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	40010000 	.word	0x40010000
 8006ef0:	40000400 	.word	0x40000400
 8006ef4:	40000800 	.word	0x40000800
 8006ef8:	40000c00 	.word	0x40000c00
 8006efc:	40014000 	.word	0x40014000

08006f00 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d101      	bne.n	8006f12 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e041      	b.n	8006f96 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f839 	bl	8006f9e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2202      	movs	r2, #2
 8006f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4610      	mov	r0, r2
 8006f40:	f000 fcfa 	bl	8007938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
	...

08006fb4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <HAL_TIM_IC_Start_IT+0x1e>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	e013      	b.n	8006ffa <HAL_TIM_IC_Start_IT+0x46>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d104      	bne.n	8006fe2 <HAL_TIM_IC_Start_IT+0x2e>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	e00b      	b.n	8006ffa <HAL_TIM_IC_Start_IT+0x46>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b08      	cmp	r3, #8
 8006fe6:	d104      	bne.n	8006ff2 <HAL_TIM_IC_Start_IT+0x3e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	e003      	b.n	8006ffa <HAL_TIM_IC_Start_IT+0x46>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d104      	bne.n	800700c <HAL_TIM_IC_Start_IT+0x58>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007008:	b2db      	uxtb	r3, r3
 800700a:	e013      	b.n	8007034 <HAL_TIM_IC_Start_IT+0x80>
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	2b04      	cmp	r3, #4
 8007010:	d104      	bne.n	800701c <HAL_TIM_IC_Start_IT+0x68>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007018:	b2db      	uxtb	r3, r3
 800701a:	e00b      	b.n	8007034 <HAL_TIM_IC_Start_IT+0x80>
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	2b08      	cmp	r3, #8
 8007020:	d104      	bne.n	800702c <HAL_TIM_IC_Start_IT+0x78>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007028:	b2db      	uxtb	r3, r3
 800702a:	e003      	b.n	8007034 <HAL_TIM_IC_Start_IT+0x80>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007032:	b2db      	uxtb	r3, r3
 8007034:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d102      	bne.n	8007042 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800703c:	7b7b      	ldrb	r3, [r7, #13]
 800703e:	2b01      	cmp	r3, #1
 8007040:	d001      	beq.n	8007046 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e0c2      	b.n	80071cc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d104      	bne.n	8007056 <HAL_TIM_IC_Start_IT+0xa2>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2202      	movs	r2, #2
 8007050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007054:	e013      	b.n	800707e <HAL_TIM_IC_Start_IT+0xca>
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b04      	cmp	r3, #4
 800705a:	d104      	bne.n	8007066 <HAL_TIM_IC_Start_IT+0xb2>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007064:	e00b      	b.n	800707e <HAL_TIM_IC_Start_IT+0xca>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b08      	cmp	r3, #8
 800706a:	d104      	bne.n	8007076 <HAL_TIM_IC_Start_IT+0xc2>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007074:	e003      	b.n	800707e <HAL_TIM_IC_Start_IT+0xca>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2202      	movs	r2, #2
 800707a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <HAL_TIM_IC_Start_IT+0xda>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800708c:	e013      	b.n	80070b6 <HAL_TIM_IC_Start_IT+0x102>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b04      	cmp	r3, #4
 8007092:	d104      	bne.n	800709e <HAL_TIM_IC_Start_IT+0xea>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800709c:	e00b      	b.n	80070b6 <HAL_TIM_IC_Start_IT+0x102>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d104      	bne.n	80070ae <HAL_TIM_IC_Start_IT+0xfa>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ac:	e003      	b.n	80070b6 <HAL_TIM_IC_Start_IT+0x102>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2202      	movs	r2, #2
 80070b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b0c      	cmp	r3, #12
 80070ba:	d841      	bhi.n	8007140 <HAL_TIM_IC_Start_IT+0x18c>
 80070bc:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <HAL_TIM_IC_Start_IT+0x110>)
 80070be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c2:	bf00      	nop
 80070c4:	080070f9 	.word	0x080070f9
 80070c8:	08007141 	.word	0x08007141
 80070cc:	08007141 	.word	0x08007141
 80070d0:	08007141 	.word	0x08007141
 80070d4:	0800710b 	.word	0x0800710b
 80070d8:	08007141 	.word	0x08007141
 80070dc:	08007141 	.word	0x08007141
 80070e0:	08007141 	.word	0x08007141
 80070e4:	0800711d 	.word	0x0800711d
 80070e8:	08007141 	.word	0x08007141
 80070ec:	08007141 	.word	0x08007141
 80070f0:	08007141 	.word	0x08007141
 80070f4:	0800712f 	.word	0x0800712f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68da      	ldr	r2, [r3, #12]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0202 	orr.w	r2, r2, #2
 8007106:	60da      	str	r2, [r3, #12]
      break;
 8007108:	e01d      	b.n	8007146 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68da      	ldr	r2, [r3, #12]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0204 	orr.w	r2, r2, #4
 8007118:	60da      	str	r2, [r3, #12]
      break;
 800711a:	e014      	b.n	8007146 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0208 	orr.w	r2, r2, #8
 800712a:	60da      	str	r2, [r3, #12]
      break;
 800712c:	e00b      	b.n	8007146 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f042 0210 	orr.w	r2, r2, #16
 800713c:	60da      	str	r2, [r3, #12]
      break;
 800713e:	e002      	b.n	8007146 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	73fb      	strb	r3, [r7, #15]
      break;
 8007144:	bf00      	nop
  }

  if (status == HAL_OK)
 8007146:	7bfb      	ldrb	r3, [r7, #15]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d13e      	bne.n	80071ca <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2201      	movs	r2, #1
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	4618      	mov	r0, r3
 8007156:	f000 ffb3 	bl	80080c0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a1d      	ldr	r2, [pc, #116]	; (80071d4 <HAL_TIM_IC_Start_IT+0x220>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d018      	beq.n	8007196 <HAL_TIM_IC_Start_IT+0x1e2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800716c:	d013      	beq.n	8007196 <HAL_TIM_IC_Start_IT+0x1e2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a19      	ldr	r2, [pc, #100]	; (80071d8 <HAL_TIM_IC_Start_IT+0x224>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d00e      	beq.n	8007196 <HAL_TIM_IC_Start_IT+0x1e2>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a17      	ldr	r2, [pc, #92]	; (80071dc <HAL_TIM_IC_Start_IT+0x228>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d009      	beq.n	8007196 <HAL_TIM_IC_Start_IT+0x1e2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a16      	ldr	r2, [pc, #88]	; (80071e0 <HAL_TIM_IC_Start_IT+0x22c>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d004      	beq.n	8007196 <HAL_TIM_IC_Start_IT+0x1e2>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a14      	ldr	r2, [pc, #80]	; (80071e4 <HAL_TIM_IC_Start_IT+0x230>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d111      	bne.n	80071ba <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 0307 	and.w	r3, r3, #7
 80071a0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2b06      	cmp	r3, #6
 80071a6:	d010      	beq.n	80071ca <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071b8:	e007      	b.n	80071ca <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f042 0201 	orr.w	r2, r2, #1
 80071c8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	40010000 	.word	0x40010000
 80071d8:	40000400 	.word	0x40000400
 80071dc:	40000800 	.word	0x40000800
 80071e0:	40000c00 	.word	0x40000c00
 80071e4:	40014000 	.word	0x40014000

080071e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	f003 0302 	and.w	r3, r3, #2
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d122      	bne.n	8007244 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b02      	cmp	r3, #2
 800720a:	d11b      	bne.n	8007244 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f06f 0202 	mvn.w	r2, #2
 8007214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2201      	movs	r2, #1
 800721a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	f003 0303 	and.w	r3, r3, #3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d003      	beq.n	8007232 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f7fb fb5c 	bl	80028e8 <HAL_TIM_IC_CaptureCallback>
 8007230:	e005      	b.n	800723e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fb61 	bl	80078fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fb68 	bl	800790e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f003 0304 	and.w	r3, r3, #4
 800724e:	2b04      	cmp	r3, #4
 8007250:	d122      	bne.n	8007298 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f003 0304 	and.w	r3, r3, #4
 800725c:	2b04      	cmp	r3, #4
 800725e:	d11b      	bne.n	8007298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0204 	mvn.w	r2, #4
 8007268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2202      	movs	r2, #2
 800726e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fb fb32 	bl	80028e8 <HAL_TIM_IC_CaptureCallback>
 8007284:	e005      	b.n	8007292 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fb37 	bl	80078fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fb3e 	bl	800790e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	f003 0308 	and.w	r3, r3, #8
 80072a2:	2b08      	cmp	r3, #8
 80072a4:	d122      	bne.n	80072ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f003 0308 	and.w	r3, r3, #8
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d11b      	bne.n	80072ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f06f 0208 	mvn.w	r2, #8
 80072bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2204      	movs	r2, #4
 80072c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7fb fb08 	bl	80028e8 <HAL_TIM_IC_CaptureCallback>
 80072d8:	e005      	b.n	80072e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fb0d 	bl	80078fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fb14 	bl	800790e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f003 0310 	and.w	r3, r3, #16
 80072f6:	2b10      	cmp	r3, #16
 80072f8:	d122      	bne.n	8007340 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f003 0310 	and.w	r3, r3, #16
 8007304:	2b10      	cmp	r3, #16
 8007306:	d11b      	bne.n	8007340 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f06f 0210 	mvn.w	r2, #16
 8007310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2208      	movs	r2, #8
 8007316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7fb fade 	bl	80028e8 <HAL_TIM_IC_CaptureCallback>
 800732c:	e005      	b.n	800733a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fae3 	bl	80078fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 faea 	bl	800790e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b01      	cmp	r3, #1
 800734c:	d10e      	bne.n	800736c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b01      	cmp	r3, #1
 800735a:	d107      	bne.n	800736c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f06f 0201 	mvn.w	r2, #1
 8007364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7fb fb08 	bl	800297c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007376:	2b80      	cmp	r3, #128	; 0x80
 8007378:	d10e      	bne.n	8007398 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007384:	2b80      	cmp	r3, #128	; 0x80
 8007386:	d107      	bne.n	8007398 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 ff84 	bl	80082a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a2:	2b40      	cmp	r3, #64	; 0x40
 80073a4:	d10e      	bne.n	80073c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b0:	2b40      	cmp	r3, #64	; 0x40
 80073b2:	d107      	bne.n	80073c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 faaf 	bl	8007922 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b20      	cmp	r3, #32
 80073d0:	d10e      	bne.n	80073f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d107      	bne.n	80073f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f06f 0220 	mvn.w	r2, #32
 80073e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 ff4e 	bl	800828c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073f0:	bf00      	nop
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b086      	sub	sp, #24
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007412:	2302      	movs	r3, #2
 8007414:	e048      	b.n	80074a8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b0c      	cmp	r3, #12
 8007422:	d839      	bhi.n	8007498 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	08007461 	.word	0x08007461
 8007430:	08007499 	.word	0x08007499
 8007434:	08007499 	.word	0x08007499
 8007438:	08007499 	.word	0x08007499
 800743c:	0800746f 	.word	0x0800746f
 8007440:	08007499 	.word	0x08007499
 8007444:	08007499 	.word	0x08007499
 8007448:	08007499 	.word	0x08007499
 800744c:	0800747d 	.word	0x0800747d
 8007450:	08007499 	.word	0x08007499
 8007454:	08007499 	.word	0x08007499
 8007458:	08007499 	.word	0x08007499
 800745c:	0800748b 	.word	0x0800748b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68b9      	ldr	r1, [r7, #8]
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fae6 	bl	8007a38 <TIM_OC1_SetConfig>
      break;
 800746c:	e017      	b.n	800749e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68b9      	ldr	r1, [r7, #8]
 8007474:	4618      	mov	r0, r3
 8007476:	f000 fb45 	bl	8007b04 <TIM_OC2_SetConfig>
      break;
 800747a:	e010      	b.n	800749e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68b9      	ldr	r1, [r7, #8]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 fbaa 	bl	8007bdc <TIM_OC3_SetConfig>
      break;
 8007488:	e009      	b.n	800749e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fc0d 	bl	8007cb0 <TIM_OC4_SetConfig>
      break;
 8007496:	e002      	b.n	800749e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	75fb      	strb	r3, [r7, #23]
      break;
 800749c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3718      	adds	r7, #24
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d101      	bne.n	80074ce <HAL_TIM_IC_ConfigChannel+0x1e>
 80074ca:	2302      	movs	r3, #2
 80074cc:	e088      	b.n	80075e0 <HAL_TIM_IC_ConfigChannel+0x130>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d11b      	bne.n	8007514 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	6818      	ldr	r0, [r3, #0]
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	6819      	ldr	r1, [r3, #0]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	f000 fc30 	bl	8007d50 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699a      	ldr	r2, [r3, #24]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 020c 	bic.w	r2, r2, #12
 80074fe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6999      	ldr	r1, [r3, #24]
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	689a      	ldr	r2, [r3, #8]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	430a      	orrs	r2, r1
 8007510:	619a      	str	r2, [r3, #24]
 8007512:	e060      	b.n	80075d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b04      	cmp	r3, #4
 8007518:	d11c      	bne.n	8007554 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6819      	ldr	r1, [r3, #0]
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f000 fca8 	bl	8007e7e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	699a      	ldr	r2, [r3, #24]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800753c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6999      	ldr	r1, [r3, #24]
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	021a      	lsls	r2, r3, #8
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	619a      	str	r2, [r3, #24]
 8007552:	e040      	b.n	80075d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b08      	cmp	r3, #8
 8007558:	d11b      	bne.n	8007592 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6818      	ldr	r0, [r3, #0]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	6819      	ldr	r1, [r3, #0]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f000 fcf5 	bl	8007f58 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	69da      	ldr	r2, [r3, #28]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 020c 	bic.w	r2, r2, #12
 800757c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	69d9      	ldr	r1, [r3, #28]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	689a      	ldr	r2, [r3, #8]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	61da      	str	r2, [r3, #28]
 8007590:	e021      	b.n	80075d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b0c      	cmp	r3, #12
 8007596:	d11c      	bne.n	80075d2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6818      	ldr	r0, [r3, #0]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	6819      	ldr	r1, [r3, #0]
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	685a      	ldr	r2, [r3, #4]
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f000 fd12 	bl	8007fd0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	69da      	ldr	r2, [r3, #28]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80075ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	69d9      	ldr	r1, [r3, #28]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	021a      	lsls	r2, r3, #8
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	61da      	str	r2, [r3, #28]
 80075d0:	e001      	b.n	80075d6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075de:	7dfb      	ldrb	r3, [r7, #23]
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d101      	bne.n	8007606 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007602:	2302      	movs	r3, #2
 8007604:	e0ae      	b.n	8007764 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b0c      	cmp	r3, #12
 8007612:	f200 809f 	bhi.w	8007754 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007616:	a201      	add	r2, pc, #4	; (adr r2, 800761c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761c:	08007651 	.word	0x08007651
 8007620:	08007755 	.word	0x08007755
 8007624:	08007755 	.word	0x08007755
 8007628:	08007755 	.word	0x08007755
 800762c:	08007691 	.word	0x08007691
 8007630:	08007755 	.word	0x08007755
 8007634:	08007755 	.word	0x08007755
 8007638:	08007755 	.word	0x08007755
 800763c:	080076d3 	.word	0x080076d3
 8007640:	08007755 	.word	0x08007755
 8007644:	08007755 	.word	0x08007755
 8007648:	08007755 	.word	0x08007755
 800764c:	08007713 	.word	0x08007713
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68b9      	ldr	r1, [r7, #8]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 f9ee 	bl	8007a38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	699a      	ldr	r2, [r3, #24]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0208 	orr.w	r2, r2, #8
 800766a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699a      	ldr	r2, [r3, #24]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f022 0204 	bic.w	r2, r2, #4
 800767a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6999      	ldr	r1, [r3, #24]
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	619a      	str	r2, [r3, #24]
      break;
 800768e:	e064      	b.n	800775a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68b9      	ldr	r1, [r7, #8]
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fa34 	bl	8007b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	699a      	ldr	r2, [r3, #24]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6999      	ldr	r1, [r3, #24]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	021a      	lsls	r2, r3, #8
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	430a      	orrs	r2, r1
 80076ce:	619a      	str	r2, [r3, #24]
      break;
 80076d0:	e043      	b.n	800775a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	68b9      	ldr	r1, [r7, #8]
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fa7f 	bl	8007bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	69da      	ldr	r2, [r3, #28]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f042 0208 	orr.w	r2, r2, #8
 80076ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	69da      	ldr	r2, [r3, #28]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f022 0204 	bic.w	r2, r2, #4
 80076fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	69d9      	ldr	r1, [r3, #28]
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	691a      	ldr	r2, [r3, #16]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	61da      	str	r2, [r3, #28]
      break;
 8007710:	e023      	b.n	800775a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68b9      	ldr	r1, [r7, #8]
 8007718:	4618      	mov	r0, r3
 800771a:	f000 fac9 	bl	8007cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	69da      	ldr	r2, [r3, #28]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800772c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	69da      	ldr	r2, [r3, #28]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800773c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	69d9      	ldr	r1, [r3, #28]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	021a      	lsls	r2, r3, #8
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	430a      	orrs	r2, r1
 8007750:	61da      	str	r2, [r3, #28]
      break;
 8007752:	e002      	b.n	800775a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	75fb      	strb	r3, [r7, #23]
      break;
 8007758:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007762:	7dfb      	ldrb	r3, [r7, #23]
}
 8007764:	4618      	mov	r0, r3
 8007766:	3718      	adds	r7, #24
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007780:	2b01      	cmp	r3, #1
 8007782:	d101      	bne.n	8007788 <HAL_TIM_ConfigClockSource+0x1c>
 8007784:	2302      	movs	r3, #2
 8007786:	e0b4      	b.n	80078f2 <HAL_TIM_ConfigClockSource+0x186>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80077a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077c0:	d03e      	beq.n	8007840 <HAL_TIM_ConfigClockSource+0xd4>
 80077c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077c6:	f200 8087 	bhi.w	80078d8 <HAL_TIM_ConfigClockSource+0x16c>
 80077ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ce:	f000 8086 	beq.w	80078de <HAL_TIM_ConfigClockSource+0x172>
 80077d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d6:	d87f      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x16c>
 80077d8:	2b70      	cmp	r3, #112	; 0x70
 80077da:	d01a      	beq.n	8007812 <HAL_TIM_ConfigClockSource+0xa6>
 80077dc:	2b70      	cmp	r3, #112	; 0x70
 80077de:	d87b      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x16c>
 80077e0:	2b60      	cmp	r3, #96	; 0x60
 80077e2:	d050      	beq.n	8007886 <HAL_TIM_ConfigClockSource+0x11a>
 80077e4:	2b60      	cmp	r3, #96	; 0x60
 80077e6:	d877      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x16c>
 80077e8:	2b50      	cmp	r3, #80	; 0x50
 80077ea:	d03c      	beq.n	8007866 <HAL_TIM_ConfigClockSource+0xfa>
 80077ec:	2b50      	cmp	r3, #80	; 0x50
 80077ee:	d873      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x16c>
 80077f0:	2b40      	cmp	r3, #64	; 0x40
 80077f2:	d058      	beq.n	80078a6 <HAL_TIM_ConfigClockSource+0x13a>
 80077f4:	2b40      	cmp	r3, #64	; 0x40
 80077f6:	d86f      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x16c>
 80077f8:	2b30      	cmp	r3, #48	; 0x30
 80077fa:	d064      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x15a>
 80077fc:	2b30      	cmp	r3, #48	; 0x30
 80077fe:	d86b      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007800:	2b20      	cmp	r3, #32
 8007802:	d060      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007804:	2b20      	cmp	r3, #32
 8007806:	d867      	bhi.n	80078d8 <HAL_TIM_ConfigClockSource+0x16c>
 8007808:	2b00      	cmp	r3, #0
 800780a:	d05c      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x15a>
 800780c:	2b10      	cmp	r3, #16
 800780e:	d05a      	beq.n	80078c6 <HAL_TIM_ConfigClockSource+0x15a>
 8007810:	e062      	b.n	80078d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6818      	ldr	r0, [r3, #0]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	6899      	ldr	r1, [r3, #8]
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f000 fc2d 	bl	8008080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	609a      	str	r2, [r3, #8]
      break;
 800783e:	e04f      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	6899      	ldr	r1, [r3, #8]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f000 fc16 	bl	8008080 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007862:	609a      	str	r2, [r3, #8]
      break;
 8007864:	e03c      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6818      	ldr	r0, [r3, #0]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	6859      	ldr	r1, [r3, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	461a      	mov	r2, r3
 8007874:	f000 fad4 	bl	8007e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2150      	movs	r1, #80	; 0x50
 800787e:	4618      	mov	r0, r3
 8007880:	f000 fbe3 	bl	800804a <TIM_ITRx_SetConfig>
      break;
 8007884:	e02c      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6818      	ldr	r0, [r3, #0]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	6859      	ldr	r1, [r3, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	461a      	mov	r2, r3
 8007894:	f000 fb30 	bl	8007ef8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2160      	movs	r1, #96	; 0x60
 800789e:	4618      	mov	r0, r3
 80078a0:	f000 fbd3 	bl	800804a <TIM_ITRx_SetConfig>
      break;
 80078a4:	e01c      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6818      	ldr	r0, [r3, #0]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	6859      	ldr	r1, [r3, #4]
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f000 fab4 	bl	8007e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2140      	movs	r1, #64	; 0x40
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 fbc3 	bl	800804a <TIM_ITRx_SetConfig>
      break;
 80078c4:	e00c      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4619      	mov	r1, r3
 80078d0:	4610      	mov	r0, r2
 80078d2:	f000 fbba 	bl	800804a <TIM_ITRx_SetConfig>
      break;
 80078d6:	e003      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	73fb      	strb	r3, [r7, #15]
      break;
 80078dc:	e000      	b.n	80078e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b083      	sub	sp, #12
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007902:	bf00      	nop
 8007904:	370c      	adds	r7, #12
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007916:	bf00      	nop
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007922:	b480      	push	{r7}
 8007924:	b083      	sub	sp, #12
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800792a:	bf00      	nop
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
	...

08007938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a34      	ldr	r2, [pc, #208]	; (8007a1c <TIM_Base_SetConfig+0xe4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d00f      	beq.n	8007970 <TIM_Base_SetConfig+0x38>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007956:	d00b      	beq.n	8007970 <TIM_Base_SetConfig+0x38>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	4a31      	ldr	r2, [pc, #196]	; (8007a20 <TIM_Base_SetConfig+0xe8>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d007      	beq.n	8007970 <TIM_Base_SetConfig+0x38>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4a30      	ldr	r2, [pc, #192]	; (8007a24 <TIM_Base_SetConfig+0xec>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d003      	beq.n	8007970 <TIM_Base_SetConfig+0x38>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a2f      	ldr	r2, [pc, #188]	; (8007a28 <TIM_Base_SetConfig+0xf0>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d108      	bne.n	8007982 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	4313      	orrs	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a25      	ldr	r2, [pc, #148]	; (8007a1c <TIM_Base_SetConfig+0xe4>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d01b      	beq.n	80079c2 <TIM_Base_SetConfig+0x8a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007990:	d017      	beq.n	80079c2 <TIM_Base_SetConfig+0x8a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a22      	ldr	r2, [pc, #136]	; (8007a20 <TIM_Base_SetConfig+0xe8>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d013      	beq.n	80079c2 <TIM_Base_SetConfig+0x8a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a21      	ldr	r2, [pc, #132]	; (8007a24 <TIM_Base_SetConfig+0xec>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d00f      	beq.n	80079c2 <TIM_Base_SetConfig+0x8a>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a20      	ldr	r2, [pc, #128]	; (8007a28 <TIM_Base_SetConfig+0xf0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d00b      	beq.n	80079c2 <TIM_Base_SetConfig+0x8a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a1f      	ldr	r2, [pc, #124]	; (8007a2c <TIM_Base_SetConfig+0xf4>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d007      	beq.n	80079c2 <TIM_Base_SetConfig+0x8a>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a1e      	ldr	r2, [pc, #120]	; (8007a30 <TIM_Base_SetConfig+0xf8>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d003      	beq.n	80079c2 <TIM_Base_SetConfig+0x8a>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a1d      	ldr	r2, [pc, #116]	; (8007a34 <TIM_Base_SetConfig+0xfc>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d108      	bne.n	80079d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	4313      	orrs	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	689a      	ldr	r2, [r3, #8]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a08      	ldr	r2, [pc, #32]	; (8007a1c <TIM_Base_SetConfig+0xe4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d103      	bne.n	8007a08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	691a      	ldr	r2, [r3, #16]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	615a      	str	r2, [r3, #20]
}
 8007a0e:	bf00      	nop
 8007a10:	3714      	adds	r7, #20
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
 8007a1a:	bf00      	nop
 8007a1c:	40010000 	.word	0x40010000
 8007a20:	40000400 	.word	0x40000400
 8007a24:	40000800 	.word	0x40000800
 8007a28:	40000c00 	.word	0x40000c00
 8007a2c:	40014000 	.word	0x40014000
 8007a30:	40014400 	.word	0x40014400
 8007a34:	40014800 	.word	0x40014800

08007a38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	f023 0201 	bic.w	r2, r3, #1
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 0303 	bic.w	r3, r3, #3
 8007a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	f023 0302 	bic.w	r3, r3, #2
 8007a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	689b      	ldr	r3, [r3, #8]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a1c      	ldr	r2, [pc, #112]	; (8007b00 <TIM_OC1_SetConfig+0xc8>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d10c      	bne.n	8007aae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f023 0308 	bic.w	r3, r3, #8
 8007a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	697a      	ldr	r2, [r7, #20]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f023 0304 	bic.w	r3, r3, #4
 8007aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	4a13      	ldr	r2, [pc, #76]	; (8007b00 <TIM_OC1_SetConfig+0xc8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d111      	bne.n	8007ada <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	693a      	ldr	r2, [r7, #16]
 8007ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	621a      	str	r2, [r3, #32]
}
 8007af4:	bf00      	nop
 8007af6:	371c      	adds	r7, #28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	40010000 	.word	0x40010000

08007b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	f023 0210 	bic.w	r2, r3, #16
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	021b      	lsls	r3, r3, #8
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f023 0320 	bic.w	r3, r3, #32
 8007b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	011b      	lsls	r3, r3, #4
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4a1e      	ldr	r2, [pc, #120]	; (8007bd8 <TIM_OC2_SetConfig+0xd4>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d10d      	bne.n	8007b80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	011b      	lsls	r3, r3, #4
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a15      	ldr	r2, [pc, #84]	; (8007bd8 <TIM_OC2_SetConfig+0xd4>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d113      	bne.n	8007bb0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	695b      	ldr	r3, [r3, #20]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	621a      	str	r2, [r3, #32]
}
 8007bca:	bf00      	nop
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40010000 	.word	0x40010000

08007bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f023 0303 	bic.w	r3, r3, #3
 8007c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	021b      	lsls	r3, r3, #8
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	4a1d      	ldr	r2, [pc, #116]	; (8007cac <TIM_OC3_SetConfig+0xd0>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d10d      	bne.n	8007c56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	021b      	lsls	r3, r3, #8
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a14      	ldr	r2, [pc, #80]	; (8007cac <TIM_OC3_SetConfig+0xd0>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d113      	bne.n	8007c86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	011b      	lsls	r3, r3, #4
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	685a      	ldr	r2, [r3, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	697a      	ldr	r2, [r7, #20]
 8007c9e:	621a      	str	r2, [r3, #32]
}
 8007ca0:	bf00      	nop
 8007ca2:	371c      	adds	r7, #28
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr
 8007cac:	40010000 	.word	0x40010000

08007cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	031b      	lsls	r3, r3, #12
 8007d02:	693a      	ldr	r2, [r7, #16]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a10      	ldr	r2, [pc, #64]	; (8007d4c <TIM_OC4_SetConfig+0x9c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d109      	bne.n	8007d24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	019b      	lsls	r3, r3, #6
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	621a      	str	r2, [r3, #32]
}
 8007d3e:	bf00      	nop
 8007d40:	371c      	adds	r7, #28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	40010000 	.word	0x40010000

08007d50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
 8007d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	f023 0201 	bic.w	r2, r3, #1
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4a24      	ldr	r2, [pc, #144]	; (8007e0c <TIM_TI1_SetConfig+0xbc>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d013      	beq.n	8007da6 <TIM_TI1_SetConfig+0x56>
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d84:	d00f      	beq.n	8007da6 <TIM_TI1_SetConfig+0x56>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	4a21      	ldr	r2, [pc, #132]	; (8007e10 <TIM_TI1_SetConfig+0xc0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d00b      	beq.n	8007da6 <TIM_TI1_SetConfig+0x56>
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4a20      	ldr	r2, [pc, #128]	; (8007e14 <TIM_TI1_SetConfig+0xc4>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d007      	beq.n	8007da6 <TIM_TI1_SetConfig+0x56>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	4a1f      	ldr	r2, [pc, #124]	; (8007e18 <TIM_TI1_SetConfig+0xc8>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d003      	beq.n	8007da6 <TIM_TI1_SetConfig+0x56>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4a1e      	ldr	r2, [pc, #120]	; (8007e1c <TIM_TI1_SetConfig+0xcc>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d101      	bne.n	8007daa <TIM_TI1_SetConfig+0x5a>
 8007da6:	2301      	movs	r3, #1
 8007da8:	e000      	b.n	8007dac <TIM_TI1_SetConfig+0x5c>
 8007daa:	2300      	movs	r3, #0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d008      	beq.n	8007dc2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f023 0303 	bic.w	r3, r3, #3
 8007db6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007db8:	697a      	ldr	r2, [r7, #20]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	e003      	b.n	8007dca <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f043 0301 	orr.w	r3, r3, #1
 8007dc8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	011b      	lsls	r3, r3, #4
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f023 030a 	bic.w	r3, r3, #10
 8007de4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	f003 030a 	and.w	r3, r3, #10
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	697a      	ldr	r2, [r7, #20]
 8007df6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	621a      	str	r2, [r3, #32]
}
 8007dfe:	bf00      	nop
 8007e00:	371c      	adds	r7, #28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	40010000 	.word	0x40010000
 8007e10:	40000400 	.word	0x40000400
 8007e14:	40000800 	.word	0x40000800
 8007e18:	40000c00 	.word	0x40000c00
 8007e1c:	40014000 	.word	0x40014000

08007e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f023 0201 	bic.w	r2, r3, #1
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	011b      	lsls	r3, r3, #4
 8007e50:	693a      	ldr	r2, [r7, #16]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f023 030a 	bic.w	r3, r3, #10
 8007e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	693a      	ldr	r2, [r7, #16]
 8007e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	621a      	str	r2, [r3, #32]
}
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b087      	sub	sp, #28
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	60f8      	str	r0, [r7, #12]
 8007e86:	60b9      	str	r1, [r7, #8]
 8007e88:	607a      	str	r2, [r7, #4]
 8007e8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	f023 0210 	bic.w	r2, r3, #16
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	021b      	lsls	r3, r3, #8
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ebc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	031b      	lsls	r3, r3, #12
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ed0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	011b      	lsls	r3, r3, #4
 8007ed6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	621a      	str	r2, [r3, #32]
}
 8007eec:	bf00      	nop
 8007eee:	371c      	adds	r7, #28
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6a1b      	ldr	r3, [r3, #32]
 8007f08:	f023 0210 	bic.w	r2, r3, #16
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	031b      	lsls	r3, r3, #12
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	011b      	lsls	r3, r3, #4
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	621a      	str	r2, [r3, #32]
}
 8007f4c:	bf00      	nop
 8007f4e:	371c      	adds	r7, #28
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	69db      	ldr	r3, [r3, #28]
 8007f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6a1b      	ldr	r3, [r3, #32]
 8007f7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f023 0303 	bic.w	r3, r3, #3
 8007f84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	011b      	lsls	r3, r3, #4
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007fa8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	621a      	str	r2, [r3, #32]
}
 8007fc4:	bf00      	nop
 8007fc6:	371c      	adds	r7, #28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	69db      	ldr	r3, [r3, #28]
 8007fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800800e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	031b      	lsls	r3, r3, #12
 8008014:	b29b      	uxth	r3, r3
 8008016:	697a      	ldr	r2, [r7, #20]
 8008018:	4313      	orrs	r3, r2
 800801a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008022:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	031b      	lsls	r3, r3, #12
 8008028:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	4313      	orrs	r3, r2
 8008030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	697a      	ldr	r2, [r7, #20]
 8008036:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	621a      	str	r2, [r3, #32]
}
 800803e:	bf00      	nop
 8008040:	371c      	adds	r7, #28
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr

0800804a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800804a:	b480      	push	{r7}
 800804c:	b085      	sub	sp, #20
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
 8008052:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008060:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4313      	orrs	r3, r2
 8008068:	f043 0307 	orr.w	r3, r3, #7
 800806c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	609a      	str	r2, [r3, #8]
}
 8008074:	bf00      	nop
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807e:	4770      	bx	lr

08008080 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
 800808c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800809a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	021a      	lsls	r2, r3, #8
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	431a      	orrs	r2, r3
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	609a      	str	r2, [r3, #8]
}
 80080b4:	bf00      	nop
 80080b6:	371c      	adds	r7, #28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b087      	sub	sp, #28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f003 031f 	and.w	r3, r3, #31
 80080d2:	2201      	movs	r2, #1
 80080d4:	fa02 f303 	lsl.w	r3, r2, r3
 80080d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6a1a      	ldr	r2, [r3, #32]
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	43db      	mvns	r3, r3
 80080e2:	401a      	ands	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6a1a      	ldr	r2, [r3, #32]
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	f003 031f 	and.w	r3, r3, #31
 80080f2:	6879      	ldr	r1, [r7, #4]
 80080f4:	fa01 f303 	lsl.w	r3, r1, r3
 80080f8:	431a      	orrs	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	621a      	str	r2, [r3, #32]
}
 80080fe:	bf00      	nop
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
	...

0800810c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800811c:	2b01      	cmp	r3, #1
 800811e:	d101      	bne.n	8008124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008120:	2302      	movs	r3, #2
 8008122:	e050      	b.n	80081c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800814a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a1c      	ldr	r2, [pc, #112]	; (80081d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d018      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008170:	d013      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a18      	ldr	r2, [pc, #96]	; (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d00e      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a16      	ldr	r2, [pc, #88]	; (80081dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d009      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a15      	ldr	r2, [pc, #84]	; (80081e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d004      	beq.n	800819a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a13      	ldr	r2, [pc, #76]	; (80081e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d10c      	bne.n	80081b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	40010000 	.word	0x40010000
 80081d8:	40000400 	.word	0x40000400
 80081dc:	40000800 	.word	0x40000800
 80081e0:	40000c00 	.word	0x40000c00
 80081e4:	40014000 	.word	0x40014000

080081e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081f2:	2300      	movs	r3, #0
 80081f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008200:	2302      	movs	r3, #2
 8008202:	e03d      	b.n	8008280 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	4313      	orrs	r3, r2
 8008218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	4313      	orrs	r3, r2
 8008226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	4313      	orrs	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4313      	orrs	r3, r2
 8008242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	4313      	orrs	r3, r2
 8008250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	695b      	ldr	r3, [r3, #20]
 800825c:	4313      	orrs	r3, r2
 800825e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	69db      	ldr	r3, [r3, #28]
 800826a:	4313      	orrs	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d101      	bne.n	80082c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e03f      	b.n	8008346 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d106      	bne.n	80082e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7fb fe7e 	bl	8003fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2224      	movs	r2, #36	; 0x24
 80082e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 fd19 	bl	8008d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	691a      	ldr	r2, [r3, #16]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800830c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	695a      	ldr	r2, [r3, #20]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800831c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68da      	ldr	r2, [r3, #12]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800832c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2220      	movs	r2, #32
 8008338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2220      	movs	r2, #32
 8008340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800834e:	b480      	push	{r7}
 8008350:	b085      	sub	sp, #20
 8008352:	af00      	add	r7, sp, #0
 8008354:	60f8      	str	r0, [r7, #12]
 8008356:	60b9      	str	r1, [r7, #8]
 8008358:	4613      	mov	r3, r2
 800835a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008362:	b2db      	uxtb	r3, r3
 8008364:	2b20      	cmp	r3, #32
 8008366:	d130      	bne.n	80083ca <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <HAL_UART_Transmit_IT+0x26>
 800836e:	88fb      	ldrh	r3, [r7, #6]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e029      	b.n	80083cc <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800837e:	2b01      	cmp	r3, #1
 8008380:	d101      	bne.n	8008386 <HAL_UART_Transmit_IT+0x38>
 8008382:	2302      	movs	r3, #2
 8008384:	e022      	b.n	80083cc <HAL_UART_Transmit_IT+0x7e>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	88fa      	ldrh	r2, [r7, #6]
 8008398:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	88fa      	ldrh	r2, [r7, #6]
 800839e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2200      	movs	r2, #0
 80083a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2221      	movs	r2, #33	; 0x21
 80083aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083c4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	e000      	b.n	80083cc <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80083ca:	2302      	movs	r3, #2
  }
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3714      	adds	r7, #20
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	4613      	mov	r3, r2
 80083e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b20      	cmp	r3, #32
 80083f0:	d11d      	bne.n	800842e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d002      	beq.n	80083fe <HAL_UART_Receive_IT+0x26>
 80083f8:	88fb      	ldrh	r3, [r7, #6]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80083fe:	2301      	movs	r3, #1
 8008400:	e016      	b.n	8008430 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008408:	2b01      	cmp	r3, #1
 800840a:	d101      	bne.n	8008410 <HAL_UART_Receive_IT+0x38>
 800840c:	2302      	movs	r3, #2
 800840e:	e00f      	b.n	8008430 <HAL_UART_Receive_IT+0x58>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	461a      	mov	r2, r3
 8008422:	68b9      	ldr	r1, [r7, #8]
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 faab 	bl	8008980 <UART_Start_Receive_IT>
 800842a:	4603      	mov	r3, r0
 800842c:	e000      	b.n	8008430 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800842e:	2302      	movs	r3, #2
  }
}
 8008430:	4618      	mov	r0, r3
 8008432:	3710      	adds	r7, #16
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}

08008438 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b0ba      	sub	sp, #232	; 0xe8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68db      	ldr	r3, [r3, #12]
 8008450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800845e:	2300      	movs	r3, #0
 8008460:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008464:	2300      	movs	r3, #0
 8008466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800846a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800846e:	f003 030f 	and.w	r3, r3, #15
 8008472:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008476:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10f      	bne.n	800849e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800847e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008482:	f003 0320 	and.w	r3, r3, #32
 8008486:	2b00      	cmp	r3, #0
 8008488:	d009      	beq.n	800849e <HAL_UART_IRQHandler+0x66>
 800848a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fb8f 	bl	8008bba <UART_Receive_IT>
      return;
 800849c:	e256      	b.n	800894c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800849e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 80de 	beq.w	8008664 <HAL_UART_IRQHandler+0x22c>
 80084a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d106      	bne.n	80084c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80084b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f000 80d1 	beq.w	8008664 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00b      	beq.n	80084e6 <HAL_UART_IRQHandler+0xae>
 80084ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d005      	beq.n	80084e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084de:	f043 0201 	orr.w	r2, r3, #1
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ea:	f003 0304 	and.w	r3, r3, #4
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00b      	beq.n	800850a <HAL_UART_IRQHandler+0xd2>
 80084f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d005      	beq.n	800850a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008502:	f043 0202 	orr.w	r2, r3, #2
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800850a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00b      	beq.n	800852e <HAL_UART_IRQHandler+0xf6>
 8008516:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800851a:	f003 0301 	and.w	r3, r3, #1
 800851e:	2b00      	cmp	r3, #0
 8008520:	d005      	beq.n	800852e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	f043 0204 	orr.w	r2, r3, #4
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800852e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008532:	f003 0308 	and.w	r3, r3, #8
 8008536:	2b00      	cmp	r3, #0
 8008538:	d011      	beq.n	800855e <HAL_UART_IRQHandler+0x126>
 800853a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b00      	cmp	r3, #0
 8008544:	d105      	bne.n	8008552 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800854a:	f003 0301 	and.w	r3, r3, #1
 800854e:	2b00      	cmp	r3, #0
 8008550:	d005      	beq.n	800855e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	f043 0208 	orr.w	r2, r3, #8
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 81ed 	beq.w	8008942 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800856c:	f003 0320 	and.w	r3, r3, #32
 8008570:	2b00      	cmp	r3, #0
 8008572:	d008      	beq.n	8008586 <HAL_UART_IRQHandler+0x14e>
 8008574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008578:	f003 0320 	and.w	r3, r3, #32
 800857c:	2b00      	cmp	r3, #0
 800857e:	d002      	beq.n	8008586 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fb1a 	bl	8008bba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008590:	2b40      	cmp	r3, #64	; 0x40
 8008592:	bf0c      	ite	eq
 8008594:	2301      	moveq	r3, #1
 8008596:	2300      	movne	r3, #0
 8008598:	b2db      	uxtb	r3, r3
 800859a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a2:	f003 0308 	and.w	r3, r3, #8
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d103      	bne.n	80085b2 <HAL_UART_IRQHandler+0x17a>
 80085aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d04f      	beq.n	8008652 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fa22 	bl	80089fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c2:	2b40      	cmp	r3, #64	; 0x40
 80085c4:	d141      	bne.n	800864a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3314      	adds	r3, #20
 80085cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085d4:	e853 3f00 	ldrex	r3, [r3]
 80085d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80085dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3314      	adds	r3, #20
 80085ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80085f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80085f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80085fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008602:	e841 2300 	strex	r3, r2, [r1]
 8008606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800860a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1d9      	bne.n	80085c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008616:	2b00      	cmp	r3, #0
 8008618:	d013      	beq.n	8008642 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800861e:	4a7d      	ldr	r2, [pc, #500]	; (8008814 <HAL_UART_IRQHandler+0x3dc>)
 8008620:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008626:	4618      	mov	r0, r3
 8008628:	f7fc fe0e 	bl	8005248 <HAL_DMA_Abort_IT>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d016      	beq.n	8008660 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800863c:	4610      	mov	r0, r2
 800863e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008640:	e00e      	b.n	8008660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 f986 	bl	8008954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008648:	e00a      	b.n	8008660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f982 	bl	8008954 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008650:	e006      	b.n	8008660 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f97e 	bl	8008954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800865e:	e170      	b.n	8008942 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008660:	bf00      	nop
    return;
 8008662:	e16e      	b.n	8008942 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008668:	2b01      	cmp	r3, #1
 800866a:	f040 814a 	bne.w	8008902 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800866e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008672:	f003 0310 	and.w	r3, r3, #16
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 8143 	beq.w	8008902 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800867c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008680:	f003 0310 	and.w	r3, r3, #16
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 813c 	beq.w	8008902 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800868a:	2300      	movs	r3, #0
 800868c:	60bb      	str	r3, [r7, #8]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	60bb      	str	r3, [r7, #8]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	60bb      	str	r3, [r7, #8]
 800869e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	695b      	ldr	r3, [r3, #20]
 80086a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086aa:	2b40      	cmp	r3, #64	; 0x40
 80086ac:	f040 80b4 	bne.w	8008818 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 8140 	beq.w	8008946 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086ce:	429a      	cmp	r2, r3
 80086d0:	f080 8139 	bcs.w	8008946 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086e6:	f000 8088 	beq.w	80087fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	330c      	adds	r3, #12
 80086f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086f8:	e853 3f00 	ldrex	r3, [r3]
 80086fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	330c      	adds	r3, #12
 8008712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008716:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800871a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008726:	e841 2300 	strex	r3, r2, [r1]
 800872a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800872e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008732:	2b00      	cmp	r3, #0
 8008734:	d1d9      	bne.n	80086ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3314      	adds	r3, #20
 800873c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008740:	e853 3f00 	ldrex	r3, [r3]
 8008744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008748:	f023 0301 	bic.w	r3, r3, #1
 800874c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3314      	adds	r3, #20
 8008756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800875a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800875e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800876c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e1      	bne.n	8008736 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3314      	adds	r3, #20
 8008778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3314      	adds	r3, #20
 8008792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800879c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e3      	bne.n	8008772 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2220      	movs	r2, #32
 80087ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	330c      	adds	r3, #12
 80087be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c2:	e853 3f00 	ldrex	r3, [r3]
 80087c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ca:	f023 0310 	bic.w	r3, r3, #16
 80087ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	330c      	adds	r3, #12
 80087d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80087dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80087de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087e4:	e841 2300 	strex	r3, r2, [r1]
 80087e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e3      	bne.n	80087b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fc fcb7 	bl	8005168 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008802:	b29b      	uxth	r3, r3
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	b29b      	uxth	r3, r3
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f8ac 	bl	8008968 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008810:	e099      	b.n	8008946 <HAL_UART_IRQHandler+0x50e>
 8008812:	bf00      	nop
 8008814:	08008ac3 	.word	0x08008ac3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008820:	b29b      	uxth	r3, r3
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800882c:	b29b      	uxth	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 808b 	beq.w	800894a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 8086 	beq.w	800894a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	330c      	adds	r3, #12
 8008844:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800884e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008850:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	330c      	adds	r3, #12
 800885e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008862:	647a      	str	r2, [r7, #68]	; 0x44
 8008864:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008866:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800886a:	e841 2300 	strex	r3, r2, [r1]
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e3      	bne.n	800883e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	3314      	adds	r3, #20
 800887c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008880:	e853 3f00 	ldrex	r3, [r3]
 8008884:	623b      	str	r3, [r7, #32]
   return(result);
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	f023 0301 	bic.w	r3, r3, #1
 800888c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3314      	adds	r3, #20
 8008896:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800889a:	633a      	str	r2, [r7, #48]	; 0x30
 800889c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088a2:	e841 2300 	strex	r3, r2, [r1]
 80088a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1e3      	bne.n	8008876 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	330c      	adds	r3, #12
 80088c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f023 0310 	bic.w	r3, r3, #16
 80088d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	330c      	adds	r3, #12
 80088dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80088e0:	61fa      	str	r2, [r7, #28]
 80088e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	69b9      	ldr	r1, [r7, #24]
 80088e6:	69fa      	ldr	r2, [r7, #28]
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	617b      	str	r3, [r7, #20]
   return(result);
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e3      	bne.n	80088bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f834 	bl	8008968 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008900:	e023      	b.n	800894a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800890a:	2b00      	cmp	r3, #0
 800890c:	d009      	beq.n	8008922 <HAL_UART_IRQHandler+0x4ea>
 800890e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008916:	2b00      	cmp	r3, #0
 8008918:	d003      	beq.n	8008922 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f8e5 	bl	8008aea <UART_Transmit_IT>
    return;
 8008920:	e014      	b.n	800894c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00e      	beq.n	800894c <HAL_UART_IRQHandler+0x514>
 800892e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008936:	2b00      	cmp	r3, #0
 8008938:	d008      	beq.n	800894c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f925 	bl	8008b8a <UART_EndTransmit_IT>
    return;
 8008940:	e004      	b.n	800894c <HAL_UART_IRQHandler+0x514>
    return;
 8008942:	bf00      	nop
 8008944:	e002      	b.n	800894c <HAL_UART_IRQHandler+0x514>
      return;
 8008946:	bf00      	nop
 8008948:	e000      	b.n	800894c <HAL_UART_IRQHandler+0x514>
      return;
 800894a:	bf00      	nop
  }
}
 800894c:	37e8      	adds	r7, #232	; 0xe8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop

08008954 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	460b      	mov	r3, r1
 8008972:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	4613      	mov	r3, r2
 800898c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	88fa      	ldrh	r2, [r7, #6]
 8008998:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	88fa      	ldrh	r2, [r7, #6]
 800899e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2222      	movs	r2, #34	; 0x22
 80089aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d007      	beq.n	80089ce <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089cc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	695a      	ldr	r2, [r3, #20]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0201 	orr.w	r2, r2, #1
 80089dc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68da      	ldr	r2, [r3, #12]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f042 0220 	orr.w	r2, r2, #32
 80089ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b095      	sub	sp, #84	; 0x54
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	330c      	adds	r3, #12
 8008a0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0e:	e853 3f00 	ldrex	r3, [r3]
 8008a12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	330c      	adds	r3, #12
 8008a22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a24:	643a      	str	r2, [r7, #64]	; 0x40
 8008a26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a2c:	e841 2300 	strex	r3, r2, [r1]
 8008a30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1e5      	bne.n	8008a04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	3314      	adds	r3, #20
 8008a3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	e853 3f00 	ldrex	r3, [r3]
 8008a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	f023 0301 	bic.w	r3, r3, #1
 8008a4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	3314      	adds	r3, #20
 8008a56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a60:	e841 2300 	strex	r3, r2, [r1]
 8008a64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1e5      	bne.n	8008a38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d119      	bne.n	8008aa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	330c      	adds	r3, #12
 8008a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	e853 3f00 	ldrex	r3, [r3]
 8008a82:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	f023 0310 	bic.w	r3, r3, #16
 8008a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	330c      	adds	r3, #12
 8008a92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a94:	61ba      	str	r2, [r7, #24]
 8008a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a98:	6979      	ldr	r1, [r7, #20]
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	e841 2300 	strex	r3, r2, [r1]
 8008aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d1e5      	bne.n	8008a74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008ab6:	bf00      	nop
 8008ab8:	3754      	adds	r7, #84	; 0x54
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b084      	sub	sp, #16
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ace:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f7ff ff39 	bl	8008954 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ae2:	bf00      	nop
 8008ae4:	3710      	adds	r7, #16
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b085      	sub	sp, #20
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b21      	cmp	r3, #33	; 0x21
 8008afc:	d13e      	bne.n	8008b7c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b06:	d114      	bne.n	8008b32 <UART_Transmit_IT+0x48>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d110      	bne.n	8008b32 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	881b      	ldrh	r3, [r3, #0]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6a1b      	ldr	r3, [r3, #32]
 8008b2a:	1c9a      	adds	r2, r3, #2
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	621a      	str	r2, [r3, #32]
 8008b30:	e008      	b.n	8008b44 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	1c59      	adds	r1, r3, #1
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	6211      	str	r1, [r2, #32]
 8008b3c:	781a      	ldrb	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b48:	b29b      	uxth	r3, r3
 8008b4a:	3b01      	subs	r3, #1
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	4619      	mov	r1, r3
 8008b52:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10f      	bne.n	8008b78 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68da      	ldr	r2, [r3, #12]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68da      	ldr	r2, [r3, #12]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	e000      	b.n	8008b7e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008b7c:	2302      	movs	r3, #2
  }
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68da      	ldr	r2, [r3, #12]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ba0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2220      	movs	r2, #32
 8008ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f7f9 fdfe 	bl	80027ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b08c      	sub	sp, #48	; 0x30
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	2b22      	cmp	r3, #34	; 0x22
 8008bcc:	f040 80ab 	bne.w	8008d26 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bd8:	d117      	bne.n	8008c0a <UART_Receive_IT+0x50>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d113      	bne.n	8008c0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008be2:	2300      	movs	r3, #0
 8008be4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c02:	1c9a      	adds	r2, r3, #2
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	629a      	str	r2, [r3, #40]	; 0x28
 8008c08:	e026      	b.n	8008c58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008c10:	2300      	movs	r3, #0
 8008c12:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c1c:	d007      	beq.n	8008c2e <UART_Receive_IT+0x74>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10a      	bne.n	8008c3c <UART_Receive_IT+0x82>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d106      	bne.n	8008c3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	701a      	strb	r2, [r3, #0]
 8008c3a:	e008      	b.n	8008c4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c48:	b2da      	uxtb	r2, r3
 8008c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	4619      	mov	r1, r3
 8008c66:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d15a      	bne.n	8008d22 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f022 0220 	bic.w	r2, r2, #32
 8008c7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68da      	ldr	r2, [r3, #12]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	695a      	ldr	r2, [r3, #20]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d135      	bne.n	8008d18 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	330c      	adds	r3, #12
 8008cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	e853 3f00 	ldrex	r3, [r3]
 8008cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f023 0310 	bic.w	r3, r3, #16
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	330c      	adds	r3, #12
 8008cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd2:	623a      	str	r2, [r7, #32]
 8008cd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cd6:	69f9      	ldr	r1, [r7, #28]
 8008cd8:	6a3a      	ldr	r2, [r7, #32]
 8008cda:	e841 2300 	strex	r3, r2, [r1]
 8008cde:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d1e5      	bne.n	8008cb2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0310 	and.w	r3, r3, #16
 8008cf0:	2b10      	cmp	r3, #16
 8008cf2:	d10a      	bne.n	8008d0a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	60fb      	str	r3, [r7, #12]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	60fb      	str	r3, [r7, #12]
 8008d08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff fe29 	bl	8008968 <HAL_UARTEx_RxEventCallback>
 8008d16:	e002      	b.n	8008d1e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7f9 fd7d 	bl	8002818 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e002      	b.n	8008d28 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	e000      	b.n	8008d28 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008d26:	2302      	movs	r3, #2
  }
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3730      	adds	r7, #48	; 0x30
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d34:	b0c0      	sub	sp, #256	; 0x100
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d4c:	68d9      	ldr	r1, [r3, #12]
 8008d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	ea40 0301 	orr.w	r3, r0, r1
 8008d58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d5e:	689a      	ldr	r2, [r3, #8]
 8008d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	431a      	orrs	r2, r3
 8008d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d88:	f021 010c 	bic.w	r1, r1, #12
 8008d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008d96:	430b      	orrs	r3, r1
 8008d98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008daa:	6999      	ldr	r1, [r3, #24]
 8008dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	ea40 0301 	orr.w	r3, r0, r1
 8008db6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	4b8f      	ldr	r3, [pc, #572]	; (8008ffc <UART_SetConfig+0x2cc>)
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d005      	beq.n	8008dd0 <UART_SetConfig+0xa0>
 8008dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	4b8d      	ldr	r3, [pc, #564]	; (8009000 <UART_SetConfig+0x2d0>)
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d104      	bne.n	8008dda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008dd0:	f7fd faec 	bl	80063ac <HAL_RCC_GetPCLK2Freq>
 8008dd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008dd8:	e003      	b.n	8008de2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dda:	f7fd fad3 	bl	8006384 <HAL_RCC_GetPCLK1Freq>
 8008dde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008dec:	f040 810c 	bne.w	8009008 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008df4:	2200      	movs	r2, #0
 8008df6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008dfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008dfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008e02:	4622      	mov	r2, r4
 8008e04:	462b      	mov	r3, r5
 8008e06:	1891      	adds	r1, r2, r2
 8008e08:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e0a:	415b      	adcs	r3, r3
 8008e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008e12:	4621      	mov	r1, r4
 8008e14:	eb12 0801 	adds.w	r8, r2, r1
 8008e18:	4629      	mov	r1, r5
 8008e1a:	eb43 0901 	adc.w	r9, r3, r1
 8008e1e:	f04f 0200 	mov.w	r2, #0
 8008e22:	f04f 0300 	mov.w	r3, #0
 8008e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e32:	4690      	mov	r8, r2
 8008e34:	4699      	mov	r9, r3
 8008e36:	4623      	mov	r3, r4
 8008e38:	eb18 0303 	adds.w	r3, r8, r3
 8008e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e40:	462b      	mov	r3, r5
 8008e42:	eb49 0303 	adc.w	r3, r9, r3
 8008e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008e5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e5e:	460b      	mov	r3, r1
 8008e60:	18db      	adds	r3, r3, r3
 8008e62:	653b      	str	r3, [r7, #80]	; 0x50
 8008e64:	4613      	mov	r3, r2
 8008e66:	eb42 0303 	adc.w	r3, r2, r3
 8008e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8008e6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008e70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008e74:	f7f7 fe98 	bl	8000ba8 <__aeabi_uldivmod>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	4b61      	ldr	r3, [pc, #388]	; (8009004 <UART_SetConfig+0x2d4>)
 8008e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e82:	095b      	lsrs	r3, r3, #5
 8008e84:	011c      	lsls	r4, r3, #4
 8008e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008e90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008e94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008e98:	4642      	mov	r2, r8
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	1891      	adds	r1, r2, r2
 8008e9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008ea0:	415b      	adcs	r3, r3
 8008ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ea4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ea8:	4641      	mov	r1, r8
 8008eaa:	eb12 0a01 	adds.w	sl, r2, r1
 8008eae:	4649      	mov	r1, r9
 8008eb0:	eb43 0b01 	adc.w	fp, r3, r1
 8008eb4:	f04f 0200 	mov.w	r2, #0
 8008eb8:	f04f 0300 	mov.w	r3, #0
 8008ebc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ec0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ec8:	4692      	mov	sl, r2
 8008eca:	469b      	mov	fp, r3
 8008ecc:	4643      	mov	r3, r8
 8008ece:	eb1a 0303 	adds.w	r3, sl, r3
 8008ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ed6:	464b      	mov	r3, r9
 8008ed8:	eb4b 0303 	adc.w	r3, fp, r3
 8008edc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008eec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008ef0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	18db      	adds	r3, r3, r3
 8008ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8008efa:	4613      	mov	r3, r2
 8008efc:	eb42 0303 	adc.w	r3, r2, r3
 8008f00:	647b      	str	r3, [r7, #68]	; 0x44
 8008f02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008f0a:	f7f7 fe4d 	bl	8000ba8 <__aeabi_uldivmod>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4611      	mov	r1, r2
 8008f14:	4b3b      	ldr	r3, [pc, #236]	; (8009004 <UART_SetConfig+0x2d4>)
 8008f16:	fba3 2301 	umull	r2, r3, r3, r1
 8008f1a:	095b      	lsrs	r3, r3, #5
 8008f1c:	2264      	movs	r2, #100	; 0x64
 8008f1e:	fb02 f303 	mul.w	r3, r2, r3
 8008f22:	1acb      	subs	r3, r1, r3
 8008f24:	00db      	lsls	r3, r3, #3
 8008f26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f2a:	4b36      	ldr	r3, [pc, #216]	; (8009004 <UART_SetConfig+0x2d4>)
 8008f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8008f30:	095b      	lsrs	r3, r3, #5
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f38:	441c      	add	r4, r3
 8008f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008f44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008f48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008f4c:	4642      	mov	r2, r8
 8008f4e:	464b      	mov	r3, r9
 8008f50:	1891      	adds	r1, r2, r2
 8008f52:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f54:	415b      	adcs	r3, r3
 8008f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f5c:	4641      	mov	r1, r8
 8008f5e:	1851      	adds	r1, r2, r1
 8008f60:	6339      	str	r1, [r7, #48]	; 0x30
 8008f62:	4649      	mov	r1, r9
 8008f64:	414b      	adcs	r3, r1
 8008f66:	637b      	str	r3, [r7, #52]	; 0x34
 8008f68:	f04f 0200 	mov.w	r2, #0
 8008f6c:	f04f 0300 	mov.w	r3, #0
 8008f70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008f74:	4659      	mov	r1, fp
 8008f76:	00cb      	lsls	r3, r1, #3
 8008f78:	4651      	mov	r1, sl
 8008f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f7e:	4651      	mov	r1, sl
 8008f80:	00ca      	lsls	r2, r1, #3
 8008f82:	4610      	mov	r0, r2
 8008f84:	4619      	mov	r1, r3
 8008f86:	4603      	mov	r3, r0
 8008f88:	4642      	mov	r2, r8
 8008f8a:	189b      	adds	r3, r3, r2
 8008f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f90:	464b      	mov	r3, r9
 8008f92:	460a      	mov	r2, r1
 8008f94:	eb42 0303 	adc.w	r3, r2, r3
 8008f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008fa8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008fac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	18db      	adds	r3, r3, r3
 8008fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	eb42 0303 	adc.w	r3, r2, r3
 8008fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008fc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008fc6:	f7f7 fdef 	bl	8000ba8 <__aeabi_uldivmod>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4b0d      	ldr	r3, [pc, #52]	; (8009004 <UART_SetConfig+0x2d4>)
 8008fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8008fd4:	095b      	lsrs	r3, r3, #5
 8008fd6:	2164      	movs	r1, #100	; 0x64
 8008fd8:	fb01 f303 	mul.w	r3, r1, r3
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	00db      	lsls	r3, r3, #3
 8008fe0:	3332      	adds	r3, #50	; 0x32
 8008fe2:	4a08      	ldr	r2, [pc, #32]	; (8009004 <UART_SetConfig+0x2d4>)
 8008fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe8:	095b      	lsrs	r3, r3, #5
 8008fea:	f003 0207 	and.w	r2, r3, #7
 8008fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4422      	add	r2, r4
 8008ff6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ff8:	e105      	b.n	8009206 <UART_SetConfig+0x4d6>
 8008ffa:	bf00      	nop
 8008ffc:	40011000 	.word	0x40011000
 8009000:	40011400 	.word	0x40011400
 8009004:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800900c:	2200      	movs	r2, #0
 800900e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009012:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009016:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800901a:	4642      	mov	r2, r8
 800901c:	464b      	mov	r3, r9
 800901e:	1891      	adds	r1, r2, r2
 8009020:	6239      	str	r1, [r7, #32]
 8009022:	415b      	adcs	r3, r3
 8009024:	627b      	str	r3, [r7, #36]	; 0x24
 8009026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800902a:	4641      	mov	r1, r8
 800902c:	1854      	adds	r4, r2, r1
 800902e:	4649      	mov	r1, r9
 8009030:	eb43 0501 	adc.w	r5, r3, r1
 8009034:	f04f 0200 	mov.w	r2, #0
 8009038:	f04f 0300 	mov.w	r3, #0
 800903c:	00eb      	lsls	r3, r5, #3
 800903e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009042:	00e2      	lsls	r2, r4, #3
 8009044:	4614      	mov	r4, r2
 8009046:	461d      	mov	r5, r3
 8009048:	4643      	mov	r3, r8
 800904a:	18e3      	adds	r3, r4, r3
 800904c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009050:	464b      	mov	r3, r9
 8009052:	eb45 0303 	adc.w	r3, r5, r3
 8009056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800905a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009066:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800906a:	f04f 0200 	mov.w	r2, #0
 800906e:	f04f 0300 	mov.w	r3, #0
 8009072:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009076:	4629      	mov	r1, r5
 8009078:	008b      	lsls	r3, r1, #2
 800907a:	4621      	mov	r1, r4
 800907c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009080:	4621      	mov	r1, r4
 8009082:	008a      	lsls	r2, r1, #2
 8009084:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009088:	f7f7 fd8e 	bl	8000ba8 <__aeabi_uldivmod>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4b60      	ldr	r3, [pc, #384]	; (8009214 <UART_SetConfig+0x4e4>)
 8009092:	fba3 2302 	umull	r2, r3, r3, r2
 8009096:	095b      	lsrs	r3, r3, #5
 8009098:	011c      	lsls	r4, r3, #4
 800909a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800909e:	2200      	movs	r2, #0
 80090a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80090a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80090ac:	4642      	mov	r2, r8
 80090ae:	464b      	mov	r3, r9
 80090b0:	1891      	adds	r1, r2, r2
 80090b2:	61b9      	str	r1, [r7, #24]
 80090b4:	415b      	adcs	r3, r3
 80090b6:	61fb      	str	r3, [r7, #28]
 80090b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090bc:	4641      	mov	r1, r8
 80090be:	1851      	adds	r1, r2, r1
 80090c0:	6139      	str	r1, [r7, #16]
 80090c2:	4649      	mov	r1, r9
 80090c4:	414b      	adcs	r3, r1
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	f04f 0200 	mov.w	r2, #0
 80090cc:	f04f 0300 	mov.w	r3, #0
 80090d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090d4:	4659      	mov	r1, fp
 80090d6:	00cb      	lsls	r3, r1, #3
 80090d8:	4651      	mov	r1, sl
 80090da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090de:	4651      	mov	r1, sl
 80090e0:	00ca      	lsls	r2, r1, #3
 80090e2:	4610      	mov	r0, r2
 80090e4:	4619      	mov	r1, r3
 80090e6:	4603      	mov	r3, r0
 80090e8:	4642      	mov	r2, r8
 80090ea:	189b      	adds	r3, r3, r2
 80090ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090f0:	464b      	mov	r3, r9
 80090f2:	460a      	mov	r2, r1
 80090f4:	eb42 0303 	adc.w	r3, r2, r3
 80090f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	67bb      	str	r3, [r7, #120]	; 0x78
 8009106:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	f04f 0300 	mov.w	r3, #0
 8009110:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009114:	4649      	mov	r1, r9
 8009116:	008b      	lsls	r3, r1, #2
 8009118:	4641      	mov	r1, r8
 800911a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800911e:	4641      	mov	r1, r8
 8009120:	008a      	lsls	r2, r1, #2
 8009122:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009126:	f7f7 fd3f 	bl	8000ba8 <__aeabi_uldivmod>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	4b39      	ldr	r3, [pc, #228]	; (8009214 <UART_SetConfig+0x4e4>)
 8009130:	fba3 1302 	umull	r1, r3, r3, r2
 8009134:	095b      	lsrs	r3, r3, #5
 8009136:	2164      	movs	r1, #100	; 0x64
 8009138:	fb01 f303 	mul.w	r3, r1, r3
 800913c:	1ad3      	subs	r3, r2, r3
 800913e:	011b      	lsls	r3, r3, #4
 8009140:	3332      	adds	r3, #50	; 0x32
 8009142:	4a34      	ldr	r2, [pc, #208]	; (8009214 <UART_SetConfig+0x4e4>)
 8009144:	fba2 2303 	umull	r2, r3, r2, r3
 8009148:	095b      	lsrs	r3, r3, #5
 800914a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800914e:	441c      	add	r4, r3
 8009150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009154:	2200      	movs	r2, #0
 8009156:	673b      	str	r3, [r7, #112]	; 0x70
 8009158:	677a      	str	r2, [r7, #116]	; 0x74
 800915a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800915e:	4642      	mov	r2, r8
 8009160:	464b      	mov	r3, r9
 8009162:	1891      	adds	r1, r2, r2
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	415b      	adcs	r3, r3
 8009168:	60fb      	str	r3, [r7, #12]
 800916a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800916e:	4641      	mov	r1, r8
 8009170:	1851      	adds	r1, r2, r1
 8009172:	6039      	str	r1, [r7, #0]
 8009174:	4649      	mov	r1, r9
 8009176:	414b      	adcs	r3, r1
 8009178:	607b      	str	r3, [r7, #4]
 800917a:	f04f 0200 	mov.w	r2, #0
 800917e:	f04f 0300 	mov.w	r3, #0
 8009182:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009186:	4659      	mov	r1, fp
 8009188:	00cb      	lsls	r3, r1, #3
 800918a:	4651      	mov	r1, sl
 800918c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009190:	4651      	mov	r1, sl
 8009192:	00ca      	lsls	r2, r1, #3
 8009194:	4610      	mov	r0, r2
 8009196:	4619      	mov	r1, r3
 8009198:	4603      	mov	r3, r0
 800919a:	4642      	mov	r2, r8
 800919c:	189b      	adds	r3, r3, r2
 800919e:	66bb      	str	r3, [r7, #104]	; 0x68
 80091a0:	464b      	mov	r3, r9
 80091a2:	460a      	mov	r2, r1
 80091a4:	eb42 0303 	adc.w	r3, r2, r3
 80091a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	663b      	str	r3, [r7, #96]	; 0x60
 80091b4:	667a      	str	r2, [r7, #100]	; 0x64
 80091b6:	f04f 0200 	mov.w	r2, #0
 80091ba:	f04f 0300 	mov.w	r3, #0
 80091be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80091c2:	4649      	mov	r1, r9
 80091c4:	008b      	lsls	r3, r1, #2
 80091c6:	4641      	mov	r1, r8
 80091c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091cc:	4641      	mov	r1, r8
 80091ce:	008a      	lsls	r2, r1, #2
 80091d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80091d4:	f7f7 fce8 	bl	8000ba8 <__aeabi_uldivmod>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4b0d      	ldr	r3, [pc, #52]	; (8009214 <UART_SetConfig+0x4e4>)
 80091de:	fba3 1302 	umull	r1, r3, r3, r2
 80091e2:	095b      	lsrs	r3, r3, #5
 80091e4:	2164      	movs	r1, #100	; 0x64
 80091e6:	fb01 f303 	mul.w	r3, r1, r3
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	011b      	lsls	r3, r3, #4
 80091ee:	3332      	adds	r3, #50	; 0x32
 80091f0:	4a08      	ldr	r2, [pc, #32]	; (8009214 <UART_SetConfig+0x4e4>)
 80091f2:	fba2 2303 	umull	r2, r3, r2, r3
 80091f6:	095b      	lsrs	r3, r3, #5
 80091f8:	f003 020f 	and.w	r2, r3, #15
 80091fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4422      	add	r2, r4
 8009204:	609a      	str	r2, [r3, #8]
}
 8009206:	bf00      	nop
 8009208:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800920c:	46bd      	mov	sp, r7
 800920e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009212:	bf00      	nop
 8009214:	51eb851f 	.word	0x51eb851f

08009218 <calloc>:
 8009218:	4b02      	ldr	r3, [pc, #8]	; (8009224 <calloc+0xc>)
 800921a:	460a      	mov	r2, r1
 800921c:	4601      	mov	r1, r0
 800921e:	6818      	ldr	r0, [r3, #0]
 8009220:	f000 b834 	b.w	800928c <_calloc_r>
 8009224:	20000020 	.word	0x20000020

08009228 <__errno>:
 8009228:	4b01      	ldr	r3, [pc, #4]	; (8009230 <__errno+0x8>)
 800922a:	6818      	ldr	r0, [r3, #0]
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	20000020 	.word	0x20000020

08009234 <__libc_init_array>:
 8009234:	b570      	push	{r4, r5, r6, lr}
 8009236:	4d0d      	ldr	r5, [pc, #52]	; (800926c <__libc_init_array+0x38>)
 8009238:	4c0d      	ldr	r4, [pc, #52]	; (8009270 <__libc_init_array+0x3c>)
 800923a:	1b64      	subs	r4, r4, r5
 800923c:	10a4      	asrs	r4, r4, #2
 800923e:	2600      	movs	r6, #0
 8009240:	42a6      	cmp	r6, r4
 8009242:	d109      	bne.n	8009258 <__libc_init_array+0x24>
 8009244:	4d0b      	ldr	r5, [pc, #44]	; (8009274 <__libc_init_array+0x40>)
 8009246:	4c0c      	ldr	r4, [pc, #48]	; (8009278 <__libc_init_array+0x44>)
 8009248:	f001 fc60 	bl	800ab0c <_init>
 800924c:	1b64      	subs	r4, r4, r5
 800924e:	10a4      	asrs	r4, r4, #2
 8009250:	2600      	movs	r6, #0
 8009252:	42a6      	cmp	r6, r4
 8009254:	d105      	bne.n	8009262 <__libc_init_array+0x2e>
 8009256:	bd70      	pop	{r4, r5, r6, pc}
 8009258:	f855 3b04 	ldr.w	r3, [r5], #4
 800925c:	4798      	blx	r3
 800925e:	3601      	adds	r6, #1
 8009260:	e7ee      	b.n	8009240 <__libc_init_array+0xc>
 8009262:	f855 3b04 	ldr.w	r3, [r5], #4
 8009266:	4798      	blx	r3
 8009268:	3601      	adds	r6, #1
 800926a:	e7f2      	b.n	8009252 <__libc_init_array+0x1e>
 800926c:	0800aca0 	.word	0x0800aca0
 8009270:	0800aca0 	.word	0x0800aca0
 8009274:	0800aca0 	.word	0x0800aca0
 8009278:	0800aca4 	.word	0x0800aca4

0800927c <memset>:
 800927c:	4402      	add	r2, r0
 800927e:	4603      	mov	r3, r0
 8009280:	4293      	cmp	r3, r2
 8009282:	d100      	bne.n	8009286 <memset+0xa>
 8009284:	4770      	bx	lr
 8009286:	f803 1b01 	strb.w	r1, [r3], #1
 800928a:	e7f9      	b.n	8009280 <memset+0x4>

0800928c <_calloc_r>:
 800928c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800928e:	fba1 2402 	umull	r2, r4, r1, r2
 8009292:	b94c      	cbnz	r4, 80092a8 <_calloc_r+0x1c>
 8009294:	4611      	mov	r1, r2
 8009296:	9201      	str	r2, [sp, #4]
 8009298:	f000 f82e 	bl	80092f8 <_malloc_r>
 800929c:	9a01      	ldr	r2, [sp, #4]
 800929e:	4605      	mov	r5, r0
 80092a0:	b930      	cbnz	r0, 80092b0 <_calloc_r+0x24>
 80092a2:	4628      	mov	r0, r5
 80092a4:	b003      	add	sp, #12
 80092a6:	bd30      	pop	{r4, r5, pc}
 80092a8:	220c      	movs	r2, #12
 80092aa:	6002      	str	r2, [r0, #0]
 80092ac:	2500      	movs	r5, #0
 80092ae:	e7f8      	b.n	80092a2 <_calloc_r+0x16>
 80092b0:	4621      	mov	r1, r4
 80092b2:	f7ff ffe3 	bl	800927c <memset>
 80092b6:	e7f4      	b.n	80092a2 <_calloc_r+0x16>

080092b8 <sbrk_aligned>:
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	4e0e      	ldr	r6, [pc, #56]	; (80092f4 <sbrk_aligned+0x3c>)
 80092bc:	460c      	mov	r4, r1
 80092be:	6831      	ldr	r1, [r6, #0]
 80092c0:	4605      	mov	r5, r0
 80092c2:	b911      	cbnz	r1, 80092ca <sbrk_aligned+0x12>
 80092c4:	f000 f88c 	bl	80093e0 <_sbrk_r>
 80092c8:	6030      	str	r0, [r6, #0]
 80092ca:	4621      	mov	r1, r4
 80092cc:	4628      	mov	r0, r5
 80092ce:	f000 f887 	bl	80093e0 <_sbrk_r>
 80092d2:	1c43      	adds	r3, r0, #1
 80092d4:	d00a      	beq.n	80092ec <sbrk_aligned+0x34>
 80092d6:	1cc4      	adds	r4, r0, #3
 80092d8:	f024 0403 	bic.w	r4, r4, #3
 80092dc:	42a0      	cmp	r0, r4
 80092de:	d007      	beq.n	80092f0 <sbrk_aligned+0x38>
 80092e0:	1a21      	subs	r1, r4, r0
 80092e2:	4628      	mov	r0, r5
 80092e4:	f000 f87c 	bl	80093e0 <_sbrk_r>
 80092e8:	3001      	adds	r0, #1
 80092ea:	d101      	bne.n	80092f0 <sbrk_aligned+0x38>
 80092ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80092f0:	4620      	mov	r0, r4
 80092f2:	bd70      	pop	{r4, r5, r6, pc}
 80092f4:	20000348 	.word	0x20000348

080092f8 <_malloc_r>:
 80092f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092fc:	1ccd      	adds	r5, r1, #3
 80092fe:	f025 0503 	bic.w	r5, r5, #3
 8009302:	3508      	adds	r5, #8
 8009304:	2d0c      	cmp	r5, #12
 8009306:	bf38      	it	cc
 8009308:	250c      	movcc	r5, #12
 800930a:	2d00      	cmp	r5, #0
 800930c:	4607      	mov	r7, r0
 800930e:	db01      	blt.n	8009314 <_malloc_r+0x1c>
 8009310:	42a9      	cmp	r1, r5
 8009312:	d905      	bls.n	8009320 <_malloc_r+0x28>
 8009314:	230c      	movs	r3, #12
 8009316:	603b      	str	r3, [r7, #0]
 8009318:	2600      	movs	r6, #0
 800931a:	4630      	mov	r0, r6
 800931c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009320:	4e2e      	ldr	r6, [pc, #184]	; (80093dc <_malloc_r+0xe4>)
 8009322:	f000 f8dd 	bl	80094e0 <__malloc_lock>
 8009326:	6833      	ldr	r3, [r6, #0]
 8009328:	461c      	mov	r4, r3
 800932a:	bb34      	cbnz	r4, 800937a <_malloc_r+0x82>
 800932c:	4629      	mov	r1, r5
 800932e:	4638      	mov	r0, r7
 8009330:	f7ff ffc2 	bl	80092b8 <sbrk_aligned>
 8009334:	1c43      	adds	r3, r0, #1
 8009336:	4604      	mov	r4, r0
 8009338:	d14d      	bne.n	80093d6 <_malloc_r+0xde>
 800933a:	6834      	ldr	r4, [r6, #0]
 800933c:	4626      	mov	r6, r4
 800933e:	2e00      	cmp	r6, #0
 8009340:	d140      	bne.n	80093c4 <_malloc_r+0xcc>
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	4631      	mov	r1, r6
 8009346:	4638      	mov	r0, r7
 8009348:	eb04 0803 	add.w	r8, r4, r3
 800934c:	f000 f848 	bl	80093e0 <_sbrk_r>
 8009350:	4580      	cmp	r8, r0
 8009352:	d13a      	bne.n	80093ca <_malloc_r+0xd2>
 8009354:	6821      	ldr	r1, [r4, #0]
 8009356:	3503      	adds	r5, #3
 8009358:	1a6d      	subs	r5, r5, r1
 800935a:	f025 0503 	bic.w	r5, r5, #3
 800935e:	3508      	adds	r5, #8
 8009360:	2d0c      	cmp	r5, #12
 8009362:	bf38      	it	cc
 8009364:	250c      	movcc	r5, #12
 8009366:	4629      	mov	r1, r5
 8009368:	4638      	mov	r0, r7
 800936a:	f7ff ffa5 	bl	80092b8 <sbrk_aligned>
 800936e:	3001      	adds	r0, #1
 8009370:	d02b      	beq.n	80093ca <_malloc_r+0xd2>
 8009372:	6823      	ldr	r3, [r4, #0]
 8009374:	442b      	add	r3, r5
 8009376:	6023      	str	r3, [r4, #0]
 8009378:	e00e      	b.n	8009398 <_malloc_r+0xa0>
 800937a:	6822      	ldr	r2, [r4, #0]
 800937c:	1b52      	subs	r2, r2, r5
 800937e:	d41e      	bmi.n	80093be <_malloc_r+0xc6>
 8009380:	2a0b      	cmp	r2, #11
 8009382:	d916      	bls.n	80093b2 <_malloc_r+0xba>
 8009384:	1961      	adds	r1, r4, r5
 8009386:	42a3      	cmp	r3, r4
 8009388:	6025      	str	r5, [r4, #0]
 800938a:	bf18      	it	ne
 800938c:	6059      	strne	r1, [r3, #4]
 800938e:	6863      	ldr	r3, [r4, #4]
 8009390:	bf08      	it	eq
 8009392:	6031      	streq	r1, [r6, #0]
 8009394:	5162      	str	r2, [r4, r5]
 8009396:	604b      	str	r3, [r1, #4]
 8009398:	4638      	mov	r0, r7
 800939a:	f104 060b 	add.w	r6, r4, #11
 800939e:	f000 f8a5 	bl	80094ec <__malloc_unlock>
 80093a2:	f026 0607 	bic.w	r6, r6, #7
 80093a6:	1d23      	adds	r3, r4, #4
 80093a8:	1af2      	subs	r2, r6, r3
 80093aa:	d0b6      	beq.n	800931a <_malloc_r+0x22>
 80093ac:	1b9b      	subs	r3, r3, r6
 80093ae:	50a3      	str	r3, [r4, r2]
 80093b0:	e7b3      	b.n	800931a <_malloc_r+0x22>
 80093b2:	6862      	ldr	r2, [r4, #4]
 80093b4:	42a3      	cmp	r3, r4
 80093b6:	bf0c      	ite	eq
 80093b8:	6032      	streq	r2, [r6, #0]
 80093ba:	605a      	strne	r2, [r3, #4]
 80093bc:	e7ec      	b.n	8009398 <_malloc_r+0xa0>
 80093be:	4623      	mov	r3, r4
 80093c0:	6864      	ldr	r4, [r4, #4]
 80093c2:	e7b2      	b.n	800932a <_malloc_r+0x32>
 80093c4:	4634      	mov	r4, r6
 80093c6:	6876      	ldr	r6, [r6, #4]
 80093c8:	e7b9      	b.n	800933e <_malloc_r+0x46>
 80093ca:	230c      	movs	r3, #12
 80093cc:	603b      	str	r3, [r7, #0]
 80093ce:	4638      	mov	r0, r7
 80093d0:	f000 f88c 	bl	80094ec <__malloc_unlock>
 80093d4:	e7a1      	b.n	800931a <_malloc_r+0x22>
 80093d6:	6025      	str	r5, [r4, #0]
 80093d8:	e7de      	b.n	8009398 <_malloc_r+0xa0>
 80093da:	bf00      	nop
 80093dc:	20000344 	.word	0x20000344

080093e0 <_sbrk_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d06      	ldr	r5, [pc, #24]	; (80093fc <_sbrk_r+0x1c>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4604      	mov	r4, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	602b      	str	r3, [r5, #0]
 80093ec:	f7fa feca 	bl	8004184 <_sbrk>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d102      	bne.n	80093fa <_sbrk_r+0x1a>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	b103      	cbz	r3, 80093fa <_sbrk_r+0x1a>
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	2000034c 	.word	0x2000034c

08009400 <sniprintf>:
 8009400:	b40c      	push	{r2, r3}
 8009402:	b530      	push	{r4, r5, lr}
 8009404:	4b17      	ldr	r3, [pc, #92]	; (8009464 <sniprintf+0x64>)
 8009406:	1e0c      	subs	r4, r1, #0
 8009408:	681d      	ldr	r5, [r3, #0]
 800940a:	b09d      	sub	sp, #116	; 0x74
 800940c:	da08      	bge.n	8009420 <sniprintf+0x20>
 800940e:	238b      	movs	r3, #139	; 0x8b
 8009410:	602b      	str	r3, [r5, #0]
 8009412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009416:	b01d      	add	sp, #116	; 0x74
 8009418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800941c:	b002      	add	sp, #8
 800941e:	4770      	bx	lr
 8009420:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009424:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009428:	bf14      	ite	ne
 800942a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800942e:	4623      	moveq	r3, r4
 8009430:	9304      	str	r3, [sp, #16]
 8009432:	9307      	str	r3, [sp, #28]
 8009434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009438:	9002      	str	r0, [sp, #8]
 800943a:	9006      	str	r0, [sp, #24]
 800943c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009440:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009442:	ab21      	add	r3, sp, #132	; 0x84
 8009444:	a902      	add	r1, sp, #8
 8009446:	4628      	mov	r0, r5
 8009448:	9301      	str	r3, [sp, #4]
 800944a:	f000 f8b1 	bl	80095b0 <_svfiprintf_r>
 800944e:	1c43      	adds	r3, r0, #1
 8009450:	bfbc      	itt	lt
 8009452:	238b      	movlt	r3, #139	; 0x8b
 8009454:	602b      	strlt	r3, [r5, #0]
 8009456:	2c00      	cmp	r4, #0
 8009458:	d0dd      	beq.n	8009416 <sniprintf+0x16>
 800945a:	9b02      	ldr	r3, [sp, #8]
 800945c:	2200      	movs	r2, #0
 800945e:	701a      	strb	r2, [r3, #0]
 8009460:	e7d9      	b.n	8009416 <sniprintf+0x16>
 8009462:	bf00      	nop
 8009464:	20000020 	.word	0x20000020

08009468 <siprintf>:
 8009468:	b40e      	push	{r1, r2, r3}
 800946a:	b500      	push	{lr}
 800946c:	b09c      	sub	sp, #112	; 0x70
 800946e:	ab1d      	add	r3, sp, #116	; 0x74
 8009470:	9002      	str	r0, [sp, #8]
 8009472:	9006      	str	r0, [sp, #24]
 8009474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009478:	4809      	ldr	r0, [pc, #36]	; (80094a0 <siprintf+0x38>)
 800947a:	9107      	str	r1, [sp, #28]
 800947c:	9104      	str	r1, [sp, #16]
 800947e:	4909      	ldr	r1, [pc, #36]	; (80094a4 <siprintf+0x3c>)
 8009480:	f853 2b04 	ldr.w	r2, [r3], #4
 8009484:	9105      	str	r1, [sp, #20]
 8009486:	6800      	ldr	r0, [r0, #0]
 8009488:	9301      	str	r3, [sp, #4]
 800948a:	a902      	add	r1, sp, #8
 800948c:	f000 f890 	bl	80095b0 <_svfiprintf_r>
 8009490:	9b02      	ldr	r3, [sp, #8]
 8009492:	2200      	movs	r2, #0
 8009494:	701a      	strb	r2, [r3, #0]
 8009496:	b01c      	add	sp, #112	; 0x70
 8009498:	f85d eb04 	ldr.w	lr, [sp], #4
 800949c:	b003      	add	sp, #12
 800949e:	4770      	bx	lr
 80094a0:	20000020 	.word	0x20000020
 80094a4:	ffff0208 	.word	0xffff0208

080094a8 <strcpy>:
 80094a8:	4603      	mov	r3, r0
 80094aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ae:	f803 2b01 	strb.w	r2, [r3], #1
 80094b2:	2a00      	cmp	r2, #0
 80094b4:	d1f9      	bne.n	80094aa <strcpy+0x2>
 80094b6:	4770      	bx	lr

080094b8 <strncmp>:
 80094b8:	b510      	push	{r4, lr}
 80094ba:	b17a      	cbz	r2, 80094dc <strncmp+0x24>
 80094bc:	4603      	mov	r3, r0
 80094be:	3901      	subs	r1, #1
 80094c0:	1884      	adds	r4, r0, r2
 80094c2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80094c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80094ca:	4290      	cmp	r0, r2
 80094cc:	d101      	bne.n	80094d2 <strncmp+0x1a>
 80094ce:	42a3      	cmp	r3, r4
 80094d0:	d101      	bne.n	80094d6 <strncmp+0x1e>
 80094d2:	1a80      	subs	r0, r0, r2
 80094d4:	bd10      	pop	{r4, pc}
 80094d6:	2800      	cmp	r0, #0
 80094d8:	d1f3      	bne.n	80094c2 <strncmp+0xa>
 80094da:	e7fa      	b.n	80094d2 <strncmp+0x1a>
 80094dc:	4610      	mov	r0, r2
 80094de:	e7f9      	b.n	80094d4 <strncmp+0x1c>

080094e0 <__malloc_lock>:
 80094e0:	4801      	ldr	r0, [pc, #4]	; (80094e8 <__malloc_lock+0x8>)
 80094e2:	f000 baf9 	b.w	8009ad8 <__retarget_lock_acquire_recursive>
 80094e6:	bf00      	nop
 80094e8:	20000350 	.word	0x20000350

080094ec <__malloc_unlock>:
 80094ec:	4801      	ldr	r0, [pc, #4]	; (80094f4 <__malloc_unlock+0x8>)
 80094ee:	f000 baf4 	b.w	8009ada <__retarget_lock_release_recursive>
 80094f2:	bf00      	nop
 80094f4:	20000350 	.word	0x20000350

080094f8 <__ssputs_r>:
 80094f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094fc:	688e      	ldr	r6, [r1, #8]
 80094fe:	429e      	cmp	r6, r3
 8009500:	4682      	mov	sl, r0
 8009502:	460c      	mov	r4, r1
 8009504:	4690      	mov	r8, r2
 8009506:	461f      	mov	r7, r3
 8009508:	d838      	bhi.n	800957c <__ssputs_r+0x84>
 800950a:	898a      	ldrh	r2, [r1, #12]
 800950c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009510:	d032      	beq.n	8009578 <__ssputs_r+0x80>
 8009512:	6825      	ldr	r5, [r4, #0]
 8009514:	6909      	ldr	r1, [r1, #16]
 8009516:	eba5 0901 	sub.w	r9, r5, r1
 800951a:	6965      	ldr	r5, [r4, #20]
 800951c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009520:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009524:	3301      	adds	r3, #1
 8009526:	444b      	add	r3, r9
 8009528:	106d      	asrs	r5, r5, #1
 800952a:	429d      	cmp	r5, r3
 800952c:	bf38      	it	cc
 800952e:	461d      	movcc	r5, r3
 8009530:	0553      	lsls	r3, r2, #21
 8009532:	d531      	bpl.n	8009598 <__ssputs_r+0xa0>
 8009534:	4629      	mov	r1, r5
 8009536:	f7ff fedf 	bl	80092f8 <_malloc_r>
 800953a:	4606      	mov	r6, r0
 800953c:	b950      	cbnz	r0, 8009554 <__ssputs_r+0x5c>
 800953e:	230c      	movs	r3, #12
 8009540:	f8ca 3000 	str.w	r3, [sl]
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800954a:	81a3      	strh	r3, [r4, #12]
 800954c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009554:	6921      	ldr	r1, [r4, #16]
 8009556:	464a      	mov	r2, r9
 8009558:	f000 fac0 	bl	8009adc <memcpy>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009566:	81a3      	strh	r3, [r4, #12]
 8009568:	6126      	str	r6, [r4, #16]
 800956a:	6165      	str	r5, [r4, #20]
 800956c:	444e      	add	r6, r9
 800956e:	eba5 0509 	sub.w	r5, r5, r9
 8009572:	6026      	str	r6, [r4, #0]
 8009574:	60a5      	str	r5, [r4, #8]
 8009576:	463e      	mov	r6, r7
 8009578:	42be      	cmp	r6, r7
 800957a:	d900      	bls.n	800957e <__ssputs_r+0x86>
 800957c:	463e      	mov	r6, r7
 800957e:	6820      	ldr	r0, [r4, #0]
 8009580:	4632      	mov	r2, r6
 8009582:	4641      	mov	r1, r8
 8009584:	f000 fab8 	bl	8009af8 <memmove>
 8009588:	68a3      	ldr	r3, [r4, #8]
 800958a:	1b9b      	subs	r3, r3, r6
 800958c:	60a3      	str	r3, [r4, #8]
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	4433      	add	r3, r6
 8009592:	6023      	str	r3, [r4, #0]
 8009594:	2000      	movs	r0, #0
 8009596:	e7db      	b.n	8009550 <__ssputs_r+0x58>
 8009598:	462a      	mov	r2, r5
 800959a:	f000 fb13 	bl	8009bc4 <_realloc_r>
 800959e:	4606      	mov	r6, r0
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d1e1      	bne.n	8009568 <__ssputs_r+0x70>
 80095a4:	6921      	ldr	r1, [r4, #16]
 80095a6:	4650      	mov	r0, sl
 80095a8:	f000 fac0 	bl	8009b2c <_free_r>
 80095ac:	e7c7      	b.n	800953e <__ssputs_r+0x46>
	...

080095b0 <_svfiprintf_r>:
 80095b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b4:	4698      	mov	r8, r3
 80095b6:	898b      	ldrh	r3, [r1, #12]
 80095b8:	061b      	lsls	r3, r3, #24
 80095ba:	b09d      	sub	sp, #116	; 0x74
 80095bc:	4607      	mov	r7, r0
 80095be:	460d      	mov	r5, r1
 80095c0:	4614      	mov	r4, r2
 80095c2:	d50e      	bpl.n	80095e2 <_svfiprintf_r+0x32>
 80095c4:	690b      	ldr	r3, [r1, #16]
 80095c6:	b963      	cbnz	r3, 80095e2 <_svfiprintf_r+0x32>
 80095c8:	2140      	movs	r1, #64	; 0x40
 80095ca:	f7ff fe95 	bl	80092f8 <_malloc_r>
 80095ce:	6028      	str	r0, [r5, #0]
 80095d0:	6128      	str	r0, [r5, #16]
 80095d2:	b920      	cbnz	r0, 80095de <_svfiprintf_r+0x2e>
 80095d4:	230c      	movs	r3, #12
 80095d6:	603b      	str	r3, [r7, #0]
 80095d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095dc:	e0d1      	b.n	8009782 <_svfiprintf_r+0x1d2>
 80095de:	2340      	movs	r3, #64	; 0x40
 80095e0:	616b      	str	r3, [r5, #20]
 80095e2:	2300      	movs	r3, #0
 80095e4:	9309      	str	r3, [sp, #36]	; 0x24
 80095e6:	2320      	movs	r3, #32
 80095e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80095f0:	2330      	movs	r3, #48	; 0x30
 80095f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800979c <_svfiprintf_r+0x1ec>
 80095f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095fa:	f04f 0901 	mov.w	r9, #1
 80095fe:	4623      	mov	r3, r4
 8009600:	469a      	mov	sl, r3
 8009602:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009606:	b10a      	cbz	r2, 800960c <_svfiprintf_r+0x5c>
 8009608:	2a25      	cmp	r2, #37	; 0x25
 800960a:	d1f9      	bne.n	8009600 <_svfiprintf_r+0x50>
 800960c:	ebba 0b04 	subs.w	fp, sl, r4
 8009610:	d00b      	beq.n	800962a <_svfiprintf_r+0x7a>
 8009612:	465b      	mov	r3, fp
 8009614:	4622      	mov	r2, r4
 8009616:	4629      	mov	r1, r5
 8009618:	4638      	mov	r0, r7
 800961a:	f7ff ff6d 	bl	80094f8 <__ssputs_r>
 800961e:	3001      	adds	r0, #1
 8009620:	f000 80aa 	beq.w	8009778 <_svfiprintf_r+0x1c8>
 8009624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009626:	445a      	add	r2, fp
 8009628:	9209      	str	r2, [sp, #36]	; 0x24
 800962a:	f89a 3000 	ldrb.w	r3, [sl]
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 80a2 	beq.w	8009778 <_svfiprintf_r+0x1c8>
 8009634:	2300      	movs	r3, #0
 8009636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800963a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800963e:	f10a 0a01 	add.w	sl, sl, #1
 8009642:	9304      	str	r3, [sp, #16]
 8009644:	9307      	str	r3, [sp, #28]
 8009646:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800964a:	931a      	str	r3, [sp, #104]	; 0x68
 800964c:	4654      	mov	r4, sl
 800964e:	2205      	movs	r2, #5
 8009650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009654:	4851      	ldr	r0, [pc, #324]	; (800979c <_svfiprintf_r+0x1ec>)
 8009656:	f7f6 fdcb 	bl	80001f0 <memchr>
 800965a:	9a04      	ldr	r2, [sp, #16]
 800965c:	b9d8      	cbnz	r0, 8009696 <_svfiprintf_r+0xe6>
 800965e:	06d0      	lsls	r0, r2, #27
 8009660:	bf44      	itt	mi
 8009662:	2320      	movmi	r3, #32
 8009664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009668:	0711      	lsls	r1, r2, #28
 800966a:	bf44      	itt	mi
 800966c:	232b      	movmi	r3, #43	; 0x2b
 800966e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009672:	f89a 3000 	ldrb.w	r3, [sl]
 8009676:	2b2a      	cmp	r3, #42	; 0x2a
 8009678:	d015      	beq.n	80096a6 <_svfiprintf_r+0xf6>
 800967a:	9a07      	ldr	r2, [sp, #28]
 800967c:	4654      	mov	r4, sl
 800967e:	2000      	movs	r0, #0
 8009680:	f04f 0c0a 	mov.w	ip, #10
 8009684:	4621      	mov	r1, r4
 8009686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800968a:	3b30      	subs	r3, #48	; 0x30
 800968c:	2b09      	cmp	r3, #9
 800968e:	d94e      	bls.n	800972e <_svfiprintf_r+0x17e>
 8009690:	b1b0      	cbz	r0, 80096c0 <_svfiprintf_r+0x110>
 8009692:	9207      	str	r2, [sp, #28]
 8009694:	e014      	b.n	80096c0 <_svfiprintf_r+0x110>
 8009696:	eba0 0308 	sub.w	r3, r0, r8
 800969a:	fa09 f303 	lsl.w	r3, r9, r3
 800969e:	4313      	orrs	r3, r2
 80096a0:	9304      	str	r3, [sp, #16]
 80096a2:	46a2      	mov	sl, r4
 80096a4:	e7d2      	b.n	800964c <_svfiprintf_r+0x9c>
 80096a6:	9b03      	ldr	r3, [sp, #12]
 80096a8:	1d19      	adds	r1, r3, #4
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	9103      	str	r1, [sp, #12]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bfbb      	ittet	lt
 80096b2:	425b      	neglt	r3, r3
 80096b4:	f042 0202 	orrlt.w	r2, r2, #2
 80096b8:	9307      	strge	r3, [sp, #28]
 80096ba:	9307      	strlt	r3, [sp, #28]
 80096bc:	bfb8      	it	lt
 80096be:	9204      	strlt	r2, [sp, #16]
 80096c0:	7823      	ldrb	r3, [r4, #0]
 80096c2:	2b2e      	cmp	r3, #46	; 0x2e
 80096c4:	d10c      	bne.n	80096e0 <_svfiprintf_r+0x130>
 80096c6:	7863      	ldrb	r3, [r4, #1]
 80096c8:	2b2a      	cmp	r3, #42	; 0x2a
 80096ca:	d135      	bne.n	8009738 <_svfiprintf_r+0x188>
 80096cc:	9b03      	ldr	r3, [sp, #12]
 80096ce:	1d1a      	adds	r2, r3, #4
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	9203      	str	r2, [sp, #12]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	bfb8      	it	lt
 80096d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80096dc:	3402      	adds	r4, #2
 80096de:	9305      	str	r3, [sp, #20]
 80096e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80097ac <_svfiprintf_r+0x1fc>
 80096e4:	7821      	ldrb	r1, [r4, #0]
 80096e6:	2203      	movs	r2, #3
 80096e8:	4650      	mov	r0, sl
 80096ea:	f7f6 fd81 	bl	80001f0 <memchr>
 80096ee:	b140      	cbz	r0, 8009702 <_svfiprintf_r+0x152>
 80096f0:	2340      	movs	r3, #64	; 0x40
 80096f2:	eba0 000a 	sub.w	r0, r0, sl
 80096f6:	fa03 f000 	lsl.w	r0, r3, r0
 80096fa:	9b04      	ldr	r3, [sp, #16]
 80096fc:	4303      	orrs	r3, r0
 80096fe:	3401      	adds	r4, #1
 8009700:	9304      	str	r3, [sp, #16]
 8009702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009706:	4826      	ldr	r0, [pc, #152]	; (80097a0 <_svfiprintf_r+0x1f0>)
 8009708:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800970c:	2206      	movs	r2, #6
 800970e:	f7f6 fd6f 	bl	80001f0 <memchr>
 8009712:	2800      	cmp	r0, #0
 8009714:	d038      	beq.n	8009788 <_svfiprintf_r+0x1d8>
 8009716:	4b23      	ldr	r3, [pc, #140]	; (80097a4 <_svfiprintf_r+0x1f4>)
 8009718:	bb1b      	cbnz	r3, 8009762 <_svfiprintf_r+0x1b2>
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	3307      	adds	r3, #7
 800971e:	f023 0307 	bic.w	r3, r3, #7
 8009722:	3308      	adds	r3, #8
 8009724:	9303      	str	r3, [sp, #12]
 8009726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009728:	4433      	add	r3, r6
 800972a:	9309      	str	r3, [sp, #36]	; 0x24
 800972c:	e767      	b.n	80095fe <_svfiprintf_r+0x4e>
 800972e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009732:	460c      	mov	r4, r1
 8009734:	2001      	movs	r0, #1
 8009736:	e7a5      	b.n	8009684 <_svfiprintf_r+0xd4>
 8009738:	2300      	movs	r3, #0
 800973a:	3401      	adds	r4, #1
 800973c:	9305      	str	r3, [sp, #20]
 800973e:	4619      	mov	r1, r3
 8009740:	f04f 0c0a 	mov.w	ip, #10
 8009744:	4620      	mov	r0, r4
 8009746:	f810 2b01 	ldrb.w	r2, [r0], #1
 800974a:	3a30      	subs	r2, #48	; 0x30
 800974c:	2a09      	cmp	r2, #9
 800974e:	d903      	bls.n	8009758 <_svfiprintf_r+0x1a8>
 8009750:	2b00      	cmp	r3, #0
 8009752:	d0c5      	beq.n	80096e0 <_svfiprintf_r+0x130>
 8009754:	9105      	str	r1, [sp, #20]
 8009756:	e7c3      	b.n	80096e0 <_svfiprintf_r+0x130>
 8009758:	fb0c 2101 	mla	r1, ip, r1, r2
 800975c:	4604      	mov	r4, r0
 800975e:	2301      	movs	r3, #1
 8009760:	e7f0      	b.n	8009744 <_svfiprintf_r+0x194>
 8009762:	ab03      	add	r3, sp, #12
 8009764:	9300      	str	r3, [sp, #0]
 8009766:	462a      	mov	r2, r5
 8009768:	4b0f      	ldr	r3, [pc, #60]	; (80097a8 <_svfiprintf_r+0x1f8>)
 800976a:	a904      	add	r1, sp, #16
 800976c:	4638      	mov	r0, r7
 800976e:	f3af 8000 	nop.w
 8009772:	1c42      	adds	r2, r0, #1
 8009774:	4606      	mov	r6, r0
 8009776:	d1d6      	bne.n	8009726 <_svfiprintf_r+0x176>
 8009778:	89ab      	ldrh	r3, [r5, #12]
 800977a:	065b      	lsls	r3, r3, #25
 800977c:	f53f af2c 	bmi.w	80095d8 <_svfiprintf_r+0x28>
 8009780:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009782:	b01d      	add	sp, #116	; 0x74
 8009784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009788:	ab03      	add	r3, sp, #12
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	462a      	mov	r2, r5
 800978e:	4b06      	ldr	r3, [pc, #24]	; (80097a8 <_svfiprintf_r+0x1f8>)
 8009790:	a904      	add	r1, sp, #16
 8009792:	4638      	mov	r0, r7
 8009794:	f000 f87a 	bl	800988c <_printf_i>
 8009798:	e7eb      	b.n	8009772 <_svfiprintf_r+0x1c2>
 800979a:	bf00      	nop
 800979c:	0800ac30 	.word	0x0800ac30
 80097a0:	0800ac3a 	.word	0x0800ac3a
 80097a4:	00000000 	.word	0x00000000
 80097a8:	080094f9 	.word	0x080094f9
 80097ac:	0800ac36 	.word	0x0800ac36

080097b0 <_printf_common>:
 80097b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097b4:	4616      	mov	r6, r2
 80097b6:	4699      	mov	r9, r3
 80097b8:	688a      	ldr	r2, [r1, #8]
 80097ba:	690b      	ldr	r3, [r1, #16]
 80097bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097c0:	4293      	cmp	r3, r2
 80097c2:	bfb8      	it	lt
 80097c4:	4613      	movlt	r3, r2
 80097c6:	6033      	str	r3, [r6, #0]
 80097c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097cc:	4607      	mov	r7, r0
 80097ce:	460c      	mov	r4, r1
 80097d0:	b10a      	cbz	r2, 80097d6 <_printf_common+0x26>
 80097d2:	3301      	adds	r3, #1
 80097d4:	6033      	str	r3, [r6, #0]
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	0699      	lsls	r1, r3, #26
 80097da:	bf42      	ittt	mi
 80097dc:	6833      	ldrmi	r3, [r6, #0]
 80097de:	3302      	addmi	r3, #2
 80097e0:	6033      	strmi	r3, [r6, #0]
 80097e2:	6825      	ldr	r5, [r4, #0]
 80097e4:	f015 0506 	ands.w	r5, r5, #6
 80097e8:	d106      	bne.n	80097f8 <_printf_common+0x48>
 80097ea:	f104 0a19 	add.w	sl, r4, #25
 80097ee:	68e3      	ldr	r3, [r4, #12]
 80097f0:	6832      	ldr	r2, [r6, #0]
 80097f2:	1a9b      	subs	r3, r3, r2
 80097f4:	42ab      	cmp	r3, r5
 80097f6:	dc26      	bgt.n	8009846 <_printf_common+0x96>
 80097f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80097fc:	1e13      	subs	r3, r2, #0
 80097fe:	6822      	ldr	r2, [r4, #0]
 8009800:	bf18      	it	ne
 8009802:	2301      	movne	r3, #1
 8009804:	0692      	lsls	r2, r2, #26
 8009806:	d42b      	bmi.n	8009860 <_printf_common+0xb0>
 8009808:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800980c:	4649      	mov	r1, r9
 800980e:	4638      	mov	r0, r7
 8009810:	47c0      	blx	r8
 8009812:	3001      	adds	r0, #1
 8009814:	d01e      	beq.n	8009854 <_printf_common+0xa4>
 8009816:	6823      	ldr	r3, [r4, #0]
 8009818:	68e5      	ldr	r5, [r4, #12]
 800981a:	6832      	ldr	r2, [r6, #0]
 800981c:	f003 0306 	and.w	r3, r3, #6
 8009820:	2b04      	cmp	r3, #4
 8009822:	bf08      	it	eq
 8009824:	1aad      	subeq	r5, r5, r2
 8009826:	68a3      	ldr	r3, [r4, #8]
 8009828:	6922      	ldr	r2, [r4, #16]
 800982a:	bf0c      	ite	eq
 800982c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009830:	2500      	movne	r5, #0
 8009832:	4293      	cmp	r3, r2
 8009834:	bfc4      	itt	gt
 8009836:	1a9b      	subgt	r3, r3, r2
 8009838:	18ed      	addgt	r5, r5, r3
 800983a:	2600      	movs	r6, #0
 800983c:	341a      	adds	r4, #26
 800983e:	42b5      	cmp	r5, r6
 8009840:	d11a      	bne.n	8009878 <_printf_common+0xc8>
 8009842:	2000      	movs	r0, #0
 8009844:	e008      	b.n	8009858 <_printf_common+0xa8>
 8009846:	2301      	movs	r3, #1
 8009848:	4652      	mov	r2, sl
 800984a:	4649      	mov	r1, r9
 800984c:	4638      	mov	r0, r7
 800984e:	47c0      	blx	r8
 8009850:	3001      	adds	r0, #1
 8009852:	d103      	bne.n	800985c <_printf_common+0xac>
 8009854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985c:	3501      	adds	r5, #1
 800985e:	e7c6      	b.n	80097ee <_printf_common+0x3e>
 8009860:	18e1      	adds	r1, r4, r3
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	2030      	movs	r0, #48	; 0x30
 8009866:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800986a:	4422      	add	r2, r4
 800986c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009870:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009874:	3302      	adds	r3, #2
 8009876:	e7c7      	b.n	8009808 <_printf_common+0x58>
 8009878:	2301      	movs	r3, #1
 800987a:	4622      	mov	r2, r4
 800987c:	4649      	mov	r1, r9
 800987e:	4638      	mov	r0, r7
 8009880:	47c0      	blx	r8
 8009882:	3001      	adds	r0, #1
 8009884:	d0e6      	beq.n	8009854 <_printf_common+0xa4>
 8009886:	3601      	adds	r6, #1
 8009888:	e7d9      	b.n	800983e <_printf_common+0x8e>
	...

0800988c <_printf_i>:
 800988c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009890:	7e0f      	ldrb	r7, [r1, #24]
 8009892:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009894:	2f78      	cmp	r7, #120	; 0x78
 8009896:	4691      	mov	r9, r2
 8009898:	4680      	mov	r8, r0
 800989a:	460c      	mov	r4, r1
 800989c:	469a      	mov	sl, r3
 800989e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80098a2:	d807      	bhi.n	80098b4 <_printf_i+0x28>
 80098a4:	2f62      	cmp	r7, #98	; 0x62
 80098a6:	d80a      	bhi.n	80098be <_printf_i+0x32>
 80098a8:	2f00      	cmp	r7, #0
 80098aa:	f000 80d8 	beq.w	8009a5e <_printf_i+0x1d2>
 80098ae:	2f58      	cmp	r7, #88	; 0x58
 80098b0:	f000 80a3 	beq.w	80099fa <_printf_i+0x16e>
 80098b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80098bc:	e03a      	b.n	8009934 <_printf_i+0xa8>
 80098be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80098c2:	2b15      	cmp	r3, #21
 80098c4:	d8f6      	bhi.n	80098b4 <_printf_i+0x28>
 80098c6:	a101      	add	r1, pc, #4	; (adr r1, 80098cc <_printf_i+0x40>)
 80098c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80098cc:	08009925 	.word	0x08009925
 80098d0:	08009939 	.word	0x08009939
 80098d4:	080098b5 	.word	0x080098b5
 80098d8:	080098b5 	.word	0x080098b5
 80098dc:	080098b5 	.word	0x080098b5
 80098e0:	080098b5 	.word	0x080098b5
 80098e4:	08009939 	.word	0x08009939
 80098e8:	080098b5 	.word	0x080098b5
 80098ec:	080098b5 	.word	0x080098b5
 80098f0:	080098b5 	.word	0x080098b5
 80098f4:	080098b5 	.word	0x080098b5
 80098f8:	08009a45 	.word	0x08009a45
 80098fc:	08009969 	.word	0x08009969
 8009900:	08009a27 	.word	0x08009a27
 8009904:	080098b5 	.word	0x080098b5
 8009908:	080098b5 	.word	0x080098b5
 800990c:	08009a67 	.word	0x08009a67
 8009910:	080098b5 	.word	0x080098b5
 8009914:	08009969 	.word	0x08009969
 8009918:	080098b5 	.word	0x080098b5
 800991c:	080098b5 	.word	0x080098b5
 8009920:	08009a2f 	.word	0x08009a2f
 8009924:	682b      	ldr	r3, [r5, #0]
 8009926:	1d1a      	adds	r2, r3, #4
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	602a      	str	r2, [r5, #0]
 800992c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009934:	2301      	movs	r3, #1
 8009936:	e0a3      	b.n	8009a80 <_printf_i+0x1f4>
 8009938:	6820      	ldr	r0, [r4, #0]
 800993a:	6829      	ldr	r1, [r5, #0]
 800993c:	0606      	lsls	r6, r0, #24
 800993e:	f101 0304 	add.w	r3, r1, #4
 8009942:	d50a      	bpl.n	800995a <_printf_i+0xce>
 8009944:	680e      	ldr	r6, [r1, #0]
 8009946:	602b      	str	r3, [r5, #0]
 8009948:	2e00      	cmp	r6, #0
 800994a:	da03      	bge.n	8009954 <_printf_i+0xc8>
 800994c:	232d      	movs	r3, #45	; 0x2d
 800994e:	4276      	negs	r6, r6
 8009950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009954:	485e      	ldr	r0, [pc, #376]	; (8009ad0 <_printf_i+0x244>)
 8009956:	230a      	movs	r3, #10
 8009958:	e019      	b.n	800998e <_printf_i+0x102>
 800995a:	680e      	ldr	r6, [r1, #0]
 800995c:	602b      	str	r3, [r5, #0]
 800995e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009962:	bf18      	it	ne
 8009964:	b236      	sxthne	r6, r6
 8009966:	e7ef      	b.n	8009948 <_printf_i+0xbc>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	6820      	ldr	r0, [r4, #0]
 800996c:	1d19      	adds	r1, r3, #4
 800996e:	6029      	str	r1, [r5, #0]
 8009970:	0601      	lsls	r1, r0, #24
 8009972:	d501      	bpl.n	8009978 <_printf_i+0xec>
 8009974:	681e      	ldr	r6, [r3, #0]
 8009976:	e002      	b.n	800997e <_printf_i+0xf2>
 8009978:	0646      	lsls	r6, r0, #25
 800997a:	d5fb      	bpl.n	8009974 <_printf_i+0xe8>
 800997c:	881e      	ldrh	r6, [r3, #0]
 800997e:	4854      	ldr	r0, [pc, #336]	; (8009ad0 <_printf_i+0x244>)
 8009980:	2f6f      	cmp	r7, #111	; 0x6f
 8009982:	bf0c      	ite	eq
 8009984:	2308      	moveq	r3, #8
 8009986:	230a      	movne	r3, #10
 8009988:	2100      	movs	r1, #0
 800998a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800998e:	6865      	ldr	r5, [r4, #4]
 8009990:	60a5      	str	r5, [r4, #8]
 8009992:	2d00      	cmp	r5, #0
 8009994:	bfa2      	ittt	ge
 8009996:	6821      	ldrge	r1, [r4, #0]
 8009998:	f021 0104 	bicge.w	r1, r1, #4
 800999c:	6021      	strge	r1, [r4, #0]
 800999e:	b90e      	cbnz	r6, 80099a4 <_printf_i+0x118>
 80099a0:	2d00      	cmp	r5, #0
 80099a2:	d04d      	beq.n	8009a40 <_printf_i+0x1b4>
 80099a4:	4615      	mov	r5, r2
 80099a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80099aa:	fb03 6711 	mls	r7, r3, r1, r6
 80099ae:	5dc7      	ldrb	r7, [r0, r7]
 80099b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80099b4:	4637      	mov	r7, r6
 80099b6:	42bb      	cmp	r3, r7
 80099b8:	460e      	mov	r6, r1
 80099ba:	d9f4      	bls.n	80099a6 <_printf_i+0x11a>
 80099bc:	2b08      	cmp	r3, #8
 80099be:	d10b      	bne.n	80099d8 <_printf_i+0x14c>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	07de      	lsls	r6, r3, #31
 80099c4:	d508      	bpl.n	80099d8 <_printf_i+0x14c>
 80099c6:	6923      	ldr	r3, [r4, #16]
 80099c8:	6861      	ldr	r1, [r4, #4]
 80099ca:	4299      	cmp	r1, r3
 80099cc:	bfde      	ittt	le
 80099ce:	2330      	movle	r3, #48	; 0x30
 80099d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80099d8:	1b52      	subs	r2, r2, r5
 80099da:	6122      	str	r2, [r4, #16]
 80099dc:	f8cd a000 	str.w	sl, [sp]
 80099e0:	464b      	mov	r3, r9
 80099e2:	aa03      	add	r2, sp, #12
 80099e4:	4621      	mov	r1, r4
 80099e6:	4640      	mov	r0, r8
 80099e8:	f7ff fee2 	bl	80097b0 <_printf_common>
 80099ec:	3001      	adds	r0, #1
 80099ee:	d14c      	bne.n	8009a8a <_printf_i+0x1fe>
 80099f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099f4:	b004      	add	sp, #16
 80099f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099fa:	4835      	ldr	r0, [pc, #212]	; (8009ad0 <_printf_i+0x244>)
 80099fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a00:	6829      	ldr	r1, [r5, #0]
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a08:	6029      	str	r1, [r5, #0]
 8009a0a:	061d      	lsls	r5, r3, #24
 8009a0c:	d514      	bpl.n	8009a38 <_printf_i+0x1ac>
 8009a0e:	07df      	lsls	r7, r3, #31
 8009a10:	bf44      	itt	mi
 8009a12:	f043 0320 	orrmi.w	r3, r3, #32
 8009a16:	6023      	strmi	r3, [r4, #0]
 8009a18:	b91e      	cbnz	r6, 8009a22 <_printf_i+0x196>
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	f023 0320 	bic.w	r3, r3, #32
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	2310      	movs	r3, #16
 8009a24:	e7b0      	b.n	8009988 <_printf_i+0xfc>
 8009a26:	6823      	ldr	r3, [r4, #0]
 8009a28:	f043 0320 	orr.w	r3, r3, #32
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	2378      	movs	r3, #120	; 0x78
 8009a30:	4828      	ldr	r0, [pc, #160]	; (8009ad4 <_printf_i+0x248>)
 8009a32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a36:	e7e3      	b.n	8009a00 <_printf_i+0x174>
 8009a38:	0659      	lsls	r1, r3, #25
 8009a3a:	bf48      	it	mi
 8009a3c:	b2b6      	uxthmi	r6, r6
 8009a3e:	e7e6      	b.n	8009a0e <_printf_i+0x182>
 8009a40:	4615      	mov	r5, r2
 8009a42:	e7bb      	b.n	80099bc <_printf_i+0x130>
 8009a44:	682b      	ldr	r3, [r5, #0]
 8009a46:	6826      	ldr	r6, [r4, #0]
 8009a48:	6961      	ldr	r1, [r4, #20]
 8009a4a:	1d18      	adds	r0, r3, #4
 8009a4c:	6028      	str	r0, [r5, #0]
 8009a4e:	0635      	lsls	r5, r6, #24
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	d501      	bpl.n	8009a58 <_printf_i+0x1cc>
 8009a54:	6019      	str	r1, [r3, #0]
 8009a56:	e002      	b.n	8009a5e <_printf_i+0x1d2>
 8009a58:	0670      	lsls	r0, r6, #25
 8009a5a:	d5fb      	bpl.n	8009a54 <_printf_i+0x1c8>
 8009a5c:	8019      	strh	r1, [r3, #0]
 8009a5e:	2300      	movs	r3, #0
 8009a60:	6123      	str	r3, [r4, #16]
 8009a62:	4615      	mov	r5, r2
 8009a64:	e7ba      	b.n	80099dc <_printf_i+0x150>
 8009a66:	682b      	ldr	r3, [r5, #0]
 8009a68:	1d1a      	adds	r2, r3, #4
 8009a6a:	602a      	str	r2, [r5, #0]
 8009a6c:	681d      	ldr	r5, [r3, #0]
 8009a6e:	6862      	ldr	r2, [r4, #4]
 8009a70:	2100      	movs	r1, #0
 8009a72:	4628      	mov	r0, r5
 8009a74:	f7f6 fbbc 	bl	80001f0 <memchr>
 8009a78:	b108      	cbz	r0, 8009a7e <_printf_i+0x1f2>
 8009a7a:	1b40      	subs	r0, r0, r5
 8009a7c:	6060      	str	r0, [r4, #4]
 8009a7e:	6863      	ldr	r3, [r4, #4]
 8009a80:	6123      	str	r3, [r4, #16]
 8009a82:	2300      	movs	r3, #0
 8009a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a88:	e7a8      	b.n	80099dc <_printf_i+0x150>
 8009a8a:	6923      	ldr	r3, [r4, #16]
 8009a8c:	462a      	mov	r2, r5
 8009a8e:	4649      	mov	r1, r9
 8009a90:	4640      	mov	r0, r8
 8009a92:	47d0      	blx	sl
 8009a94:	3001      	adds	r0, #1
 8009a96:	d0ab      	beq.n	80099f0 <_printf_i+0x164>
 8009a98:	6823      	ldr	r3, [r4, #0]
 8009a9a:	079b      	lsls	r3, r3, #30
 8009a9c:	d413      	bmi.n	8009ac6 <_printf_i+0x23a>
 8009a9e:	68e0      	ldr	r0, [r4, #12]
 8009aa0:	9b03      	ldr	r3, [sp, #12]
 8009aa2:	4298      	cmp	r0, r3
 8009aa4:	bfb8      	it	lt
 8009aa6:	4618      	movlt	r0, r3
 8009aa8:	e7a4      	b.n	80099f4 <_printf_i+0x168>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	4632      	mov	r2, r6
 8009aae:	4649      	mov	r1, r9
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	47d0      	blx	sl
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	d09b      	beq.n	80099f0 <_printf_i+0x164>
 8009ab8:	3501      	adds	r5, #1
 8009aba:	68e3      	ldr	r3, [r4, #12]
 8009abc:	9903      	ldr	r1, [sp, #12]
 8009abe:	1a5b      	subs	r3, r3, r1
 8009ac0:	42ab      	cmp	r3, r5
 8009ac2:	dcf2      	bgt.n	8009aaa <_printf_i+0x21e>
 8009ac4:	e7eb      	b.n	8009a9e <_printf_i+0x212>
 8009ac6:	2500      	movs	r5, #0
 8009ac8:	f104 0619 	add.w	r6, r4, #25
 8009acc:	e7f5      	b.n	8009aba <_printf_i+0x22e>
 8009ace:	bf00      	nop
 8009ad0:	0800ac41 	.word	0x0800ac41
 8009ad4:	0800ac52 	.word	0x0800ac52

08009ad8 <__retarget_lock_acquire_recursive>:
 8009ad8:	4770      	bx	lr

08009ada <__retarget_lock_release_recursive>:
 8009ada:	4770      	bx	lr

08009adc <memcpy>:
 8009adc:	440a      	add	r2, r1
 8009ade:	4291      	cmp	r1, r2
 8009ae0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009ae4:	d100      	bne.n	8009ae8 <memcpy+0xc>
 8009ae6:	4770      	bx	lr
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009af2:	4291      	cmp	r1, r2
 8009af4:	d1f9      	bne.n	8009aea <memcpy+0xe>
 8009af6:	bd10      	pop	{r4, pc}

08009af8 <memmove>:
 8009af8:	4288      	cmp	r0, r1
 8009afa:	b510      	push	{r4, lr}
 8009afc:	eb01 0402 	add.w	r4, r1, r2
 8009b00:	d902      	bls.n	8009b08 <memmove+0x10>
 8009b02:	4284      	cmp	r4, r0
 8009b04:	4623      	mov	r3, r4
 8009b06:	d807      	bhi.n	8009b18 <memmove+0x20>
 8009b08:	1e43      	subs	r3, r0, #1
 8009b0a:	42a1      	cmp	r1, r4
 8009b0c:	d008      	beq.n	8009b20 <memmove+0x28>
 8009b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b16:	e7f8      	b.n	8009b0a <memmove+0x12>
 8009b18:	4402      	add	r2, r0
 8009b1a:	4601      	mov	r1, r0
 8009b1c:	428a      	cmp	r2, r1
 8009b1e:	d100      	bne.n	8009b22 <memmove+0x2a>
 8009b20:	bd10      	pop	{r4, pc}
 8009b22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b2a:	e7f7      	b.n	8009b1c <memmove+0x24>

08009b2c <_free_r>:
 8009b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b2e:	2900      	cmp	r1, #0
 8009b30:	d044      	beq.n	8009bbc <_free_r+0x90>
 8009b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b36:	9001      	str	r0, [sp, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b3e:	bfb8      	it	lt
 8009b40:	18e4      	addlt	r4, r4, r3
 8009b42:	f7ff fccd 	bl	80094e0 <__malloc_lock>
 8009b46:	4a1e      	ldr	r2, [pc, #120]	; (8009bc0 <_free_r+0x94>)
 8009b48:	9801      	ldr	r0, [sp, #4]
 8009b4a:	6813      	ldr	r3, [r2, #0]
 8009b4c:	b933      	cbnz	r3, 8009b5c <_free_r+0x30>
 8009b4e:	6063      	str	r3, [r4, #4]
 8009b50:	6014      	str	r4, [r2, #0]
 8009b52:	b003      	add	sp, #12
 8009b54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b58:	f7ff bcc8 	b.w	80094ec <__malloc_unlock>
 8009b5c:	42a3      	cmp	r3, r4
 8009b5e:	d908      	bls.n	8009b72 <_free_r+0x46>
 8009b60:	6825      	ldr	r5, [r4, #0]
 8009b62:	1961      	adds	r1, r4, r5
 8009b64:	428b      	cmp	r3, r1
 8009b66:	bf01      	itttt	eq
 8009b68:	6819      	ldreq	r1, [r3, #0]
 8009b6a:	685b      	ldreq	r3, [r3, #4]
 8009b6c:	1949      	addeq	r1, r1, r5
 8009b6e:	6021      	streq	r1, [r4, #0]
 8009b70:	e7ed      	b.n	8009b4e <_free_r+0x22>
 8009b72:	461a      	mov	r2, r3
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	b10b      	cbz	r3, 8009b7c <_free_r+0x50>
 8009b78:	42a3      	cmp	r3, r4
 8009b7a:	d9fa      	bls.n	8009b72 <_free_r+0x46>
 8009b7c:	6811      	ldr	r1, [r2, #0]
 8009b7e:	1855      	adds	r5, r2, r1
 8009b80:	42a5      	cmp	r5, r4
 8009b82:	d10b      	bne.n	8009b9c <_free_r+0x70>
 8009b84:	6824      	ldr	r4, [r4, #0]
 8009b86:	4421      	add	r1, r4
 8009b88:	1854      	adds	r4, r2, r1
 8009b8a:	42a3      	cmp	r3, r4
 8009b8c:	6011      	str	r1, [r2, #0]
 8009b8e:	d1e0      	bne.n	8009b52 <_free_r+0x26>
 8009b90:	681c      	ldr	r4, [r3, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	6053      	str	r3, [r2, #4]
 8009b96:	4421      	add	r1, r4
 8009b98:	6011      	str	r1, [r2, #0]
 8009b9a:	e7da      	b.n	8009b52 <_free_r+0x26>
 8009b9c:	d902      	bls.n	8009ba4 <_free_r+0x78>
 8009b9e:	230c      	movs	r3, #12
 8009ba0:	6003      	str	r3, [r0, #0]
 8009ba2:	e7d6      	b.n	8009b52 <_free_r+0x26>
 8009ba4:	6825      	ldr	r5, [r4, #0]
 8009ba6:	1961      	adds	r1, r4, r5
 8009ba8:	428b      	cmp	r3, r1
 8009baa:	bf04      	itt	eq
 8009bac:	6819      	ldreq	r1, [r3, #0]
 8009bae:	685b      	ldreq	r3, [r3, #4]
 8009bb0:	6063      	str	r3, [r4, #4]
 8009bb2:	bf04      	itt	eq
 8009bb4:	1949      	addeq	r1, r1, r5
 8009bb6:	6021      	streq	r1, [r4, #0]
 8009bb8:	6054      	str	r4, [r2, #4]
 8009bba:	e7ca      	b.n	8009b52 <_free_r+0x26>
 8009bbc:	b003      	add	sp, #12
 8009bbe:	bd30      	pop	{r4, r5, pc}
 8009bc0:	20000344 	.word	0x20000344

08009bc4 <_realloc_r>:
 8009bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc8:	4680      	mov	r8, r0
 8009bca:	4614      	mov	r4, r2
 8009bcc:	460e      	mov	r6, r1
 8009bce:	b921      	cbnz	r1, 8009bda <_realloc_r+0x16>
 8009bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd4:	4611      	mov	r1, r2
 8009bd6:	f7ff bb8f 	b.w	80092f8 <_malloc_r>
 8009bda:	b92a      	cbnz	r2, 8009be8 <_realloc_r+0x24>
 8009bdc:	f7ff ffa6 	bl	8009b2c <_free_r>
 8009be0:	4625      	mov	r5, r4
 8009be2:	4628      	mov	r0, r5
 8009be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be8:	f000 f81b 	bl	8009c22 <_malloc_usable_size_r>
 8009bec:	4284      	cmp	r4, r0
 8009bee:	4607      	mov	r7, r0
 8009bf0:	d802      	bhi.n	8009bf8 <_realloc_r+0x34>
 8009bf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bf6:	d812      	bhi.n	8009c1e <_realloc_r+0x5a>
 8009bf8:	4621      	mov	r1, r4
 8009bfa:	4640      	mov	r0, r8
 8009bfc:	f7ff fb7c 	bl	80092f8 <_malloc_r>
 8009c00:	4605      	mov	r5, r0
 8009c02:	2800      	cmp	r0, #0
 8009c04:	d0ed      	beq.n	8009be2 <_realloc_r+0x1e>
 8009c06:	42bc      	cmp	r4, r7
 8009c08:	4622      	mov	r2, r4
 8009c0a:	4631      	mov	r1, r6
 8009c0c:	bf28      	it	cs
 8009c0e:	463a      	movcs	r2, r7
 8009c10:	f7ff ff64 	bl	8009adc <memcpy>
 8009c14:	4631      	mov	r1, r6
 8009c16:	4640      	mov	r0, r8
 8009c18:	f7ff ff88 	bl	8009b2c <_free_r>
 8009c1c:	e7e1      	b.n	8009be2 <_realloc_r+0x1e>
 8009c1e:	4635      	mov	r5, r6
 8009c20:	e7df      	b.n	8009be2 <_realloc_r+0x1e>

08009c22 <_malloc_usable_size_r>:
 8009c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c26:	1f18      	subs	r0, r3, #4
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	bfbc      	itt	lt
 8009c2c:	580b      	ldrlt	r3, [r1, r0]
 8009c2e:	18c0      	addlt	r0, r0, r3
 8009c30:	4770      	bx	lr

08009c32 <fmin>:
 8009c32:	b508      	push	{r3, lr}
 8009c34:	ed2d 8b04 	vpush	{d8-d9}
 8009c38:	eeb0 8a40 	vmov.f32	s16, s0
 8009c3c:	eef0 8a60 	vmov.f32	s17, s1
 8009c40:	eeb0 9a41 	vmov.f32	s18, s2
 8009c44:	eef0 9a61 	vmov.f32	s19, s3
 8009c48:	f000 f81a 	bl	8009c80 <__fpclassifyd>
 8009c4c:	b168      	cbz	r0, 8009c6a <fmin+0x38>
 8009c4e:	eeb0 0a49 	vmov.f32	s0, s18
 8009c52:	eef0 0a69 	vmov.f32	s1, s19
 8009c56:	f000 f813 	bl	8009c80 <__fpclassifyd>
 8009c5a:	b150      	cbz	r0, 8009c72 <fmin+0x40>
 8009c5c:	ec53 2b19 	vmov	r2, r3, d9
 8009c60:	ec51 0b18 	vmov	r0, r1, d8
 8009c64:	f7f6 ff42 	bl	8000aec <__aeabi_dcmplt>
 8009c68:	b918      	cbnz	r0, 8009c72 <fmin+0x40>
 8009c6a:	eeb0 8a49 	vmov.f32	s16, s18
 8009c6e:	eef0 8a69 	vmov.f32	s17, s19
 8009c72:	eeb0 0a48 	vmov.f32	s0, s16
 8009c76:	eef0 0a68 	vmov.f32	s1, s17
 8009c7a:	ecbd 8b04 	vpop	{d8-d9}
 8009c7e:	bd08      	pop	{r3, pc}

08009c80 <__fpclassifyd>:
 8009c80:	ec51 0b10 	vmov	r0, r1, d0
 8009c84:	b510      	push	{r4, lr}
 8009c86:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	d019      	beq.n	8009cc2 <__fpclassifyd+0x42>
 8009c8e:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8009c92:	490e      	ldr	r1, [pc, #56]	; (8009ccc <__fpclassifyd+0x4c>)
 8009c94:	428a      	cmp	r2, r1
 8009c96:	d90e      	bls.n	8009cb6 <__fpclassifyd+0x36>
 8009c98:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8009c9c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8009ca0:	428a      	cmp	r2, r1
 8009ca2:	d908      	bls.n	8009cb6 <__fpclassifyd+0x36>
 8009ca4:	4a0a      	ldr	r2, [pc, #40]	; (8009cd0 <__fpclassifyd+0x50>)
 8009ca6:	4213      	tst	r3, r2
 8009ca8:	d007      	beq.n	8009cba <__fpclassifyd+0x3a>
 8009caa:	4294      	cmp	r4, r2
 8009cac:	d107      	bne.n	8009cbe <__fpclassifyd+0x3e>
 8009cae:	fab0 f080 	clz	r0, r0
 8009cb2:	0940      	lsrs	r0, r0, #5
 8009cb4:	bd10      	pop	{r4, pc}
 8009cb6:	2004      	movs	r0, #4
 8009cb8:	e7fc      	b.n	8009cb4 <__fpclassifyd+0x34>
 8009cba:	2003      	movs	r0, #3
 8009cbc:	e7fa      	b.n	8009cb4 <__fpclassifyd+0x34>
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	e7f8      	b.n	8009cb4 <__fpclassifyd+0x34>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d1ee      	bne.n	8009ca4 <__fpclassifyd+0x24>
 8009cc6:	2002      	movs	r0, #2
 8009cc8:	e7f4      	b.n	8009cb4 <__fpclassifyd+0x34>
 8009cca:	bf00      	nop
 8009ccc:	7fdfffff 	.word	0x7fdfffff
 8009cd0:	7ff00000 	.word	0x7ff00000

08009cd4 <pow>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	ed2d 8b02 	vpush	{d8}
 8009cda:	eeb0 8a40 	vmov.f32	s16, s0
 8009cde:	eef0 8a60 	vmov.f32	s17, s1
 8009ce2:	ec55 4b11 	vmov	r4, r5, d1
 8009ce6:	f000 f867 	bl	8009db8 <__ieee754_pow>
 8009cea:	4622      	mov	r2, r4
 8009cec:	462b      	mov	r3, r5
 8009cee:	4620      	mov	r0, r4
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	ec57 6b10 	vmov	r6, r7, d0
 8009cf6:	f7f6 ff21 	bl	8000b3c <__aeabi_dcmpun>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d13b      	bne.n	8009d76 <pow+0xa2>
 8009cfe:	ec51 0b18 	vmov	r0, r1, d8
 8009d02:	2200      	movs	r2, #0
 8009d04:	2300      	movs	r3, #0
 8009d06:	f7f6 fee7 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d0a:	b1b8      	cbz	r0, 8009d3c <pow+0x68>
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2300      	movs	r3, #0
 8009d10:	4620      	mov	r0, r4
 8009d12:	4629      	mov	r1, r5
 8009d14:	f7f6 fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d146      	bne.n	8009daa <pow+0xd6>
 8009d1c:	ec45 4b10 	vmov	d0, r4, r5
 8009d20:	f000 fe63 	bl	800a9ea <finite>
 8009d24:	b338      	cbz	r0, 8009d76 <pow+0xa2>
 8009d26:	2200      	movs	r2, #0
 8009d28:	2300      	movs	r3, #0
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	4629      	mov	r1, r5
 8009d2e:	f7f6 fedd 	bl	8000aec <__aeabi_dcmplt>
 8009d32:	b300      	cbz	r0, 8009d76 <pow+0xa2>
 8009d34:	f7ff fa78 	bl	8009228 <__errno>
 8009d38:	2322      	movs	r3, #34	; 0x22
 8009d3a:	e01b      	b.n	8009d74 <pow+0xa0>
 8009d3c:	ec47 6b10 	vmov	d0, r6, r7
 8009d40:	f000 fe53 	bl	800a9ea <finite>
 8009d44:	b9e0      	cbnz	r0, 8009d80 <pow+0xac>
 8009d46:	eeb0 0a48 	vmov.f32	s0, s16
 8009d4a:	eef0 0a68 	vmov.f32	s1, s17
 8009d4e:	f000 fe4c 	bl	800a9ea <finite>
 8009d52:	b1a8      	cbz	r0, 8009d80 <pow+0xac>
 8009d54:	ec45 4b10 	vmov	d0, r4, r5
 8009d58:	f000 fe47 	bl	800a9ea <finite>
 8009d5c:	b180      	cbz	r0, 8009d80 <pow+0xac>
 8009d5e:	4632      	mov	r2, r6
 8009d60:	463b      	mov	r3, r7
 8009d62:	4630      	mov	r0, r6
 8009d64:	4639      	mov	r1, r7
 8009d66:	f7f6 fee9 	bl	8000b3c <__aeabi_dcmpun>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d0e2      	beq.n	8009d34 <pow+0x60>
 8009d6e:	f7ff fa5b 	bl	8009228 <__errno>
 8009d72:	2321      	movs	r3, #33	; 0x21
 8009d74:	6003      	str	r3, [r0, #0]
 8009d76:	ecbd 8b02 	vpop	{d8}
 8009d7a:	ec47 6b10 	vmov	d0, r6, r7
 8009d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d80:	2200      	movs	r2, #0
 8009d82:	2300      	movs	r3, #0
 8009d84:	4630      	mov	r0, r6
 8009d86:	4639      	mov	r1, r7
 8009d88:	f7f6 fea6 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	d0f2      	beq.n	8009d76 <pow+0xa2>
 8009d90:	eeb0 0a48 	vmov.f32	s0, s16
 8009d94:	eef0 0a68 	vmov.f32	s1, s17
 8009d98:	f000 fe27 	bl	800a9ea <finite>
 8009d9c:	2800      	cmp	r0, #0
 8009d9e:	d0ea      	beq.n	8009d76 <pow+0xa2>
 8009da0:	ec45 4b10 	vmov	d0, r4, r5
 8009da4:	f000 fe21 	bl	800a9ea <finite>
 8009da8:	e7c3      	b.n	8009d32 <pow+0x5e>
 8009daa:	4f01      	ldr	r7, [pc, #4]	; (8009db0 <pow+0xdc>)
 8009dac:	2600      	movs	r6, #0
 8009dae:	e7e2      	b.n	8009d76 <pow+0xa2>
 8009db0:	3ff00000 	.word	0x3ff00000
 8009db4:	00000000 	.word	0x00000000

08009db8 <__ieee754_pow>:
 8009db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dbc:	ed2d 8b06 	vpush	{d8-d10}
 8009dc0:	b089      	sub	sp, #36	; 0x24
 8009dc2:	ed8d 1b00 	vstr	d1, [sp]
 8009dc6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009dca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009dce:	ea58 0102 	orrs.w	r1, r8, r2
 8009dd2:	ec57 6b10 	vmov	r6, r7, d0
 8009dd6:	d115      	bne.n	8009e04 <__ieee754_pow+0x4c>
 8009dd8:	19b3      	adds	r3, r6, r6
 8009dda:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009dde:	4152      	adcs	r2, r2
 8009de0:	4299      	cmp	r1, r3
 8009de2:	4b89      	ldr	r3, [pc, #548]	; (800a008 <__ieee754_pow+0x250>)
 8009de4:	4193      	sbcs	r3, r2
 8009de6:	f080 84d2 	bcs.w	800a78e <__ieee754_pow+0x9d6>
 8009dea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009dee:	4630      	mov	r0, r6
 8009df0:	4639      	mov	r1, r7
 8009df2:	f7f6 fa53 	bl	800029c <__adddf3>
 8009df6:	ec41 0b10 	vmov	d0, r0, r1
 8009dfa:	b009      	add	sp, #36	; 0x24
 8009dfc:	ecbd 8b06 	vpop	{d8-d10}
 8009e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e04:	4b81      	ldr	r3, [pc, #516]	; (800a00c <__ieee754_pow+0x254>)
 8009e06:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009e0a:	429c      	cmp	r4, r3
 8009e0c:	ee10 aa10 	vmov	sl, s0
 8009e10:	463d      	mov	r5, r7
 8009e12:	dc06      	bgt.n	8009e22 <__ieee754_pow+0x6a>
 8009e14:	d101      	bne.n	8009e1a <__ieee754_pow+0x62>
 8009e16:	2e00      	cmp	r6, #0
 8009e18:	d1e7      	bne.n	8009dea <__ieee754_pow+0x32>
 8009e1a:	4598      	cmp	r8, r3
 8009e1c:	dc01      	bgt.n	8009e22 <__ieee754_pow+0x6a>
 8009e1e:	d10f      	bne.n	8009e40 <__ieee754_pow+0x88>
 8009e20:	b172      	cbz	r2, 8009e40 <__ieee754_pow+0x88>
 8009e22:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009e26:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009e2a:	ea55 050a 	orrs.w	r5, r5, sl
 8009e2e:	d1dc      	bne.n	8009dea <__ieee754_pow+0x32>
 8009e30:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e34:	18db      	adds	r3, r3, r3
 8009e36:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009e3a:	4152      	adcs	r2, r2
 8009e3c:	429d      	cmp	r5, r3
 8009e3e:	e7d0      	b.n	8009de2 <__ieee754_pow+0x2a>
 8009e40:	2d00      	cmp	r5, #0
 8009e42:	da3b      	bge.n	8009ebc <__ieee754_pow+0x104>
 8009e44:	4b72      	ldr	r3, [pc, #456]	; (800a010 <__ieee754_pow+0x258>)
 8009e46:	4598      	cmp	r8, r3
 8009e48:	dc51      	bgt.n	8009eee <__ieee754_pow+0x136>
 8009e4a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009e4e:	4598      	cmp	r8, r3
 8009e50:	f340 84ac 	ble.w	800a7ac <__ieee754_pow+0x9f4>
 8009e54:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009e58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009e5c:	2b14      	cmp	r3, #20
 8009e5e:	dd0f      	ble.n	8009e80 <__ieee754_pow+0xc8>
 8009e60:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009e64:	fa22 f103 	lsr.w	r1, r2, r3
 8009e68:	fa01 f303 	lsl.w	r3, r1, r3
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	f040 849d 	bne.w	800a7ac <__ieee754_pow+0x9f4>
 8009e72:	f001 0101 	and.w	r1, r1, #1
 8009e76:	f1c1 0302 	rsb	r3, r1, #2
 8009e7a:	9304      	str	r3, [sp, #16]
 8009e7c:	b182      	cbz	r2, 8009ea0 <__ieee754_pow+0xe8>
 8009e7e:	e05f      	b.n	8009f40 <__ieee754_pow+0x188>
 8009e80:	2a00      	cmp	r2, #0
 8009e82:	d15b      	bne.n	8009f3c <__ieee754_pow+0x184>
 8009e84:	f1c3 0314 	rsb	r3, r3, #20
 8009e88:	fa48 f103 	asr.w	r1, r8, r3
 8009e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e90:	4543      	cmp	r3, r8
 8009e92:	f040 8488 	bne.w	800a7a6 <__ieee754_pow+0x9ee>
 8009e96:	f001 0101 	and.w	r1, r1, #1
 8009e9a:	f1c1 0302 	rsb	r3, r1, #2
 8009e9e:	9304      	str	r3, [sp, #16]
 8009ea0:	4b5c      	ldr	r3, [pc, #368]	; (800a014 <__ieee754_pow+0x25c>)
 8009ea2:	4598      	cmp	r8, r3
 8009ea4:	d132      	bne.n	8009f0c <__ieee754_pow+0x154>
 8009ea6:	f1b9 0f00 	cmp.w	r9, #0
 8009eaa:	f280 8478 	bge.w	800a79e <__ieee754_pow+0x9e6>
 8009eae:	4959      	ldr	r1, [pc, #356]	; (800a014 <__ieee754_pow+0x25c>)
 8009eb0:	4632      	mov	r2, r6
 8009eb2:	463b      	mov	r3, r7
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	f7f6 fcd1 	bl	800085c <__aeabi_ddiv>
 8009eba:	e79c      	b.n	8009df6 <__ieee754_pow+0x3e>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	9304      	str	r3, [sp, #16]
 8009ec0:	2a00      	cmp	r2, #0
 8009ec2:	d13d      	bne.n	8009f40 <__ieee754_pow+0x188>
 8009ec4:	4b51      	ldr	r3, [pc, #324]	; (800a00c <__ieee754_pow+0x254>)
 8009ec6:	4598      	cmp	r8, r3
 8009ec8:	d1ea      	bne.n	8009ea0 <__ieee754_pow+0xe8>
 8009eca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009ece:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009ed2:	ea53 030a 	orrs.w	r3, r3, sl
 8009ed6:	f000 845a 	beq.w	800a78e <__ieee754_pow+0x9d6>
 8009eda:	4b4f      	ldr	r3, [pc, #316]	; (800a018 <__ieee754_pow+0x260>)
 8009edc:	429c      	cmp	r4, r3
 8009ede:	dd08      	ble.n	8009ef2 <__ieee754_pow+0x13a>
 8009ee0:	f1b9 0f00 	cmp.w	r9, #0
 8009ee4:	f2c0 8457 	blt.w	800a796 <__ieee754_pow+0x9de>
 8009ee8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009eec:	e783      	b.n	8009df6 <__ieee754_pow+0x3e>
 8009eee:	2302      	movs	r3, #2
 8009ef0:	e7e5      	b.n	8009ebe <__ieee754_pow+0x106>
 8009ef2:	f1b9 0f00 	cmp.w	r9, #0
 8009ef6:	f04f 0000 	mov.w	r0, #0
 8009efa:	f04f 0100 	mov.w	r1, #0
 8009efe:	f6bf af7a 	bge.w	8009df6 <__ieee754_pow+0x3e>
 8009f02:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009f06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009f0a:	e774      	b.n	8009df6 <__ieee754_pow+0x3e>
 8009f0c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009f10:	d106      	bne.n	8009f20 <__ieee754_pow+0x168>
 8009f12:	4632      	mov	r2, r6
 8009f14:	463b      	mov	r3, r7
 8009f16:	4630      	mov	r0, r6
 8009f18:	4639      	mov	r1, r7
 8009f1a:	f7f6 fb75 	bl	8000608 <__aeabi_dmul>
 8009f1e:	e76a      	b.n	8009df6 <__ieee754_pow+0x3e>
 8009f20:	4b3e      	ldr	r3, [pc, #248]	; (800a01c <__ieee754_pow+0x264>)
 8009f22:	4599      	cmp	r9, r3
 8009f24:	d10c      	bne.n	8009f40 <__ieee754_pow+0x188>
 8009f26:	2d00      	cmp	r5, #0
 8009f28:	db0a      	blt.n	8009f40 <__ieee754_pow+0x188>
 8009f2a:	ec47 6b10 	vmov	d0, r6, r7
 8009f2e:	b009      	add	sp, #36	; 0x24
 8009f30:	ecbd 8b06 	vpop	{d8-d10}
 8009f34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f38:	f000 bc6c 	b.w	800a814 <__ieee754_sqrt>
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	9304      	str	r3, [sp, #16]
 8009f40:	ec47 6b10 	vmov	d0, r6, r7
 8009f44:	f000 fd48 	bl	800a9d8 <fabs>
 8009f48:	ec51 0b10 	vmov	r0, r1, d0
 8009f4c:	f1ba 0f00 	cmp.w	sl, #0
 8009f50:	d129      	bne.n	8009fa6 <__ieee754_pow+0x1ee>
 8009f52:	b124      	cbz	r4, 8009f5e <__ieee754_pow+0x1a6>
 8009f54:	4b2f      	ldr	r3, [pc, #188]	; (800a014 <__ieee754_pow+0x25c>)
 8009f56:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d123      	bne.n	8009fa6 <__ieee754_pow+0x1ee>
 8009f5e:	f1b9 0f00 	cmp.w	r9, #0
 8009f62:	da05      	bge.n	8009f70 <__ieee754_pow+0x1b8>
 8009f64:	4602      	mov	r2, r0
 8009f66:	460b      	mov	r3, r1
 8009f68:	2000      	movs	r0, #0
 8009f6a:	492a      	ldr	r1, [pc, #168]	; (800a014 <__ieee754_pow+0x25c>)
 8009f6c:	f7f6 fc76 	bl	800085c <__aeabi_ddiv>
 8009f70:	2d00      	cmp	r5, #0
 8009f72:	f6bf af40 	bge.w	8009df6 <__ieee754_pow+0x3e>
 8009f76:	9b04      	ldr	r3, [sp, #16]
 8009f78:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009f7c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009f80:	4323      	orrs	r3, r4
 8009f82:	d108      	bne.n	8009f96 <__ieee754_pow+0x1de>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	f7f6 f984 	bl	8000298 <__aeabi_dsub>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	e78f      	b.n	8009eb6 <__ieee754_pow+0xfe>
 8009f96:	9b04      	ldr	r3, [sp, #16]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	f47f af2c 	bne.w	8009df6 <__ieee754_pow+0x3e>
 8009f9e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	e727      	b.n	8009df6 <__ieee754_pow+0x3e>
 8009fa6:	0feb      	lsrs	r3, r5, #31
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	9306      	str	r3, [sp, #24]
 8009fac:	9a06      	ldr	r2, [sp, #24]
 8009fae:	9b04      	ldr	r3, [sp, #16]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	d102      	bne.n	8009fba <__ieee754_pow+0x202>
 8009fb4:	4632      	mov	r2, r6
 8009fb6:	463b      	mov	r3, r7
 8009fb8:	e7e6      	b.n	8009f88 <__ieee754_pow+0x1d0>
 8009fba:	4b19      	ldr	r3, [pc, #100]	; (800a020 <__ieee754_pow+0x268>)
 8009fbc:	4598      	cmp	r8, r3
 8009fbe:	f340 80fb 	ble.w	800a1b8 <__ieee754_pow+0x400>
 8009fc2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009fc6:	4598      	cmp	r8, r3
 8009fc8:	4b13      	ldr	r3, [pc, #76]	; (800a018 <__ieee754_pow+0x260>)
 8009fca:	dd0c      	ble.n	8009fe6 <__ieee754_pow+0x22e>
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	dc0f      	bgt.n	8009ff0 <__ieee754_pow+0x238>
 8009fd0:	f1b9 0f00 	cmp.w	r9, #0
 8009fd4:	da0f      	bge.n	8009ff6 <__ieee754_pow+0x23e>
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	b009      	add	sp, #36	; 0x24
 8009fda:	ecbd 8b06 	vpop	{d8-d10}
 8009fde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe2:	f000 bcf0 	b.w	800a9c6 <__math_oflow>
 8009fe6:	429c      	cmp	r4, r3
 8009fe8:	dbf2      	blt.n	8009fd0 <__ieee754_pow+0x218>
 8009fea:	4b0a      	ldr	r3, [pc, #40]	; (800a014 <__ieee754_pow+0x25c>)
 8009fec:	429c      	cmp	r4, r3
 8009fee:	dd19      	ble.n	800a024 <__ieee754_pow+0x26c>
 8009ff0:	f1b9 0f00 	cmp.w	r9, #0
 8009ff4:	dcef      	bgt.n	8009fd6 <__ieee754_pow+0x21e>
 8009ff6:	2000      	movs	r0, #0
 8009ff8:	b009      	add	sp, #36	; 0x24
 8009ffa:	ecbd 8b06 	vpop	{d8-d10}
 8009ffe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a002:	f000 bcd7 	b.w	800a9b4 <__math_uflow>
 800a006:	bf00      	nop
 800a008:	fff00000 	.word	0xfff00000
 800a00c:	7ff00000 	.word	0x7ff00000
 800a010:	433fffff 	.word	0x433fffff
 800a014:	3ff00000 	.word	0x3ff00000
 800a018:	3fefffff 	.word	0x3fefffff
 800a01c:	3fe00000 	.word	0x3fe00000
 800a020:	41e00000 	.word	0x41e00000
 800a024:	4b60      	ldr	r3, [pc, #384]	; (800a1a8 <__ieee754_pow+0x3f0>)
 800a026:	2200      	movs	r2, #0
 800a028:	f7f6 f936 	bl	8000298 <__aeabi_dsub>
 800a02c:	a354      	add	r3, pc, #336	; (adr r3, 800a180 <__ieee754_pow+0x3c8>)
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	4604      	mov	r4, r0
 800a034:	460d      	mov	r5, r1
 800a036:	f7f6 fae7 	bl	8000608 <__aeabi_dmul>
 800a03a:	a353      	add	r3, pc, #332	; (adr r3, 800a188 <__ieee754_pow+0x3d0>)
 800a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a040:	4606      	mov	r6, r0
 800a042:	460f      	mov	r7, r1
 800a044:	4620      	mov	r0, r4
 800a046:	4629      	mov	r1, r5
 800a048:	f7f6 fade 	bl	8000608 <__aeabi_dmul>
 800a04c:	4b57      	ldr	r3, [pc, #348]	; (800a1ac <__ieee754_pow+0x3f4>)
 800a04e:	4682      	mov	sl, r0
 800a050:	468b      	mov	fp, r1
 800a052:	2200      	movs	r2, #0
 800a054:	4620      	mov	r0, r4
 800a056:	4629      	mov	r1, r5
 800a058:	f7f6 fad6 	bl	8000608 <__aeabi_dmul>
 800a05c:	4602      	mov	r2, r0
 800a05e:	460b      	mov	r3, r1
 800a060:	a14b      	add	r1, pc, #300	; (adr r1, 800a190 <__ieee754_pow+0x3d8>)
 800a062:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a066:	f7f6 f917 	bl	8000298 <__aeabi_dsub>
 800a06a:	4622      	mov	r2, r4
 800a06c:	462b      	mov	r3, r5
 800a06e:	f7f6 facb 	bl	8000608 <__aeabi_dmul>
 800a072:	4602      	mov	r2, r0
 800a074:	460b      	mov	r3, r1
 800a076:	2000      	movs	r0, #0
 800a078:	494d      	ldr	r1, [pc, #308]	; (800a1b0 <__ieee754_pow+0x3f8>)
 800a07a:	f7f6 f90d 	bl	8000298 <__aeabi_dsub>
 800a07e:	4622      	mov	r2, r4
 800a080:	4680      	mov	r8, r0
 800a082:	4689      	mov	r9, r1
 800a084:	462b      	mov	r3, r5
 800a086:	4620      	mov	r0, r4
 800a088:	4629      	mov	r1, r5
 800a08a:	f7f6 fabd 	bl	8000608 <__aeabi_dmul>
 800a08e:	4602      	mov	r2, r0
 800a090:	460b      	mov	r3, r1
 800a092:	4640      	mov	r0, r8
 800a094:	4649      	mov	r1, r9
 800a096:	f7f6 fab7 	bl	8000608 <__aeabi_dmul>
 800a09a:	a33f      	add	r3, pc, #252	; (adr r3, 800a198 <__ieee754_pow+0x3e0>)
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	f7f6 fab2 	bl	8000608 <__aeabi_dmul>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	4650      	mov	r0, sl
 800a0aa:	4659      	mov	r1, fp
 800a0ac:	f7f6 f8f4 	bl	8000298 <__aeabi_dsub>
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	4680      	mov	r8, r0
 800a0b6:	4689      	mov	r9, r1
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	4639      	mov	r1, r7
 800a0bc:	f7f6 f8ee 	bl	800029c <__adddf3>
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	4632      	mov	r2, r6
 800a0c4:	463b      	mov	r3, r7
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	f7f6 f8e5 	bl	8000298 <__aeabi_dsub>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	f7f6 f8df 	bl	8000298 <__aeabi_dsub>
 800a0da:	9b04      	ldr	r3, [sp, #16]
 800a0dc:	9a06      	ldr	r2, [sp, #24]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	4682      	mov	sl, r0
 800a0e4:	468b      	mov	fp, r1
 800a0e6:	f040 81e7 	bne.w	800a4b8 <__ieee754_pow+0x700>
 800a0ea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a1a0 <__ieee754_pow+0x3e8>
 800a0ee:	eeb0 8a47 	vmov.f32	s16, s14
 800a0f2:	eef0 8a67 	vmov.f32	s17, s15
 800a0f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a0fa:	2600      	movs	r6, #0
 800a0fc:	4632      	mov	r2, r6
 800a0fe:	463b      	mov	r3, r7
 800a100:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a104:	f7f6 f8c8 	bl	8000298 <__aeabi_dsub>
 800a108:	4622      	mov	r2, r4
 800a10a:	462b      	mov	r3, r5
 800a10c:	f7f6 fa7c 	bl	8000608 <__aeabi_dmul>
 800a110:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a114:	4680      	mov	r8, r0
 800a116:	4689      	mov	r9, r1
 800a118:	4650      	mov	r0, sl
 800a11a:	4659      	mov	r1, fp
 800a11c:	f7f6 fa74 	bl	8000608 <__aeabi_dmul>
 800a120:	4602      	mov	r2, r0
 800a122:	460b      	mov	r3, r1
 800a124:	4640      	mov	r0, r8
 800a126:	4649      	mov	r1, r9
 800a128:	f7f6 f8b8 	bl	800029c <__adddf3>
 800a12c:	4632      	mov	r2, r6
 800a12e:	463b      	mov	r3, r7
 800a130:	4680      	mov	r8, r0
 800a132:	4689      	mov	r9, r1
 800a134:	4620      	mov	r0, r4
 800a136:	4629      	mov	r1, r5
 800a138:	f7f6 fa66 	bl	8000608 <__aeabi_dmul>
 800a13c:	460b      	mov	r3, r1
 800a13e:	4604      	mov	r4, r0
 800a140:	460d      	mov	r5, r1
 800a142:	4602      	mov	r2, r0
 800a144:	4649      	mov	r1, r9
 800a146:	4640      	mov	r0, r8
 800a148:	f7f6 f8a8 	bl	800029c <__adddf3>
 800a14c:	4b19      	ldr	r3, [pc, #100]	; (800a1b4 <__ieee754_pow+0x3fc>)
 800a14e:	4299      	cmp	r1, r3
 800a150:	ec45 4b19 	vmov	d9, r4, r5
 800a154:	4606      	mov	r6, r0
 800a156:	460f      	mov	r7, r1
 800a158:	468b      	mov	fp, r1
 800a15a:	f340 82f1 	ble.w	800a740 <__ieee754_pow+0x988>
 800a15e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a162:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a166:	4303      	orrs	r3, r0
 800a168:	f000 81e4 	beq.w	800a534 <__ieee754_pow+0x77c>
 800a16c:	ec51 0b18 	vmov	r0, r1, d8
 800a170:	2200      	movs	r2, #0
 800a172:	2300      	movs	r3, #0
 800a174:	f7f6 fcba 	bl	8000aec <__aeabi_dcmplt>
 800a178:	3800      	subs	r0, #0
 800a17a:	bf18      	it	ne
 800a17c:	2001      	movne	r0, #1
 800a17e:	e72b      	b.n	8009fd8 <__ieee754_pow+0x220>
 800a180:	60000000 	.word	0x60000000
 800a184:	3ff71547 	.word	0x3ff71547
 800a188:	f85ddf44 	.word	0xf85ddf44
 800a18c:	3e54ae0b 	.word	0x3e54ae0b
 800a190:	55555555 	.word	0x55555555
 800a194:	3fd55555 	.word	0x3fd55555
 800a198:	652b82fe 	.word	0x652b82fe
 800a19c:	3ff71547 	.word	0x3ff71547
 800a1a0:	00000000 	.word	0x00000000
 800a1a4:	bff00000 	.word	0xbff00000
 800a1a8:	3ff00000 	.word	0x3ff00000
 800a1ac:	3fd00000 	.word	0x3fd00000
 800a1b0:	3fe00000 	.word	0x3fe00000
 800a1b4:	408fffff 	.word	0x408fffff
 800a1b8:	4bd5      	ldr	r3, [pc, #852]	; (800a510 <__ieee754_pow+0x758>)
 800a1ba:	402b      	ands	r3, r5
 800a1bc:	2200      	movs	r2, #0
 800a1be:	b92b      	cbnz	r3, 800a1cc <__ieee754_pow+0x414>
 800a1c0:	4bd4      	ldr	r3, [pc, #848]	; (800a514 <__ieee754_pow+0x75c>)
 800a1c2:	f7f6 fa21 	bl	8000608 <__aeabi_dmul>
 800a1c6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	1523      	asrs	r3, r4, #20
 800a1ce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a1d2:	4413      	add	r3, r2
 800a1d4:	9305      	str	r3, [sp, #20]
 800a1d6:	4bd0      	ldr	r3, [pc, #832]	; (800a518 <__ieee754_pow+0x760>)
 800a1d8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a1dc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a1e0:	429c      	cmp	r4, r3
 800a1e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a1e6:	dd08      	ble.n	800a1fa <__ieee754_pow+0x442>
 800a1e8:	4bcc      	ldr	r3, [pc, #816]	; (800a51c <__ieee754_pow+0x764>)
 800a1ea:	429c      	cmp	r4, r3
 800a1ec:	f340 8162 	ble.w	800a4b4 <__ieee754_pow+0x6fc>
 800a1f0:	9b05      	ldr	r3, [sp, #20]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	9305      	str	r3, [sp, #20]
 800a1f6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a1fa:	2400      	movs	r4, #0
 800a1fc:	00e3      	lsls	r3, r4, #3
 800a1fe:	9307      	str	r3, [sp, #28]
 800a200:	4bc7      	ldr	r3, [pc, #796]	; (800a520 <__ieee754_pow+0x768>)
 800a202:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a206:	ed93 7b00 	vldr	d7, [r3]
 800a20a:	4629      	mov	r1, r5
 800a20c:	ec53 2b17 	vmov	r2, r3, d7
 800a210:	eeb0 9a47 	vmov.f32	s18, s14
 800a214:	eef0 9a67 	vmov.f32	s19, s15
 800a218:	4682      	mov	sl, r0
 800a21a:	f7f6 f83d 	bl	8000298 <__aeabi_dsub>
 800a21e:	4652      	mov	r2, sl
 800a220:	4606      	mov	r6, r0
 800a222:	460f      	mov	r7, r1
 800a224:	462b      	mov	r3, r5
 800a226:	ec51 0b19 	vmov	r0, r1, d9
 800a22a:	f7f6 f837 	bl	800029c <__adddf3>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	2000      	movs	r0, #0
 800a234:	49bb      	ldr	r1, [pc, #748]	; (800a524 <__ieee754_pow+0x76c>)
 800a236:	f7f6 fb11 	bl	800085c <__aeabi_ddiv>
 800a23a:	ec41 0b1a 	vmov	d10, r0, r1
 800a23e:	4602      	mov	r2, r0
 800a240:	460b      	mov	r3, r1
 800a242:	4630      	mov	r0, r6
 800a244:	4639      	mov	r1, r7
 800a246:	f7f6 f9df 	bl	8000608 <__aeabi_dmul>
 800a24a:	2300      	movs	r3, #0
 800a24c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a250:	9302      	str	r3, [sp, #8]
 800a252:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a256:	46ab      	mov	fp, r5
 800a258:	106d      	asrs	r5, r5, #1
 800a25a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a25e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a262:	ec41 0b18 	vmov	d8, r0, r1
 800a266:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a26a:	2200      	movs	r2, #0
 800a26c:	4640      	mov	r0, r8
 800a26e:	4649      	mov	r1, r9
 800a270:	4614      	mov	r4, r2
 800a272:	461d      	mov	r5, r3
 800a274:	f7f6 f9c8 	bl	8000608 <__aeabi_dmul>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	4630      	mov	r0, r6
 800a27e:	4639      	mov	r1, r7
 800a280:	f7f6 f80a 	bl	8000298 <__aeabi_dsub>
 800a284:	ec53 2b19 	vmov	r2, r3, d9
 800a288:	4606      	mov	r6, r0
 800a28a:	460f      	mov	r7, r1
 800a28c:	4620      	mov	r0, r4
 800a28e:	4629      	mov	r1, r5
 800a290:	f7f6 f802 	bl	8000298 <__aeabi_dsub>
 800a294:	4602      	mov	r2, r0
 800a296:	460b      	mov	r3, r1
 800a298:	4650      	mov	r0, sl
 800a29a:	4659      	mov	r1, fp
 800a29c:	f7f5 fffc 	bl	8000298 <__aeabi_dsub>
 800a2a0:	4642      	mov	r2, r8
 800a2a2:	464b      	mov	r3, r9
 800a2a4:	f7f6 f9b0 	bl	8000608 <__aeabi_dmul>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	460b      	mov	r3, r1
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	4639      	mov	r1, r7
 800a2b0:	f7f5 fff2 	bl	8000298 <__aeabi_dsub>
 800a2b4:	ec53 2b1a 	vmov	r2, r3, d10
 800a2b8:	f7f6 f9a6 	bl	8000608 <__aeabi_dmul>
 800a2bc:	ec53 2b18 	vmov	r2, r3, d8
 800a2c0:	ec41 0b19 	vmov	d9, r0, r1
 800a2c4:	ec51 0b18 	vmov	r0, r1, d8
 800a2c8:	f7f6 f99e 	bl	8000608 <__aeabi_dmul>
 800a2cc:	a37c      	add	r3, pc, #496	; (adr r3, 800a4c0 <__ieee754_pow+0x708>)
 800a2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	460d      	mov	r5, r1
 800a2d6:	f7f6 f997 	bl	8000608 <__aeabi_dmul>
 800a2da:	a37b      	add	r3, pc, #492	; (adr r3, 800a4c8 <__ieee754_pow+0x710>)
 800a2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e0:	f7f5 ffdc 	bl	800029c <__adddf3>
 800a2e4:	4622      	mov	r2, r4
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	f7f6 f98e 	bl	8000608 <__aeabi_dmul>
 800a2ec:	a378      	add	r3, pc, #480	; (adr r3, 800a4d0 <__ieee754_pow+0x718>)
 800a2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f2:	f7f5 ffd3 	bl	800029c <__adddf3>
 800a2f6:	4622      	mov	r2, r4
 800a2f8:	462b      	mov	r3, r5
 800a2fa:	f7f6 f985 	bl	8000608 <__aeabi_dmul>
 800a2fe:	a376      	add	r3, pc, #472	; (adr r3, 800a4d8 <__ieee754_pow+0x720>)
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	f7f5 ffca 	bl	800029c <__adddf3>
 800a308:	4622      	mov	r2, r4
 800a30a:	462b      	mov	r3, r5
 800a30c:	f7f6 f97c 	bl	8000608 <__aeabi_dmul>
 800a310:	a373      	add	r3, pc, #460	; (adr r3, 800a4e0 <__ieee754_pow+0x728>)
 800a312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a316:	f7f5 ffc1 	bl	800029c <__adddf3>
 800a31a:	4622      	mov	r2, r4
 800a31c:	462b      	mov	r3, r5
 800a31e:	f7f6 f973 	bl	8000608 <__aeabi_dmul>
 800a322:	a371      	add	r3, pc, #452	; (adr r3, 800a4e8 <__ieee754_pow+0x730>)
 800a324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a328:	f7f5 ffb8 	bl	800029c <__adddf3>
 800a32c:	4622      	mov	r2, r4
 800a32e:	4606      	mov	r6, r0
 800a330:	460f      	mov	r7, r1
 800a332:	462b      	mov	r3, r5
 800a334:	4620      	mov	r0, r4
 800a336:	4629      	mov	r1, r5
 800a338:	f7f6 f966 	bl	8000608 <__aeabi_dmul>
 800a33c:	4602      	mov	r2, r0
 800a33e:	460b      	mov	r3, r1
 800a340:	4630      	mov	r0, r6
 800a342:	4639      	mov	r1, r7
 800a344:	f7f6 f960 	bl	8000608 <__aeabi_dmul>
 800a348:	4642      	mov	r2, r8
 800a34a:	4604      	mov	r4, r0
 800a34c:	460d      	mov	r5, r1
 800a34e:	464b      	mov	r3, r9
 800a350:	ec51 0b18 	vmov	r0, r1, d8
 800a354:	f7f5 ffa2 	bl	800029c <__adddf3>
 800a358:	ec53 2b19 	vmov	r2, r3, d9
 800a35c:	f7f6 f954 	bl	8000608 <__aeabi_dmul>
 800a360:	4622      	mov	r2, r4
 800a362:	462b      	mov	r3, r5
 800a364:	f7f5 ff9a 	bl	800029c <__adddf3>
 800a368:	4642      	mov	r2, r8
 800a36a:	4682      	mov	sl, r0
 800a36c:	468b      	mov	fp, r1
 800a36e:	464b      	mov	r3, r9
 800a370:	4640      	mov	r0, r8
 800a372:	4649      	mov	r1, r9
 800a374:	f7f6 f948 	bl	8000608 <__aeabi_dmul>
 800a378:	4b6b      	ldr	r3, [pc, #428]	; (800a528 <__ieee754_pow+0x770>)
 800a37a:	2200      	movs	r2, #0
 800a37c:	4606      	mov	r6, r0
 800a37e:	460f      	mov	r7, r1
 800a380:	f7f5 ff8c 	bl	800029c <__adddf3>
 800a384:	4652      	mov	r2, sl
 800a386:	465b      	mov	r3, fp
 800a388:	f7f5 ff88 	bl	800029c <__adddf3>
 800a38c:	2000      	movs	r0, #0
 800a38e:	4604      	mov	r4, r0
 800a390:	460d      	mov	r5, r1
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	4640      	mov	r0, r8
 800a398:	4649      	mov	r1, r9
 800a39a:	f7f6 f935 	bl	8000608 <__aeabi_dmul>
 800a39e:	4b62      	ldr	r3, [pc, #392]	; (800a528 <__ieee754_pow+0x770>)
 800a3a0:	4680      	mov	r8, r0
 800a3a2:	4689      	mov	r9, r1
 800a3a4:	2200      	movs	r2, #0
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	f7f5 ff75 	bl	8000298 <__aeabi_dsub>
 800a3ae:	4632      	mov	r2, r6
 800a3b0:	463b      	mov	r3, r7
 800a3b2:	f7f5 ff71 	bl	8000298 <__aeabi_dsub>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4650      	mov	r0, sl
 800a3bc:	4659      	mov	r1, fp
 800a3be:	f7f5 ff6b 	bl	8000298 <__aeabi_dsub>
 800a3c2:	ec53 2b18 	vmov	r2, r3, d8
 800a3c6:	f7f6 f91f 	bl	8000608 <__aeabi_dmul>
 800a3ca:	4622      	mov	r2, r4
 800a3cc:	4606      	mov	r6, r0
 800a3ce:	460f      	mov	r7, r1
 800a3d0:	462b      	mov	r3, r5
 800a3d2:	ec51 0b19 	vmov	r0, r1, d9
 800a3d6:	f7f6 f917 	bl	8000608 <__aeabi_dmul>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	460b      	mov	r3, r1
 800a3de:	4630      	mov	r0, r6
 800a3e0:	4639      	mov	r1, r7
 800a3e2:	f7f5 ff5b 	bl	800029c <__adddf3>
 800a3e6:	4606      	mov	r6, r0
 800a3e8:	460f      	mov	r7, r1
 800a3ea:	4602      	mov	r2, r0
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	4640      	mov	r0, r8
 800a3f0:	4649      	mov	r1, r9
 800a3f2:	f7f5 ff53 	bl	800029c <__adddf3>
 800a3f6:	a33e      	add	r3, pc, #248	; (adr r3, 800a4f0 <__ieee754_pow+0x738>)
 800a3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	4604      	mov	r4, r0
 800a400:	460d      	mov	r5, r1
 800a402:	f7f6 f901 	bl	8000608 <__aeabi_dmul>
 800a406:	4642      	mov	r2, r8
 800a408:	ec41 0b18 	vmov	d8, r0, r1
 800a40c:	464b      	mov	r3, r9
 800a40e:	4620      	mov	r0, r4
 800a410:	4629      	mov	r1, r5
 800a412:	f7f5 ff41 	bl	8000298 <__aeabi_dsub>
 800a416:	4602      	mov	r2, r0
 800a418:	460b      	mov	r3, r1
 800a41a:	4630      	mov	r0, r6
 800a41c:	4639      	mov	r1, r7
 800a41e:	f7f5 ff3b 	bl	8000298 <__aeabi_dsub>
 800a422:	a335      	add	r3, pc, #212	; (adr r3, 800a4f8 <__ieee754_pow+0x740>)
 800a424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a428:	f7f6 f8ee 	bl	8000608 <__aeabi_dmul>
 800a42c:	a334      	add	r3, pc, #208	; (adr r3, 800a500 <__ieee754_pow+0x748>)
 800a42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a432:	4606      	mov	r6, r0
 800a434:	460f      	mov	r7, r1
 800a436:	4620      	mov	r0, r4
 800a438:	4629      	mov	r1, r5
 800a43a:	f7f6 f8e5 	bl	8000608 <__aeabi_dmul>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4630      	mov	r0, r6
 800a444:	4639      	mov	r1, r7
 800a446:	f7f5 ff29 	bl	800029c <__adddf3>
 800a44a:	9a07      	ldr	r2, [sp, #28]
 800a44c:	4b37      	ldr	r3, [pc, #220]	; (800a52c <__ieee754_pow+0x774>)
 800a44e:	4413      	add	r3, r2
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	f7f5 ff22 	bl	800029c <__adddf3>
 800a458:	4682      	mov	sl, r0
 800a45a:	9805      	ldr	r0, [sp, #20]
 800a45c:	468b      	mov	fp, r1
 800a45e:	f7f6 f869 	bl	8000534 <__aeabi_i2d>
 800a462:	9a07      	ldr	r2, [sp, #28]
 800a464:	4b32      	ldr	r3, [pc, #200]	; (800a530 <__ieee754_pow+0x778>)
 800a466:	4413      	add	r3, r2
 800a468:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a46c:	4606      	mov	r6, r0
 800a46e:	460f      	mov	r7, r1
 800a470:	4652      	mov	r2, sl
 800a472:	465b      	mov	r3, fp
 800a474:	ec51 0b18 	vmov	r0, r1, d8
 800a478:	f7f5 ff10 	bl	800029c <__adddf3>
 800a47c:	4642      	mov	r2, r8
 800a47e:	464b      	mov	r3, r9
 800a480:	f7f5 ff0c 	bl	800029c <__adddf3>
 800a484:	4632      	mov	r2, r6
 800a486:	463b      	mov	r3, r7
 800a488:	f7f5 ff08 	bl	800029c <__adddf3>
 800a48c:	2000      	movs	r0, #0
 800a48e:	4632      	mov	r2, r6
 800a490:	463b      	mov	r3, r7
 800a492:	4604      	mov	r4, r0
 800a494:	460d      	mov	r5, r1
 800a496:	f7f5 feff 	bl	8000298 <__aeabi_dsub>
 800a49a:	4642      	mov	r2, r8
 800a49c:	464b      	mov	r3, r9
 800a49e:	f7f5 fefb 	bl	8000298 <__aeabi_dsub>
 800a4a2:	ec53 2b18 	vmov	r2, r3, d8
 800a4a6:	f7f5 fef7 	bl	8000298 <__aeabi_dsub>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	460b      	mov	r3, r1
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	4659      	mov	r1, fp
 800a4b2:	e610      	b.n	800a0d6 <__ieee754_pow+0x31e>
 800a4b4:	2401      	movs	r4, #1
 800a4b6:	e6a1      	b.n	800a1fc <__ieee754_pow+0x444>
 800a4b8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a508 <__ieee754_pow+0x750>
 800a4bc:	e617      	b.n	800a0ee <__ieee754_pow+0x336>
 800a4be:	bf00      	nop
 800a4c0:	4a454eef 	.word	0x4a454eef
 800a4c4:	3fca7e28 	.word	0x3fca7e28
 800a4c8:	93c9db65 	.word	0x93c9db65
 800a4cc:	3fcd864a 	.word	0x3fcd864a
 800a4d0:	a91d4101 	.word	0xa91d4101
 800a4d4:	3fd17460 	.word	0x3fd17460
 800a4d8:	518f264d 	.word	0x518f264d
 800a4dc:	3fd55555 	.word	0x3fd55555
 800a4e0:	db6fabff 	.word	0xdb6fabff
 800a4e4:	3fdb6db6 	.word	0x3fdb6db6
 800a4e8:	33333303 	.word	0x33333303
 800a4ec:	3fe33333 	.word	0x3fe33333
 800a4f0:	e0000000 	.word	0xe0000000
 800a4f4:	3feec709 	.word	0x3feec709
 800a4f8:	dc3a03fd 	.word	0xdc3a03fd
 800a4fc:	3feec709 	.word	0x3feec709
 800a500:	145b01f5 	.word	0x145b01f5
 800a504:	be3e2fe0 	.word	0xbe3e2fe0
 800a508:	00000000 	.word	0x00000000
 800a50c:	3ff00000 	.word	0x3ff00000
 800a510:	7ff00000 	.word	0x7ff00000
 800a514:	43400000 	.word	0x43400000
 800a518:	0003988e 	.word	0x0003988e
 800a51c:	000bb679 	.word	0x000bb679
 800a520:	0800ac68 	.word	0x0800ac68
 800a524:	3ff00000 	.word	0x3ff00000
 800a528:	40080000 	.word	0x40080000
 800a52c:	0800ac88 	.word	0x0800ac88
 800a530:	0800ac78 	.word	0x0800ac78
 800a534:	a3b5      	add	r3, pc, #724	; (adr r3, 800a80c <__ieee754_pow+0xa54>)
 800a536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a53a:	4640      	mov	r0, r8
 800a53c:	4649      	mov	r1, r9
 800a53e:	f7f5 fead 	bl	800029c <__adddf3>
 800a542:	4622      	mov	r2, r4
 800a544:	ec41 0b1a 	vmov	d10, r0, r1
 800a548:	462b      	mov	r3, r5
 800a54a:	4630      	mov	r0, r6
 800a54c:	4639      	mov	r1, r7
 800a54e:	f7f5 fea3 	bl	8000298 <__aeabi_dsub>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	ec51 0b1a 	vmov	r0, r1, d10
 800a55a:	f7f6 fae5 	bl	8000b28 <__aeabi_dcmpgt>
 800a55e:	2800      	cmp	r0, #0
 800a560:	f47f ae04 	bne.w	800a16c <__ieee754_pow+0x3b4>
 800a564:	4aa4      	ldr	r2, [pc, #656]	; (800a7f8 <__ieee754_pow+0xa40>)
 800a566:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a56a:	4293      	cmp	r3, r2
 800a56c:	f340 8108 	ble.w	800a780 <__ieee754_pow+0x9c8>
 800a570:	151b      	asrs	r3, r3, #20
 800a572:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a576:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a57a:	fa4a f303 	asr.w	r3, sl, r3
 800a57e:	445b      	add	r3, fp
 800a580:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a584:	4e9d      	ldr	r6, [pc, #628]	; (800a7fc <__ieee754_pow+0xa44>)
 800a586:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a58a:	4116      	asrs	r6, r2
 800a58c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a590:	2000      	movs	r0, #0
 800a592:	ea23 0106 	bic.w	r1, r3, r6
 800a596:	f1c2 0214 	rsb	r2, r2, #20
 800a59a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a59e:	fa4a fa02 	asr.w	sl, sl, r2
 800a5a2:	f1bb 0f00 	cmp.w	fp, #0
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	4629      	mov	r1, r5
 800a5ae:	bfb8      	it	lt
 800a5b0:	f1ca 0a00 	rsblt	sl, sl, #0
 800a5b4:	f7f5 fe70 	bl	8000298 <__aeabi_dsub>
 800a5b8:	ec41 0b19 	vmov	d9, r0, r1
 800a5bc:	4642      	mov	r2, r8
 800a5be:	464b      	mov	r3, r9
 800a5c0:	ec51 0b19 	vmov	r0, r1, d9
 800a5c4:	f7f5 fe6a 	bl	800029c <__adddf3>
 800a5c8:	a37b      	add	r3, pc, #492	; (adr r3, 800a7b8 <__ieee754_pow+0xa00>)
 800a5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ce:	2000      	movs	r0, #0
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	460d      	mov	r5, r1
 800a5d4:	f7f6 f818 	bl	8000608 <__aeabi_dmul>
 800a5d8:	ec53 2b19 	vmov	r2, r3, d9
 800a5dc:	4606      	mov	r6, r0
 800a5de:	460f      	mov	r7, r1
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	f7f5 fe58 	bl	8000298 <__aeabi_dsub>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	4640      	mov	r0, r8
 800a5ee:	4649      	mov	r1, r9
 800a5f0:	f7f5 fe52 	bl	8000298 <__aeabi_dsub>
 800a5f4:	a372      	add	r3, pc, #456	; (adr r3, 800a7c0 <__ieee754_pow+0xa08>)
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	f7f6 f805 	bl	8000608 <__aeabi_dmul>
 800a5fe:	a372      	add	r3, pc, #456	; (adr r3, 800a7c8 <__ieee754_pow+0xa10>)
 800a600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a604:	4680      	mov	r8, r0
 800a606:	4689      	mov	r9, r1
 800a608:	4620      	mov	r0, r4
 800a60a:	4629      	mov	r1, r5
 800a60c:	f7f5 fffc 	bl	8000608 <__aeabi_dmul>
 800a610:	4602      	mov	r2, r0
 800a612:	460b      	mov	r3, r1
 800a614:	4640      	mov	r0, r8
 800a616:	4649      	mov	r1, r9
 800a618:	f7f5 fe40 	bl	800029c <__adddf3>
 800a61c:	4604      	mov	r4, r0
 800a61e:	460d      	mov	r5, r1
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4630      	mov	r0, r6
 800a626:	4639      	mov	r1, r7
 800a628:	f7f5 fe38 	bl	800029c <__adddf3>
 800a62c:	4632      	mov	r2, r6
 800a62e:	463b      	mov	r3, r7
 800a630:	4680      	mov	r8, r0
 800a632:	4689      	mov	r9, r1
 800a634:	f7f5 fe30 	bl	8000298 <__aeabi_dsub>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	4620      	mov	r0, r4
 800a63e:	4629      	mov	r1, r5
 800a640:	f7f5 fe2a 	bl	8000298 <__aeabi_dsub>
 800a644:	4642      	mov	r2, r8
 800a646:	4606      	mov	r6, r0
 800a648:	460f      	mov	r7, r1
 800a64a:	464b      	mov	r3, r9
 800a64c:	4640      	mov	r0, r8
 800a64e:	4649      	mov	r1, r9
 800a650:	f7f5 ffda 	bl	8000608 <__aeabi_dmul>
 800a654:	a35e      	add	r3, pc, #376	; (adr r3, 800a7d0 <__ieee754_pow+0xa18>)
 800a656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65a:	4604      	mov	r4, r0
 800a65c:	460d      	mov	r5, r1
 800a65e:	f7f5 ffd3 	bl	8000608 <__aeabi_dmul>
 800a662:	a35d      	add	r3, pc, #372	; (adr r3, 800a7d8 <__ieee754_pow+0xa20>)
 800a664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a668:	f7f5 fe16 	bl	8000298 <__aeabi_dsub>
 800a66c:	4622      	mov	r2, r4
 800a66e:	462b      	mov	r3, r5
 800a670:	f7f5 ffca 	bl	8000608 <__aeabi_dmul>
 800a674:	a35a      	add	r3, pc, #360	; (adr r3, 800a7e0 <__ieee754_pow+0xa28>)
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	f7f5 fe0f 	bl	800029c <__adddf3>
 800a67e:	4622      	mov	r2, r4
 800a680:	462b      	mov	r3, r5
 800a682:	f7f5 ffc1 	bl	8000608 <__aeabi_dmul>
 800a686:	a358      	add	r3, pc, #352	; (adr r3, 800a7e8 <__ieee754_pow+0xa30>)
 800a688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68c:	f7f5 fe04 	bl	8000298 <__aeabi_dsub>
 800a690:	4622      	mov	r2, r4
 800a692:	462b      	mov	r3, r5
 800a694:	f7f5 ffb8 	bl	8000608 <__aeabi_dmul>
 800a698:	a355      	add	r3, pc, #340	; (adr r3, 800a7f0 <__ieee754_pow+0xa38>)
 800a69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69e:	f7f5 fdfd 	bl	800029c <__adddf3>
 800a6a2:	4622      	mov	r2, r4
 800a6a4:	462b      	mov	r3, r5
 800a6a6:	f7f5 ffaf 	bl	8000608 <__aeabi_dmul>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4640      	mov	r0, r8
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	f7f5 fdf1 	bl	8000298 <__aeabi_dsub>
 800a6b6:	4604      	mov	r4, r0
 800a6b8:	460d      	mov	r5, r1
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	460b      	mov	r3, r1
 800a6be:	4640      	mov	r0, r8
 800a6c0:	4649      	mov	r1, r9
 800a6c2:	f7f5 ffa1 	bl	8000608 <__aeabi_dmul>
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	ec41 0b19 	vmov	d9, r0, r1
 800a6cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	f7f5 fde0 	bl	8000298 <__aeabi_dsub>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	ec51 0b19 	vmov	r0, r1, d9
 800a6e0:	f7f6 f8bc 	bl	800085c <__aeabi_ddiv>
 800a6e4:	4632      	mov	r2, r6
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	460d      	mov	r5, r1
 800a6ea:	463b      	mov	r3, r7
 800a6ec:	4640      	mov	r0, r8
 800a6ee:	4649      	mov	r1, r9
 800a6f0:	f7f5 ff8a 	bl	8000608 <__aeabi_dmul>
 800a6f4:	4632      	mov	r2, r6
 800a6f6:	463b      	mov	r3, r7
 800a6f8:	f7f5 fdd0 	bl	800029c <__adddf3>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	4620      	mov	r0, r4
 800a702:	4629      	mov	r1, r5
 800a704:	f7f5 fdc8 	bl	8000298 <__aeabi_dsub>
 800a708:	4642      	mov	r2, r8
 800a70a:	464b      	mov	r3, r9
 800a70c:	f7f5 fdc4 	bl	8000298 <__aeabi_dsub>
 800a710:	460b      	mov	r3, r1
 800a712:	4602      	mov	r2, r0
 800a714:	493a      	ldr	r1, [pc, #232]	; (800a800 <__ieee754_pow+0xa48>)
 800a716:	2000      	movs	r0, #0
 800a718:	f7f5 fdbe 	bl	8000298 <__aeabi_dsub>
 800a71c:	ec41 0b10 	vmov	d0, r0, r1
 800a720:	ee10 3a90 	vmov	r3, s1
 800a724:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a72c:	da2b      	bge.n	800a786 <__ieee754_pow+0x9ce>
 800a72e:	4650      	mov	r0, sl
 800a730:	f000 f966 	bl	800aa00 <scalbn>
 800a734:	ec51 0b10 	vmov	r0, r1, d0
 800a738:	ec53 2b18 	vmov	r2, r3, d8
 800a73c:	f7ff bbed 	b.w	8009f1a <__ieee754_pow+0x162>
 800a740:	4b30      	ldr	r3, [pc, #192]	; (800a804 <__ieee754_pow+0xa4c>)
 800a742:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a746:	429e      	cmp	r6, r3
 800a748:	f77f af0c 	ble.w	800a564 <__ieee754_pow+0x7ac>
 800a74c:	4b2e      	ldr	r3, [pc, #184]	; (800a808 <__ieee754_pow+0xa50>)
 800a74e:	440b      	add	r3, r1
 800a750:	4303      	orrs	r3, r0
 800a752:	d009      	beq.n	800a768 <__ieee754_pow+0x9b0>
 800a754:	ec51 0b18 	vmov	r0, r1, d8
 800a758:	2200      	movs	r2, #0
 800a75a:	2300      	movs	r3, #0
 800a75c:	f7f6 f9c6 	bl	8000aec <__aeabi_dcmplt>
 800a760:	3800      	subs	r0, #0
 800a762:	bf18      	it	ne
 800a764:	2001      	movne	r0, #1
 800a766:	e447      	b.n	8009ff8 <__ieee754_pow+0x240>
 800a768:	4622      	mov	r2, r4
 800a76a:	462b      	mov	r3, r5
 800a76c:	f7f5 fd94 	bl	8000298 <__aeabi_dsub>
 800a770:	4642      	mov	r2, r8
 800a772:	464b      	mov	r3, r9
 800a774:	f7f6 f9ce 	bl	8000b14 <__aeabi_dcmpge>
 800a778:	2800      	cmp	r0, #0
 800a77a:	f43f aef3 	beq.w	800a564 <__ieee754_pow+0x7ac>
 800a77e:	e7e9      	b.n	800a754 <__ieee754_pow+0x99c>
 800a780:	f04f 0a00 	mov.w	sl, #0
 800a784:	e71a      	b.n	800a5bc <__ieee754_pow+0x804>
 800a786:	ec51 0b10 	vmov	r0, r1, d0
 800a78a:	4619      	mov	r1, r3
 800a78c:	e7d4      	b.n	800a738 <__ieee754_pow+0x980>
 800a78e:	491c      	ldr	r1, [pc, #112]	; (800a800 <__ieee754_pow+0xa48>)
 800a790:	2000      	movs	r0, #0
 800a792:	f7ff bb30 	b.w	8009df6 <__ieee754_pow+0x3e>
 800a796:	2000      	movs	r0, #0
 800a798:	2100      	movs	r1, #0
 800a79a:	f7ff bb2c 	b.w	8009df6 <__ieee754_pow+0x3e>
 800a79e:	4630      	mov	r0, r6
 800a7a0:	4639      	mov	r1, r7
 800a7a2:	f7ff bb28 	b.w	8009df6 <__ieee754_pow+0x3e>
 800a7a6:	9204      	str	r2, [sp, #16]
 800a7a8:	f7ff bb7a 	b.w	8009ea0 <__ieee754_pow+0xe8>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	f7ff bb64 	b.w	8009e7a <__ieee754_pow+0xc2>
 800a7b2:	bf00      	nop
 800a7b4:	f3af 8000 	nop.w
 800a7b8:	00000000 	.word	0x00000000
 800a7bc:	3fe62e43 	.word	0x3fe62e43
 800a7c0:	fefa39ef 	.word	0xfefa39ef
 800a7c4:	3fe62e42 	.word	0x3fe62e42
 800a7c8:	0ca86c39 	.word	0x0ca86c39
 800a7cc:	be205c61 	.word	0xbe205c61
 800a7d0:	72bea4d0 	.word	0x72bea4d0
 800a7d4:	3e663769 	.word	0x3e663769
 800a7d8:	c5d26bf1 	.word	0xc5d26bf1
 800a7dc:	3ebbbd41 	.word	0x3ebbbd41
 800a7e0:	af25de2c 	.word	0xaf25de2c
 800a7e4:	3f11566a 	.word	0x3f11566a
 800a7e8:	16bebd93 	.word	0x16bebd93
 800a7ec:	3f66c16c 	.word	0x3f66c16c
 800a7f0:	5555553e 	.word	0x5555553e
 800a7f4:	3fc55555 	.word	0x3fc55555
 800a7f8:	3fe00000 	.word	0x3fe00000
 800a7fc:	000fffff 	.word	0x000fffff
 800a800:	3ff00000 	.word	0x3ff00000
 800a804:	4090cbff 	.word	0x4090cbff
 800a808:	3f6f3400 	.word	0x3f6f3400
 800a80c:	652b82fe 	.word	0x652b82fe
 800a810:	3c971547 	.word	0x3c971547

0800a814 <__ieee754_sqrt>:
 800a814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a818:	ec55 4b10 	vmov	r4, r5, d0
 800a81c:	4e55      	ldr	r6, [pc, #340]	; (800a974 <__ieee754_sqrt+0x160>)
 800a81e:	43ae      	bics	r6, r5
 800a820:	ee10 0a10 	vmov	r0, s0
 800a824:	ee10 3a10 	vmov	r3, s0
 800a828:	462a      	mov	r2, r5
 800a82a:	4629      	mov	r1, r5
 800a82c:	d110      	bne.n	800a850 <__ieee754_sqrt+0x3c>
 800a82e:	ee10 2a10 	vmov	r2, s0
 800a832:	462b      	mov	r3, r5
 800a834:	f7f5 fee8 	bl	8000608 <__aeabi_dmul>
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	4620      	mov	r0, r4
 800a83e:	4629      	mov	r1, r5
 800a840:	f7f5 fd2c 	bl	800029c <__adddf3>
 800a844:	4604      	mov	r4, r0
 800a846:	460d      	mov	r5, r1
 800a848:	ec45 4b10 	vmov	d0, r4, r5
 800a84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a850:	2d00      	cmp	r5, #0
 800a852:	dc10      	bgt.n	800a876 <__ieee754_sqrt+0x62>
 800a854:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a858:	4330      	orrs	r0, r6
 800a85a:	d0f5      	beq.n	800a848 <__ieee754_sqrt+0x34>
 800a85c:	b15d      	cbz	r5, 800a876 <__ieee754_sqrt+0x62>
 800a85e:	ee10 2a10 	vmov	r2, s0
 800a862:	462b      	mov	r3, r5
 800a864:	ee10 0a10 	vmov	r0, s0
 800a868:	f7f5 fd16 	bl	8000298 <__aeabi_dsub>
 800a86c:	4602      	mov	r2, r0
 800a86e:	460b      	mov	r3, r1
 800a870:	f7f5 fff4 	bl	800085c <__aeabi_ddiv>
 800a874:	e7e6      	b.n	800a844 <__ieee754_sqrt+0x30>
 800a876:	1512      	asrs	r2, r2, #20
 800a878:	d074      	beq.n	800a964 <__ieee754_sqrt+0x150>
 800a87a:	07d4      	lsls	r4, r2, #31
 800a87c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a880:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a888:	bf5e      	ittt	pl
 800a88a:	0fda      	lsrpl	r2, r3, #31
 800a88c:	005b      	lslpl	r3, r3, #1
 800a88e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a892:	2400      	movs	r4, #0
 800a894:	0fda      	lsrs	r2, r3, #31
 800a896:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a89a:	107f      	asrs	r7, r7, #1
 800a89c:	005b      	lsls	r3, r3, #1
 800a89e:	2516      	movs	r5, #22
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a8a6:	1886      	adds	r6, r0, r2
 800a8a8:	428e      	cmp	r6, r1
 800a8aa:	bfde      	ittt	le
 800a8ac:	1b89      	suble	r1, r1, r6
 800a8ae:	18b0      	addle	r0, r6, r2
 800a8b0:	18a4      	addle	r4, r4, r2
 800a8b2:	0049      	lsls	r1, r1, #1
 800a8b4:	3d01      	subs	r5, #1
 800a8b6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a8ba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a8be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a8c2:	d1f0      	bne.n	800a8a6 <__ieee754_sqrt+0x92>
 800a8c4:	462a      	mov	r2, r5
 800a8c6:	f04f 0e20 	mov.w	lr, #32
 800a8ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a8ce:	4281      	cmp	r1, r0
 800a8d0:	eb06 0c05 	add.w	ip, r6, r5
 800a8d4:	dc02      	bgt.n	800a8dc <__ieee754_sqrt+0xc8>
 800a8d6:	d113      	bne.n	800a900 <__ieee754_sqrt+0xec>
 800a8d8:	459c      	cmp	ip, r3
 800a8da:	d811      	bhi.n	800a900 <__ieee754_sqrt+0xec>
 800a8dc:	f1bc 0f00 	cmp.w	ip, #0
 800a8e0:	eb0c 0506 	add.w	r5, ip, r6
 800a8e4:	da43      	bge.n	800a96e <__ieee754_sqrt+0x15a>
 800a8e6:	2d00      	cmp	r5, #0
 800a8e8:	db41      	blt.n	800a96e <__ieee754_sqrt+0x15a>
 800a8ea:	f100 0801 	add.w	r8, r0, #1
 800a8ee:	1a09      	subs	r1, r1, r0
 800a8f0:	459c      	cmp	ip, r3
 800a8f2:	bf88      	it	hi
 800a8f4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800a8f8:	eba3 030c 	sub.w	r3, r3, ip
 800a8fc:	4432      	add	r2, r6
 800a8fe:	4640      	mov	r0, r8
 800a900:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a904:	f1be 0e01 	subs.w	lr, lr, #1
 800a908:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a90c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a910:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a914:	d1db      	bne.n	800a8ce <__ieee754_sqrt+0xba>
 800a916:	430b      	orrs	r3, r1
 800a918:	d006      	beq.n	800a928 <__ieee754_sqrt+0x114>
 800a91a:	1c50      	adds	r0, r2, #1
 800a91c:	bf13      	iteet	ne
 800a91e:	3201      	addne	r2, #1
 800a920:	3401      	addeq	r4, #1
 800a922:	4672      	moveq	r2, lr
 800a924:	f022 0201 	bicne.w	r2, r2, #1
 800a928:	1063      	asrs	r3, r4, #1
 800a92a:	0852      	lsrs	r2, r2, #1
 800a92c:	07e1      	lsls	r1, r4, #31
 800a92e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a932:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a936:	bf48      	it	mi
 800a938:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a93c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a940:	4614      	mov	r4, r2
 800a942:	e781      	b.n	800a848 <__ieee754_sqrt+0x34>
 800a944:	0ad9      	lsrs	r1, r3, #11
 800a946:	3815      	subs	r0, #21
 800a948:	055b      	lsls	r3, r3, #21
 800a94a:	2900      	cmp	r1, #0
 800a94c:	d0fa      	beq.n	800a944 <__ieee754_sqrt+0x130>
 800a94e:	02cd      	lsls	r5, r1, #11
 800a950:	d50a      	bpl.n	800a968 <__ieee754_sqrt+0x154>
 800a952:	f1c2 0420 	rsb	r4, r2, #32
 800a956:	fa23 f404 	lsr.w	r4, r3, r4
 800a95a:	1e55      	subs	r5, r2, #1
 800a95c:	4093      	lsls	r3, r2
 800a95e:	4321      	orrs	r1, r4
 800a960:	1b42      	subs	r2, r0, r5
 800a962:	e78a      	b.n	800a87a <__ieee754_sqrt+0x66>
 800a964:	4610      	mov	r0, r2
 800a966:	e7f0      	b.n	800a94a <__ieee754_sqrt+0x136>
 800a968:	0049      	lsls	r1, r1, #1
 800a96a:	3201      	adds	r2, #1
 800a96c:	e7ef      	b.n	800a94e <__ieee754_sqrt+0x13a>
 800a96e:	4680      	mov	r8, r0
 800a970:	e7bd      	b.n	800a8ee <__ieee754_sqrt+0xda>
 800a972:	bf00      	nop
 800a974:	7ff00000 	.word	0x7ff00000

0800a978 <with_errno>:
 800a978:	b570      	push	{r4, r5, r6, lr}
 800a97a:	4604      	mov	r4, r0
 800a97c:	460d      	mov	r5, r1
 800a97e:	4616      	mov	r6, r2
 800a980:	f7fe fc52 	bl	8009228 <__errno>
 800a984:	4629      	mov	r1, r5
 800a986:	6006      	str	r6, [r0, #0]
 800a988:	4620      	mov	r0, r4
 800a98a:	bd70      	pop	{r4, r5, r6, pc}

0800a98c <xflow>:
 800a98c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a98e:	4614      	mov	r4, r2
 800a990:	461d      	mov	r5, r3
 800a992:	b108      	cbz	r0, 800a998 <xflow+0xc>
 800a994:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a998:	e9cd 2300 	strd	r2, r3, [sp]
 800a99c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	4629      	mov	r1, r5
 800a9a4:	f7f5 fe30 	bl	8000608 <__aeabi_dmul>
 800a9a8:	2222      	movs	r2, #34	; 0x22
 800a9aa:	b003      	add	sp, #12
 800a9ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9b0:	f7ff bfe2 	b.w	800a978 <with_errno>

0800a9b4 <__math_uflow>:
 800a9b4:	b508      	push	{r3, lr}
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a9bc:	f7ff ffe6 	bl	800a98c <xflow>
 800a9c0:	ec41 0b10 	vmov	d0, r0, r1
 800a9c4:	bd08      	pop	{r3, pc}

0800a9c6 <__math_oflow>:
 800a9c6:	b508      	push	{r3, lr}
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a9ce:	f7ff ffdd 	bl	800a98c <xflow>
 800a9d2:	ec41 0b10 	vmov	d0, r0, r1
 800a9d6:	bd08      	pop	{r3, pc}

0800a9d8 <fabs>:
 800a9d8:	ec51 0b10 	vmov	r0, r1, d0
 800a9dc:	ee10 2a10 	vmov	r2, s0
 800a9e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a9e4:	ec43 2b10 	vmov	d0, r2, r3
 800a9e8:	4770      	bx	lr

0800a9ea <finite>:
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	ed8d 0b00 	vstr	d0, [sp]
 800a9f0:	9801      	ldr	r0, [sp, #4]
 800a9f2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a9f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a9fa:	0fc0      	lsrs	r0, r0, #31
 800a9fc:	b002      	add	sp, #8
 800a9fe:	4770      	bx	lr

0800aa00 <scalbn>:
 800aa00:	b570      	push	{r4, r5, r6, lr}
 800aa02:	ec55 4b10 	vmov	r4, r5, d0
 800aa06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	462b      	mov	r3, r5
 800aa0e:	b99a      	cbnz	r2, 800aa38 <scalbn+0x38>
 800aa10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aa14:	4323      	orrs	r3, r4
 800aa16:	d036      	beq.n	800aa86 <scalbn+0x86>
 800aa18:	4b39      	ldr	r3, [pc, #228]	; (800ab00 <scalbn+0x100>)
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	ee10 0a10 	vmov	r0, s0
 800aa20:	2200      	movs	r2, #0
 800aa22:	f7f5 fdf1 	bl	8000608 <__aeabi_dmul>
 800aa26:	4b37      	ldr	r3, [pc, #220]	; (800ab04 <scalbn+0x104>)
 800aa28:	429e      	cmp	r6, r3
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	460d      	mov	r5, r1
 800aa2e:	da10      	bge.n	800aa52 <scalbn+0x52>
 800aa30:	a32b      	add	r3, pc, #172	; (adr r3, 800aae0 <scalbn+0xe0>)
 800aa32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa36:	e03a      	b.n	800aaae <scalbn+0xae>
 800aa38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800aa3c:	428a      	cmp	r2, r1
 800aa3e:	d10c      	bne.n	800aa5a <scalbn+0x5a>
 800aa40:	ee10 2a10 	vmov	r2, s0
 800aa44:	4620      	mov	r0, r4
 800aa46:	4629      	mov	r1, r5
 800aa48:	f7f5 fc28 	bl	800029c <__adddf3>
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	460d      	mov	r5, r1
 800aa50:	e019      	b.n	800aa86 <scalbn+0x86>
 800aa52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aa56:	460b      	mov	r3, r1
 800aa58:	3a36      	subs	r2, #54	; 0x36
 800aa5a:	4432      	add	r2, r6
 800aa5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aa60:	428a      	cmp	r2, r1
 800aa62:	dd08      	ble.n	800aa76 <scalbn+0x76>
 800aa64:	2d00      	cmp	r5, #0
 800aa66:	a120      	add	r1, pc, #128	; (adr r1, 800aae8 <scalbn+0xe8>)
 800aa68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa6c:	da1c      	bge.n	800aaa8 <scalbn+0xa8>
 800aa6e:	a120      	add	r1, pc, #128	; (adr r1, 800aaf0 <scalbn+0xf0>)
 800aa70:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa74:	e018      	b.n	800aaa8 <scalbn+0xa8>
 800aa76:	2a00      	cmp	r2, #0
 800aa78:	dd08      	ble.n	800aa8c <scalbn+0x8c>
 800aa7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aa7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aa82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800aa86:	ec45 4b10 	vmov	d0, r4, r5
 800aa8a:	bd70      	pop	{r4, r5, r6, pc}
 800aa8c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800aa90:	da19      	bge.n	800aac6 <scalbn+0xc6>
 800aa92:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aa96:	429e      	cmp	r6, r3
 800aa98:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800aa9c:	dd0a      	ble.n	800aab4 <scalbn+0xb4>
 800aa9e:	a112      	add	r1, pc, #72	; (adr r1, 800aae8 <scalbn+0xe8>)
 800aaa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1e2      	bne.n	800aa6e <scalbn+0x6e>
 800aaa8:	a30f      	add	r3, pc, #60	; (adr r3, 800aae8 <scalbn+0xe8>)
 800aaaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaae:	f7f5 fdab 	bl	8000608 <__aeabi_dmul>
 800aab2:	e7cb      	b.n	800aa4c <scalbn+0x4c>
 800aab4:	a10a      	add	r1, pc, #40	; (adr r1, 800aae0 <scalbn+0xe0>)
 800aab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d0b8      	beq.n	800aa30 <scalbn+0x30>
 800aabe:	a10e      	add	r1, pc, #56	; (adr r1, 800aaf8 <scalbn+0xf8>)
 800aac0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aac4:	e7b4      	b.n	800aa30 <scalbn+0x30>
 800aac6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800aaca:	3236      	adds	r2, #54	; 0x36
 800aacc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aad0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800aad4:	4620      	mov	r0, r4
 800aad6:	4b0c      	ldr	r3, [pc, #48]	; (800ab08 <scalbn+0x108>)
 800aad8:	2200      	movs	r2, #0
 800aada:	e7e8      	b.n	800aaae <scalbn+0xae>
 800aadc:	f3af 8000 	nop.w
 800aae0:	c2f8f359 	.word	0xc2f8f359
 800aae4:	01a56e1f 	.word	0x01a56e1f
 800aae8:	8800759c 	.word	0x8800759c
 800aaec:	7e37e43c 	.word	0x7e37e43c
 800aaf0:	8800759c 	.word	0x8800759c
 800aaf4:	fe37e43c 	.word	0xfe37e43c
 800aaf8:	c2f8f359 	.word	0xc2f8f359
 800aafc:	81a56e1f 	.word	0x81a56e1f
 800ab00:	43500000 	.word	0x43500000
 800ab04:	ffff3cb0 	.word	0xffff3cb0
 800ab08:	3c900000 	.word	0x3c900000

0800ab0c <_init>:
 800ab0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0e:	bf00      	nop
 800ab10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab12:	bc08      	pop	{r3}
 800ab14:	469e      	mov	lr, r3
 800ab16:	4770      	bx	lr

0800ab18 <_fini>:
 800ab18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab1a:	bf00      	nop
 800ab1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab1e:	bc08      	pop	{r3}
 800ab20:	469e      	mov	lr, r3
 800ab22:	4770      	bx	lr
